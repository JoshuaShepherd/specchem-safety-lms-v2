{"version":3,"sources":["../src/index.ts","../src/safety-training-contracts.ts","../src/safety-training-endpoints.ts","../src/safety-training-openapi-minimal.ts","../src/safety-training-validation.ts","../src/lms-content-contracts.ts","../src/lms-content-endpoints.ts"],"sourcesContent":["// =============================================================================\n// CONTRACTS PACKAGE EXPORTS\n// =============================================================================\n\n/**\n * Contracts package exports for the Safety System.\n * This provides TypeScript interfaces and types for API contracts.\n */\n\n// =============================================================================\n// DATABASE TYPES RE-EXPORTS\n// =============================================================================\n\n// Note: Database types will be re-exported from @specchem/db once the package is fully built\n// For now, we'll define basic interfaces that match the database schema\n\n// =============================================================================\n// API CONTRACT INTERFACES\n// =============================================================================\n\n/**\n * Base API response structure\n */\nexport interface ApiResponse<T = unknown> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n  timestamp: string;\n}\n\n/**\n * Paginated API response structure\n */\nexport interface PaginatedResponse<T = unknown> extends ApiResponse<T[]> {\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\n/**\n * API request parameters for pagination\n */\nexport interface PaginationParams {\n  page?: number;\n  limit?: number;\n  sortBy?: string;\n  sortOrder?: \"asc\" | \"desc\";\n}\n\n/**\n * API request parameters for filtering\n */\nexport interface FilterParams {\n  search?: string;\n  filters?: Record<string, string | number | boolean | string[]>;\n  dateRange?: {\n    start: string;\n    end: string;\n  };\n}\n\n// =============================================================================\n// AUTHENTICATION CONTRACTS\n// =============================================================================\n\n/**\n * User authentication response\n */\nexport interface AuthResponse {\n  user: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    territoryId: string;\n  };\n  session: {\n    accessToken: string;\n    refreshToken: string;\n    expiresAt: string;\n  };\n}\n\n/**\n * Login request\n */\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\n/**\n * Register request\n */\nexport interface RegisterRequest {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  territoryId: string;\n  role?: string;\n}\n\n// =============================================================================\n// SAFETY TRAINING CONTRACTS\n// =============================================================================\n\n/**\n * Comprehensive Safety Training API contracts\n */\nexport * from \"./safety-training-contracts\";\nexport * from \"./safety-training-endpoints\";\nexport * from \"./safety-training-openapi-minimal\";\nexport * from \"./safety-training-validation\";\n\n// =============================================================================\n// LMS CONTENT CONTRACTS\n// =============================================================================\n\n/**\n * LMS Content API contracts for structured course content\n */\nexport * from \"./lms-content-contracts\";\nexport * from \"./lms-content-endpoints\";\n\n// =============================================================================\n// SAFETY BUSINESS CONTRACTS\n// =============================================================================\n\n/**\n * Account creation request\n */\nexport interface CreateAccountRequest {\n  name: string;\n  type: string;\n  industry?: string;\n  website?: string;\n  phone?: string;\n  email?: string;\n  description?: string;\n  annualRevenue?: number;\n  employeeCount?: string;\n  safetyComplianceLevel?: string;\n  billingAddress?: string;\n  shippingAddress?: string;\n}\n\n/**\n * Contact creation request\n */\nexport interface CreateContactRequest {\n  accountId: string;\n  branchId?: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone?: string;\n  mobile?: string;\n  jobTitle?: string;\n  department?: string;\n  role?: string;\n  isPrimary?: boolean;\n  safetyCertifications?: string;\n  notes?: string;\n}\n\n/**\n * Opportunity creation request\n */\nexport interface CreateOpportunityRequest {\n  accountId: string;\n  contactId?: string;\n  name: string;\n  description?: string;\n  type: string;\n  stage?: string;\n  source?: string;\n  probability?: string;\n  amount?: number;\n  closeDate?: string;\n  nextSteps?: string;\n  safetyRequirements?: string;\n  complianceNotes?: string;\n  notes?: string;\n}\n\n/**\n * Activity log creation request\n */\nexport interface CreateActivityLogRequest {\n  accountId?: string;\n  contactId?: string;\n  type: string;\n  subject: string;\n  description?: string;\n  status?: string;\n  priority?: string;\n  scheduledAt?: string;\n  duration?: string;\n  outcome?: string;\n  nextSteps?: string;\n  safetyNotes?: string;\n}\n\n// =============================================================================\n// SEARCH AND FILTER CONTRACTS\n// =============================================================================\n\n/**\n * Search request parameters\n */\nexport interface SearchRequest extends PaginationParams, FilterParams {\n  query?: string;\n}\n\n/**\n * Account search filters\n */\nexport interface AccountSearchFilters {\n  type?: string[];\n  status?: string[];\n  industry?: string[];\n  territoryId?: string;\n  ownerId?: string;\n  isActive?: boolean;\n}\n\n/**\n * Contact search filters\n */\nexport interface ContactSearchFilters {\n  accountId?: string;\n  branchId?: string;\n  role?: string[];\n  status?: string[];\n  isPrimary?: boolean;\n  isActive?: boolean;\n}\n\n/**\n * Opportunity search filters\n */\nexport interface OpportunitySearchFilters {\n  accountId?: string;\n  contactId?: string;\n  type?: string[];\n  stage?: string[];\n  status?: string[];\n  source?: string[];\n  probability?: string[];\n  ownerId?: string;\n  isActive?: boolean;\n}\n\n// =============================================================================\n// REPORTING CONTRACTS\n// =============================================================================\n\n/**\n * Sales report request\n */\nexport interface SalesReportRequest {\n  periodType: string;\n  periodStart: string;\n  periodEnd: string;\n  territoryId?: string;\n  userId?: string;\n  factType?: string[];\n}\n\n/**\n * Training report request\n */\nexport interface TrainingReportRequest {\n  periodStart: string;\n  periodEnd: string;\n  plantId?: string;\n  courseId?: string;\n  userId?: string;\n}\n\n/**\n * Compliance report request\n */\nexport interface ComplianceReportRequest {\n  periodStart: string;\n  periodEnd: string;\n  territoryId?: string;\n  complianceStandard?: string[];\n}\n\n// =============================================================================\n// ERROR CONTRACTS\n// =============================================================================\n\n/**\n * API error response\n */\nexport interface ApiError {\n  code: string;\n  message: string;\n  details?: Record<string, string | number | boolean>;\n  timestamp: string;\n}\n\n/**\n * Validation error response\n */\nexport interface ValidationError extends ApiError {\n  field: string;\n  value: unknown;\n  constraint: string;\n}\n\n// =============================================================================\n// PACKAGE METADATA\n// =============================================================================\n\nexport const PACKAGE_VERSION = \"1.0.0\";\nexport const PACKAGE_NAME = \"@specchem/contracts\";\nexport const PACKAGE_DESCRIPTION =\n  \"TypeScript contracts and interfaces for Safety System API\";\n\n/**\n * Package metadata\n */\nexport const PACKAGE_METADATA = {\n  name: PACKAGE_NAME,\n  version: PACKAGE_VERSION,\n  description: PACKAGE_DESCRIPTION,\n  features: [\n    \"TypeScript API Contracts\",\n    \"Database Type Re-exports\",\n    \"Authentication Interfaces\",\n    \"Comprehensive Safety Training Contracts\",\n    \"Plant-scoped Multi-tenancy\",\n    \"Role-based Access Control\",\n    \"OpenAPI Specifications\",\n    \"Validation Middleware\",\n    \"Safety Business Contracts\",\n    \"Search and Filter Types\",\n    \"Reporting Interfaces\",\n    \"Error Handling Types\",\n  ],\n  contracts: {\n    apiContracts: 25,\n    authContracts: 3,\n    trainingContracts: 45,\n    businessContracts: 4,\n    searchContracts: 3,\n    reportingContracts: 3,\n    errorContracts: 2,\n    endpointSpecs: 35,\n    openApiSpecs: 1,\n    validationMiddleware: 1,\n    totalContracts: 122,\n  },\n  safetyTraining: {\n    entities: 7,\n    requestSchemas: 12,\n    responseSchemas: 7,\n    paginatedSchemas: 7,\n    querySchemas: 6,\n    endpointSpecs: 35,\n    errorCodes: 21,\n    validationUtils: 15,\n    integrationSchemas: 2,\n  },\n  compatibility: {\n    typescript: \"5.0+\",\n    node: \"18.0+\",\n    nextjs: \"14.0+\",\n    zod: \"3.0+\",\n  },\n} as const;\n","// =============================================================================\n// SAFETY TRAINING API CONTRACTS\n// =============================================================================\n\n/**\n * Comprehensive Safety Training API contracts that integrate with existing auth endpoints\n * while maintaining clear separation and plant-scoped data access.\n */\n\nimport { z } from \"zod\";\n\n// =============================================================================\n// SAFETY TRAINING BRANDED TYPES\n// =============================================================================\n\n/**\n * Safety Training branded types for type safety\n */\nexport const SafetyTrainingIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"SafetyTrainingId\">();\nexport type SafetyTrainingId = z.infer<typeof SafetyTrainingIdSchema>;\n\nexport const CourseIdSchema = z.string().uuid().brand<\"CourseId\">();\nexport type CourseId = z.infer<typeof CourseIdSchema>;\n\nexport const EnrollmentIdSchema = z.string().uuid().brand<\"EnrollmentId\">();\nexport type EnrollmentId = z.infer<typeof EnrollmentIdSchema>;\n\nexport const ProgressIdSchema = z.string().uuid().brand<\"ProgressId\">();\nexport type ProgressId = z.infer<typeof ProgressIdSchema>;\n\nexport const ActivityEventIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"ActivityEventId\">();\nexport type ActivityEventId = z.infer<typeof ActivityEventIdSchema>;\n\nexport const QuestionEventIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"QuestionEventId\">();\nexport type QuestionEventId = z.infer<typeof QuestionEventIdSchema>;\n\nexport const AdminRoleIdSchema = z.string().uuid().brand<\"AdminRoleId\">();\nexport type AdminRoleId = z.infer<typeof AdminRoleIdSchema>;\n\nexport const PlantIdSchema = z.string().uuid().brand<\"PlantId\">();\nexport type PlantId = z.infer<typeof PlantIdSchema>;\n\nexport const UserIdSchema = z.string().uuid().brand<\"UserId\">();\nexport type UserId = z.infer<typeof UserIdSchema>;\n\n// =============================================================================\n// SAFETY TRAINING ENUM SCHEMAS\n// =============================================================================\n\n/**\n * Course status enum\n */\nexport const CourseStatusSchema = z.enum([\n  \"draft\",\n  \"active\",\n  \"inactive\",\n  \"archived\",\n]);\nexport type CourseStatus = z.infer<typeof CourseStatusSchema>;\n\n/**\n * Course type enum\n */\nexport const CourseTypeSchema = z.enum([\n  \"safety_orientation\",\n  \"hazard_communication\",\n  \"emergency_response\",\n  \"equipment_operation\",\n  \"compliance_training\",\n  \"certification\",\n  \"refresher\",\n  \"custom\",\n]);\nexport type CourseType = z.infer<typeof CourseTypeSchema>;\n\n/**\n * Enrollment status enum\n */\nexport const EnrollmentStatusSchema = z.enum([\n  \"enrolled\",\n  \"in_progress\",\n  \"completed\",\n  \"failed\",\n  \"expired\",\n  \"cancelled\",\n]);\nexport type EnrollmentStatus = z.infer<typeof EnrollmentStatusSchema>;\n\n/**\n * Progress status enum\n */\nexport const ProgressStatusSchema = z.enum([\n  \"not_started\",\n  \"in_progress\",\n  \"completed\",\n  \"paused\",\n  \"failed\",\n]);\nexport type ProgressStatus = z.infer<typeof ProgressStatusSchema>;\n\n/**\n * Activity event type enum\n */\nexport const ActivityEventTypeSchema = z.enum([\n  \"course_started\",\n  \"course_completed\",\n  \"section_started\",\n  \"section_completed\",\n  \"quiz_started\",\n  \"quiz_completed\",\n  \"video_watched\",\n  \"document_viewed\",\n  \"certificate_earned\",\n  \"enrollment_created\",\n  \"enrollment_cancelled\",\n]);\nexport type ActivityEventType = z.infer<typeof ActivityEventTypeSchema>;\n\n/**\n * Admin role type enum\n */\nexport const AdminRoleTypeSchema = z.enum([\n  \"plant_admin\",\n  \"course_admin\",\n  \"instructor\",\n  \"supervisor\",\n  \"compliance_officer\",\n]);\nexport type AdminRoleType = z.infer<typeof AdminRoleTypeSchema>;\n\n// =============================================================================\n// SAFETY TRAINING ENTITY SCHEMAS\n// =============================================================================\n\n/**\n * Plant entity schema\n */\nexport const PlantSchema = z\n  .object({\n    id: PlantIdSchema,\n    name: z.string().min(1).max(100),\n    code: z.string().min(1).max(20).optional(),\n    description: z.string().max(500).optional(),\n    location: z.string().max(200).optional(),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type Plant = z.infer<typeof PlantSchema>;\n\n/**\n * Course entity schema\n */\nexport const CourseSchema = z\n  .object({\n    id: CourseIdSchema,\n    plantId: PlantIdSchema,\n    name: z.string().min(1).max(200),\n    description: z.string().max(2000).optional(),\n    type: CourseTypeSchema,\n    status: CourseStatusSchema,\n    duration: z.number().int().min(1), // in minutes\n    prerequisites: z.array(CourseIdSchema).default([]),\n    learningObjectives: z.array(z.string()).default([]),\n    materials: z\n      .array(\n        z.object({\n          type: z.enum([\"video\", \"document\", \"quiz\", \"interactive\", \"other\"]),\n          url: z.string().url().optional(),\n          title: z.string(),\n          description: z.string().optional(),\n        })\n      )\n      .default([]),\n    passingScore: z.number().min(0).max(100).default(80),\n    certificateValidDays: z.number().int().min(1).optional(),\n    isRequired: z.boolean().default(false),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    createdBy: UserIdSchema,\n  })\n  .strict();\n\nexport type Course = z.infer<typeof CourseSchema>;\n\n/**\n * Enrollment entity schema\n */\nexport const EnrollmentSchema = z\n  .object({\n    id: EnrollmentIdSchema,\n    courseId: CourseIdSchema,\n    plantId: PlantIdSchema,\n    userId: UserIdSchema,\n    status: EnrollmentStatusSchema,\n    enrolledAt: z.string().datetime(),\n    startedAt: z.string().datetime().optional(),\n    completedAt: z.string().datetime().optional(),\n    expiresAt: z.string().datetime().optional(),\n    assignedBy: UserIdSchema.optional(),\n    notes: z.string().max(1000).optional(),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type Enrollment = z.infer<typeof EnrollmentSchema>;\n\n/**\n * Progress entity schema\n */\nexport const ProgressSchema = z\n  .object({\n    id: ProgressIdSchema,\n    enrollmentId: EnrollmentIdSchema,\n    courseId: CourseIdSchema,\n    plantId: PlantIdSchema,\n    userId: UserIdSchema,\n    status: ProgressStatusSchema,\n    progressPercent: z.number().min(0).max(100).default(0),\n    currentSection: z.string().optional(),\n    timeSpent: z.number().int().min(0).default(0), // in minutes\n    lastAccessedAt: z.string().datetime().optional(),\n    completedSections: z.array(z.string()).default([]),\n    quizScores: z\n      .array(\n        z.object({\n          sectionKey: z.string(),\n          score: z.number().min(0).max(100),\n          attempts: z.number().int().min(1),\n          completedAt: z.string().datetime(),\n        })\n      )\n      .default([]),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type Progress = z.infer<typeof ProgressSchema>;\n\n/**\n * Activity event entity schema\n */\nexport const ActivityEventSchema = z\n  .object({\n    id: ActivityEventIdSchema,\n    enrollmentId: EnrollmentIdSchema,\n    courseId: CourseIdSchema,\n    plantId: PlantIdSchema,\n    userId: UserIdSchema,\n    eventType: ActivityEventTypeSchema,\n    sectionKey: z.string().optional(),\n    meta: z.record(z.string(), z.unknown()).optional(),\n    occurredAt: z.string().datetime(),\n    createdAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type ActivityEvent = z.infer<typeof ActivityEventSchema>;\n\n/**\n * Question event entity schema\n */\nexport const QuestionEventSchema = z\n  .object({\n    id: QuestionEventIdSchema,\n    enrollmentId: EnrollmentIdSchema,\n    courseId: CourseIdSchema,\n    plantId: PlantIdSchema,\n    userId: UserIdSchema,\n    sectionKey: z.string(),\n    questionKey: z.string(),\n    isCorrect: z.boolean(),\n    attemptIndex: z.number().int().min(1).default(1),\n    responseMeta: z.record(z.string(), z.unknown()).optional(),\n    answeredAt: z.string().datetime(),\n    createdAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type QuestionEvent = z.infer<typeof QuestionEventSchema>;\n\n/**\n * Admin role entity schema\n */\nexport const AdminRoleSchema = z\n  .object({\n    id: AdminRoleIdSchema,\n    plantId: PlantIdSchema,\n    userId: UserIdSchema,\n    roleType: AdminRoleTypeSchema,\n    permissions: z.array(z.string()).default([]),\n    isActive: z.boolean(),\n    assignedAt: z.string().datetime(),\n    assignedBy: UserIdSchema,\n    expiresAt: z.string().datetime().optional(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type AdminRole = z.infer<typeof AdminRoleSchema>;\n\n// =============================================================================\n// SAFETY TRAINING REQUEST SCHEMAS\n// =============================================================================\n\n/**\n * Create plant request schema\n */\nexport const CreatePlantRequestSchema = z\n  .object({\n    name: z.string().min(1).max(100),\n    code: z.string().min(1).max(20).optional(),\n    description: z.string().max(500).optional(),\n    location: z.string().max(200).optional(),\n  })\n  .strict();\n\nexport type CreatePlantRequest = z.infer<typeof CreatePlantRequestSchema>;\n\n/**\n * Update plant request schema\n */\nexport const UpdatePlantRequestSchema =\n  CreatePlantRequestSchema.partial().strict();\n\nexport type UpdatePlantRequest = z.infer<typeof UpdatePlantRequestSchema>;\n\n/**\n * Create course request schema\n */\nexport const CreateCourseRequestSchema = z\n  .object({\n    plantId: PlantIdSchema,\n    name: z.string().min(1).max(200),\n    description: z.string().max(2000).optional(),\n    type: CourseTypeSchema,\n    duration: z.number().int().min(1),\n    prerequisites: z.array(CourseIdSchema).default([]),\n    learningObjectives: z.array(z.string()).default([]),\n    materials: z\n      .array(\n        z.object({\n          type: z.enum([\"video\", \"document\", \"quiz\", \"interactive\", \"other\"]),\n          url: z.string().url().optional(),\n          title: z.string(),\n          description: z.string().optional(),\n        })\n      )\n      .default([]),\n    passingScore: z.number().min(0).max(100).default(80),\n    certificateValidDays: z.number().int().min(1).optional(),\n    isRequired: z.boolean().default(false),\n  })\n  .strict();\n\nexport type CreateCourseRequest = z.infer<typeof CreateCourseRequestSchema>;\n\n/**\n * Update course request schema\n */\nexport const UpdateCourseRequestSchema =\n  CreateCourseRequestSchema.partial().strict();\n\nexport type UpdateCourseRequest = z.infer<typeof UpdateCourseRequestSchema>;\n\n/**\n * Create enrollment request schema\n */\nexport const CreateEnrollmentRequestSchema = z\n  .object({\n    courseId: CourseIdSchema,\n    plantId: PlantIdSchema,\n    userId: UserIdSchema,\n    expiresAt: z.string().datetime().optional(),\n    assignedBy: UserIdSchema.optional(),\n    notes: z.string().max(1000).optional(),\n  })\n  .strict();\n\nexport type CreateEnrollmentRequest = z.infer<\n  typeof CreateEnrollmentRequestSchema\n>;\n\n/**\n * Update enrollment request schema\n */\nexport const UpdateEnrollmentRequestSchema =\n  CreateEnrollmentRequestSchema.partial().strict();\n\nexport type UpdateEnrollmentRequest = z.infer<\n  typeof UpdateEnrollmentRequestSchema\n>;\n\n/**\n * Update progress request schema\n */\nexport const UpdateProgressRequestSchema = z\n  .object({\n    enrollmentId: EnrollmentIdSchema,\n    courseId: CourseIdSchema,\n    plantId: PlantIdSchema,\n    status: ProgressStatusSchema.optional(),\n    progressPercent: z.number().min(0).max(100).optional(),\n    currentSection: z.string().optional(),\n    timeSpent: z.number().int().min(0).optional(),\n    completedSections: z.array(z.string()).optional(),\n    quizScore: z\n      .object({\n        sectionKey: z.string(),\n        score: z.number().min(0).max(100),\n        attempts: z.number().int().min(1),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type UpdateProgressRequest = z.infer<typeof UpdateProgressRequestSchema>;\n\n/**\n * Create activity event request schema\n */\nexport const CreateActivityEventRequestSchema = z\n  .object({\n    enrollmentId: EnrollmentIdSchema,\n    courseId: CourseIdSchema,\n    plantId: PlantIdSchema,\n    eventType: ActivityEventTypeSchema,\n    sectionKey: z.string().optional(),\n    meta: z.record(z.string(), z.unknown()).optional(),\n  })\n  .strict();\n\nexport type CreateActivityEventRequest = z.infer<\n  typeof CreateActivityEventRequestSchema\n>;\n\n/**\n * Create question event request schema\n */\nexport const CreateQuestionEventRequestSchema = z\n  .object({\n    enrollmentId: EnrollmentIdSchema,\n    courseId: CourseIdSchema,\n    plantId: PlantIdSchema,\n    sectionKey: z.string(),\n    questionKey: z.string(),\n    isCorrect: z.boolean(),\n    attemptIndex: z.number().int().min(1).default(1),\n    responseMeta: z.record(z.string(), z.unknown()).optional(),\n  })\n  .strict();\n\nexport type CreateQuestionEventRequest = z.infer<\n  typeof CreateQuestionEventRequestSchema\n>;\n\n/**\n * Create admin role request schema\n */\nexport const CreateAdminRoleRequestSchema = z\n  .object({\n    plantId: PlantIdSchema,\n    userId: UserIdSchema,\n    roleType: AdminRoleTypeSchema,\n    permissions: z.array(z.string()).default([]),\n    expiresAt: z.string().datetime().optional(),\n    assignedBy: UserIdSchema,\n  })\n  .strict();\n\nexport type CreateAdminRoleRequest = z.infer<\n  typeof CreateAdminRoleRequestSchema\n>;\n\n/**\n * Update admin role request schema\n */\nexport const UpdateAdminRoleRequestSchema =\n  CreateAdminRoleRequestSchema.partial().strict();\n\nexport type UpdateAdminRoleRequest = z.infer<\n  typeof UpdateAdminRoleRequestSchema\n>;\n\n// =============================================================================\n// SAFETY TRAINING QUERY SCHEMAS\n// =============================================================================\n\n/**\n * Plant-scoped query schema\n */\nexport const PlantScopedQuerySchema = z\n  .object({\n    plantId: PlantIdSchema,\n    page: z.number().int().min(1).default(1),\n    limit: z.number().int().min(1).max(100).default(20),\n    sortBy: z.string().optional(),\n    sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  })\n  .strict();\n\nexport type PlantScopedQuery = z.infer<typeof PlantScopedQuerySchema>;\n\n/**\n * User-scoped query schema\n */\nexport const UserScopedQuerySchema = z\n  .object({\n    userId: UserIdSchema,\n    plantId: PlantIdSchema.optional(),\n    page: z.number().int().min(1).default(1),\n    limit: z.number().int().min(1).max(100).default(20),\n    sortBy: z.string().optional(),\n    sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  })\n  .strict();\n\nexport type UserScopedQuery = z.infer<typeof UserScopedQuerySchema>;\n\n/**\n * Course search query schema\n */\nexport const CourseSearchQuerySchema = z\n  .object({\n    plantId: PlantIdSchema,\n    query: z.string().min(1).max(200).optional(),\n    type: CourseTypeSchema.optional(),\n    status: CourseStatusSchema.optional(),\n    isRequired: z.boolean().optional(),\n    page: z.number().int().min(1).default(1),\n    limit: z.number().int().min(1).max(100).default(20),\n    sortBy: z.string().optional(),\n    sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  })\n  .strict();\n\nexport type CourseSearchQuery = z.infer<typeof CourseSearchQuerySchema>;\n\n/**\n * Enrollment search query schema\n */\nexport const EnrollmentSearchQuerySchema = z\n  .object({\n    plantId: PlantIdSchema,\n    userId: UserIdSchema.optional(),\n    courseId: CourseIdSchema.optional(),\n    status: EnrollmentStatusSchema.optional(),\n    query: z.string().min(1).max(200).optional(),\n    page: z.number().int().min(1).default(1),\n    limit: z.number().int().min(1).max(100).default(20),\n    sortBy: z.string().optional(),\n    sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  })\n  .strict();\n\nexport type EnrollmentSearchQuery = z.infer<typeof EnrollmentSearchQuerySchema>;\n\n/**\n * Progress search query schema\n */\nexport const ProgressSearchQuerySchema = z\n  .object({\n    plantId: PlantIdSchema,\n    userId: UserIdSchema.optional(),\n    courseId: CourseIdSchema.optional(),\n    status: ProgressStatusSchema.optional(),\n    page: z.number().int().min(1).default(1),\n    limit: z.number().int().min(1).max(100).default(20),\n    sortBy: z.string().optional(),\n    sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  })\n  .strict();\n\nexport type ProgressSearchQuery = z.infer<typeof ProgressSearchQuerySchema>;\n\n// =============================================================================\n// SAFETY TRAINING RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Plant response schema\n */\nexport const PlantResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: PlantSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type PlantResponse = z.infer<typeof PlantResponseSchema>;\n\n/**\n * Course response schema\n */\nexport const CourseResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: CourseSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type CourseResponse = z.infer<typeof CourseResponseSchema>;\n\n/**\n * Enrollment response schema\n */\nexport const EnrollmentResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: EnrollmentSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type EnrollmentResponse = z.infer<typeof EnrollmentResponseSchema>;\n\n/**\n * Progress response schema\n */\nexport const ProgressResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: ProgressSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type ProgressResponse = z.infer<typeof ProgressResponseSchema>;\n\n/**\n * Activity event response schema\n */\nexport const ActivityEventResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: ActivityEventSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type ActivityEventResponse = z.infer<typeof ActivityEventResponseSchema>;\n\n/**\n * Question event response schema\n */\nexport const QuestionEventResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: QuestionEventSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type QuestionEventResponse = z.infer<typeof QuestionEventResponseSchema>;\n\n/**\n * Admin role response schema\n */\nexport const AdminRoleResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: AdminRoleSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type AdminRoleResponse = z.infer<typeof AdminRoleResponseSchema>;\n\n// =============================================================================\n// SAFETY TRAINING PAGINATED RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Paginated response schema factory\n */\nexport const createPaginatedResponseSchema = <T extends z.ZodTypeAny>(\n  dataSchema: T\n) =>\n  z\n    .object({\n      success: z.literal(true),\n      data: z.array(dataSchema),\n      pagination: z.object({\n        page: z.number().int().min(1),\n        limit: z.number().int().min(1).max(100),\n        total: z.number().int().min(0),\n        totalPages: z.number().int().min(0),\n        hasNext: z.boolean(),\n        hasPrev: z.boolean(),\n      }),\n      version: z.literal(\"1.0\"),\n      metadata: z\n        .object({\n          timestamp: z.string().datetime(),\n          requestId: z.string().optional(),\n        })\n        .optional(),\n    })\n    .strict();\n\n/**\n * Paginated plant response schema\n */\nexport const PaginatedPlantResponseSchema =\n  createPaginatedResponseSchema(PlantSchema);\nexport type PaginatedPlantResponse = z.infer<\n  typeof PaginatedPlantResponseSchema\n>;\n\n/**\n * Paginated course response schema\n */\nexport const PaginatedCourseResponseSchema =\n  createPaginatedResponseSchema(CourseSchema);\nexport type PaginatedCourseResponse = z.infer<\n  typeof PaginatedCourseResponseSchema\n>;\n\n/**\n * Paginated enrollment response schema\n */\nexport const PaginatedEnrollmentResponseSchema =\n  createPaginatedResponseSchema(EnrollmentSchema);\nexport type PaginatedEnrollmentResponse = z.infer<\n  typeof PaginatedEnrollmentResponseSchema\n>;\n\n/**\n * Paginated progress response schema\n */\nexport const PaginatedProgressResponseSchema =\n  createPaginatedResponseSchema(ProgressSchema);\nexport type PaginatedProgressResponse = z.infer<\n  typeof PaginatedProgressResponseSchema\n>;\n\n/**\n * Paginated activity event response schema\n */\nexport const PaginatedActivityEventResponseSchema =\n  createPaginatedResponseSchema(ActivityEventSchema);\nexport type PaginatedActivityEventResponse = z.infer<\n  typeof PaginatedActivityEventResponseSchema\n>;\n\n/**\n * Paginated question event response schema\n */\nexport const PaginatedQuestionEventResponseSchema =\n  createPaginatedResponseSchema(QuestionEventSchema);\nexport type PaginatedQuestionEventResponse = z.infer<\n  typeof PaginatedQuestionEventResponseSchema\n>;\n\n/**\n * Paginated admin role response schema\n */\nexport const PaginatedAdminRoleResponseSchema =\n  createPaginatedResponseSchema(AdminRoleSchema);\nexport type PaginatedAdminRoleResponse = z.infer<\n  typeof PaginatedAdminRoleResponseSchema\n>;\n\n// =============================================================================\n// SAFETY TRAINING ERROR RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Safety training error codes\n */\nexport const SafetyTrainingErrorCodeSchema = z.enum([\n  \"PLANT_NOT_FOUND\",\n  \"PLANT_ACCESS_DENIED\",\n  \"COURSE_NOT_FOUND\",\n  \"COURSE_ACCESS_DENIED\",\n  \"ENROLLMENT_NOT_FOUND\",\n  \"ENROLLMENT_ALREADY_EXISTS\",\n  \"ENROLLMENT_EXPIRED\",\n  \"PROGRESS_NOT_FOUND\",\n  \"PROGRESS_ACCESS_DENIED\",\n  \"ACTIVITY_EVENT_NOT_FOUND\",\n  \"QUESTION_EVENT_NOT_FOUND\",\n  \"ADMIN_ROLE_NOT_FOUND\",\n  \"ADMIN_ROLE_ACCESS_DENIED\",\n  \"USER_NOT_AUTHORIZED\",\n  \"PLANT_MISMATCH\",\n  \"INVALID_PROGRESS_UPDATE\",\n  \"COURSE_COMPLETION_FAILED\",\n  \"CERTIFICATE_GENERATION_FAILED\",\n  \"VALIDATION_ERROR\",\n  \"BUSINESS_ERROR\",\n  \"SYSTEM_ERROR\",\n]);\n\nexport type SafetyTrainingErrorCode = z.infer<\n  typeof SafetyTrainingErrorCodeSchema\n>;\n\n/**\n * Safety training error response schema\n */\nexport const SafetyTrainingErrorResponseSchema = z\n  .object({\n    success: z.literal(false),\n    error: z.object({\n      code: SafetyTrainingErrorCodeSchema,\n      message: z.string().min(1),\n      details: z\n        .array(\n          z.object({\n            field: z.string().optional(),\n            message: z.string(),\n            code: z.string().optional(),\n          })\n        )\n        .optional(),\n      requestId: z.string().optional(),\n      timestamp: z.string().datetime(),\n      path: z.string().optional(),\n      method: z.string().optional(),\n      plantId: PlantIdSchema.optional(),\n      userId: UserIdSchema.optional(),\n    }),\n    version: z.literal(\"1.0\"),\n  })\n  .strict();\n\nexport type SafetyTrainingErrorResponse = z.infer<\n  typeof SafetyTrainingErrorResponseSchema\n>;\n\n// =============================================================================\n// SAFETY TRAINING INTEGRATION SCHEMAS\n// =============================================================================\n\n/**\n * Combined auth + safety training user context schema\n */\nexport const SafetyTrainingUserContextSchema = z\n  .object({\n    user: z.object({\n      id: UserIdSchema,\n      authUserId: z.string().uuid(),\n      email: z.string().email(),\n      firstName: z.string(),\n      lastName: z.string(),\n      role: z.string(),\n      territoryId: z.string().uuid().optional(),\n    }),\n    plantAccess: z.array(\n      z.object({\n        plantId: PlantIdSchema,\n        plantName: z.string(),\n        permissions: z.array(z.string()),\n        adminRoles: z.array(AdminRoleTypeSchema),\n      })\n    ),\n    session: z.object({\n      accessToken: z.string(),\n      refreshToken: z.string(),\n      expiresAt: z.string().datetime(),\n    }),\n  })\n  .strict();\n\nexport type SafetyTrainingUserContext = z.infer<\n  typeof SafetyTrainingUserContextSchema\n>;\n\n/**\n * Plant-scoped user permissions schema\n */\nexport const PlantUserPermissionsSchema = z\n  .object({\n    userId: UserIdSchema,\n    plantId: PlantIdSchema,\n    canViewCourses: z.boolean(),\n    canCreateCourses: z.boolean(),\n    canEditCourses: z.boolean(),\n    canDeleteCourses: z.boolean(),\n    canViewEnrollments: z.boolean(),\n    canCreateEnrollments: z.boolean(),\n    canEditEnrollments: z.boolean(),\n    canViewProgress: z.boolean(),\n    canEditProgress: z.boolean(),\n    canViewReports: z.boolean(),\n    canManageUsers: z.boolean(),\n    adminRoles: z.array(AdminRoleTypeSchema),\n  })\n  .strict();\n\nexport type PlantUserPermissions = z.infer<typeof PlantUserPermissionsSchema>;\n\n// =============================================================================\n// SAFETY TRAINING BULK OPERATION SCHEMAS\n// =============================================================================\n\n/**\n * Bulk enrollment creation request schema\n */\nexport const BulkEnrollmentRequestSchema = z\n  .object({\n    plantId: PlantIdSchema,\n    courseId: CourseIdSchema,\n    userIds: z.array(UserIdSchema).min(1).max(100),\n    expiresAt: z.string().datetime().optional(),\n    assignedBy: UserIdSchema.optional(),\n    notes: z.string().max(1000).optional(),\n  })\n  .strict();\n\nexport type BulkEnrollmentRequest = z.infer<typeof BulkEnrollmentRequestSchema>;\n\n/**\n * Bulk enrollment response schema\n */\nexport const BulkEnrollmentResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: z.object({\n      created: z.array(EnrollmentSchema),\n      failed: z.array(\n        z.object({\n          userId: UserIdSchema,\n          error: z.string(),\n        })\n      ),\n      total: z.number().int(),\n      successCount: z.number().int(),\n      failureCount: z.number().int(),\n    }),\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type BulkEnrollmentResponse = z.infer<\n  typeof BulkEnrollmentResponseSchema\n>;\n\n// =============================================================================\n// SAFETY TRAINING FILE UPLOAD SCHEMAS\n// =============================================================================\n\n/**\n * Course material upload request schema\n */\nexport const CourseMaterialUploadRequestSchema = z\n  .object({\n    courseId: CourseIdSchema,\n    plantId: PlantIdSchema,\n    materialType: z.enum([\"video\", \"document\", \"interactive\", \"other\"]),\n    title: z.string().min(1).max(200),\n    description: z.string().max(1000).optional(),\n    file: z.instanceof(File).optional(),\n    url: z.string().url().optional(),\n  })\n  .strict();\n\nexport type CourseMaterialUploadRequest = z.infer<\n  typeof CourseMaterialUploadRequestSchema\n>;\n\n/**\n * Course material upload response schema\n */\nexport const CourseMaterialUploadResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: z.object({\n      materialId: z.string().uuid(),\n      courseId: CourseIdSchema,\n      materialType: z.string(),\n      title: z.string(),\n      url: z.string().url().optional(),\n      fileSize: z.number().int().optional(),\n      uploadedAt: z.string().datetime(),\n    }),\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type CourseMaterialUploadResponse = z.infer<\n  typeof CourseMaterialUploadResponseSchema\n>;\n","// =============================================================================\n// SAFETY TRAINING API ENDPOINT SPECIFICATIONS\n// =============================================================================\n\n/**\n * Comprehensive Safety Training API endpoint specifications with plant-scoped access,\n * role-based permissions, and integration with existing auth endpoints.\n */\n\nimport { z } from \"zod\";\nimport {\n  PlantIdSchema,\n  CourseIdSchema,\n  EnrollmentIdSchema,\n  ProgressIdSchema,\n  AdminRoleIdSchema,\n  UserIdSchema,\n  CreatePlantRequestSchema,\n  UpdatePlantRequestSchema,\n  CreateCourseRequestSchema,\n  UpdateCourseRequestSchema,\n  CreateEnrollmentRequestSchema,\n  UpdateEnrollmentRequestSchema,\n  UpdateProgressRequestSchema,\n  CreateActivityEventRequestSchema,\n  CreateQuestionEventRequestSchema,\n  CreateAdminRoleRequestSchema,\n  UpdateAdminRoleRequestSchema,\n  PlantScopedQuerySchema,\n  UserScopedQuerySchema,\n  CourseSearchQuerySchema,\n  EnrollmentSearchQuerySchema,\n  ProgressSearchQuerySchema,\n  BulkEnrollmentRequestSchema,\n  CourseMaterialUploadRequestSchema,\n  PlantResponseSchema,\n  CourseResponseSchema,\n  EnrollmentResponseSchema,\n  ProgressResponseSchema,\n  ActivityEventResponseSchema,\n  QuestionEventResponseSchema,\n  AdminRoleResponseSchema,\n  PaginatedPlantResponseSchema,\n  PaginatedCourseResponseSchema,\n  PaginatedEnrollmentResponseSchema,\n  PaginatedProgressResponseSchema,\n  PaginatedActivityEventResponseSchema,\n  PaginatedQuestionEventResponseSchema,\n  PaginatedAdminRoleResponseSchema,\n  BulkEnrollmentResponseSchema,\n  CourseMaterialUploadResponseSchema,\n  SafetyTrainingErrorResponseSchema,\n  SafetyTrainingUserContextSchema,\n  PlantUserPermissionsSchema,\n} from \"./safety-training-contracts\";\n\n// =============================================================================\n// API ENDPOINT DEFINITIONS\n// =============================================================================\n\n/**\n * Safety Training API endpoint specifications\n * All endpoints are prefixed with /api/safety-training to avoid conflicts with auth routes\n */\n\nexport const SafetyTrainingApiEndpoints = {\n  // =============================================================================\n  // PLANT MANAGEMENT ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/safety-training/plants\n   * List all plants accessible to the user\n   */\n  LIST_PLANTS: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants\",\n    query: z.object({\n      page: z.number().int().min(1).default(1),\n      limit: z.number().int().min(1).max(100).default(20),\n      sortBy: z.string().optional(),\n      sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n      search: z.string().optional(),\n    }),\n    response: PaginatedPlantResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"plants:read\"],\n  },\n\n  /**\n   * GET /api/safety-training/plants/:plantId\n   * Get specific plant details\n   */\n  GET_PLANT: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    response: PlantResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"plants:read\"],\n  },\n\n  /**\n   * POST /api/safety-training/plants\n   * Create a new plant\n   */\n  CREATE_PLANT: {\n    method: \"POST\",\n    path: \"/api/safety-training/plants\",\n    body: CreatePlantRequestSchema,\n    response: PlantResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"plants:create\"],\n  },\n\n  /**\n   * PUT /api/safety-training/plants/:plantId\n   * Update plant details\n   */\n  UPDATE_PLANT: {\n    method: \"PUT\",\n    path: \"/api/safety-training/plants/:plantId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    body: UpdatePlantRequestSchema,\n    response: PlantResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"plants:update\"],\n  },\n\n  /**\n   * DELETE /api/safety-training/plants/:plantId\n   * Delete a plant (soft delete)\n   */\n  DELETE_PLANT: {\n    method: \"DELETE\",\n    path: \"/api/safety-training/plants/:plantId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    response: z.object({\n      success: z.literal(true),\n      message: z.string(),\n      version: z.literal(\"1.0\"),\n    }),\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"plants:delete\"],\n  },\n\n  // =============================================================================\n  // COURSE MANAGEMENT ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/safety-training/plants/:plantId/courses\n   * List courses for a specific plant\n   */\n  LIST_COURSES: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/courses\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    query: CourseSearchQuerySchema.omit({ plantId: true }),\n    response: PaginatedCourseResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  /**\n   * GET /api/safety-training/plants/:plantId/courses/:courseId\n   * Get specific course details\n   */\n  GET_COURSE: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/courses/:courseId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      courseId: CourseIdSchema,\n    }),\n    response: CourseResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  /**\n   * POST /api/safety-training/plants/:plantId/courses\n   * Create a new course\n   */\n  CREATE_COURSE: {\n    method: \"POST\",\n    path: \"/api/safety-training/plants/:plantId/courses\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    body: CreateCourseRequestSchema,\n    response: CourseResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:create\"],\n  },\n\n  /**\n   * PUT /api/safety-training/plants/:plantId/courses/:courseId\n   * Update course details\n   */\n  UPDATE_COURSE: {\n    method: \"PUT\",\n    path: \"/api/safety-training/plants/:plantId/courses/:courseId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      courseId: CourseIdSchema,\n    }),\n    body: UpdateCourseRequestSchema,\n    response: CourseResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:update\"],\n  },\n\n  /**\n   * DELETE /api/safety-training/plants/:plantId/courses/:courseId\n   * Delete a course (soft delete)\n   */\n  DELETE_COURSE: {\n    method: \"DELETE\",\n    path: \"/api/safety-training/plants/:plantId/courses/:courseId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      courseId: CourseIdSchema,\n    }),\n    response: z.object({\n      success: z.literal(true),\n      message: z.string(),\n      version: z.literal(\"1.0\"),\n    }),\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:delete\"],\n  },\n\n  // =============================================================================\n  // ENROLLMENT MANAGEMENT ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/safety-training/plants/:plantId/enrollments\n   * List enrollments for a specific plant\n   */\n  LIST_ENROLLMENTS: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/enrollments\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    query: EnrollmentSearchQuerySchema.omit({ plantId: true }),\n    response: PaginatedEnrollmentResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"enrollments:read\"],\n  },\n\n  /**\n   * GET /api/safety-training/plants/:plantId/enrollments/:enrollmentId\n   * Get specific enrollment details\n   */\n  GET_ENROLLMENT: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/enrollments/:enrollmentId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      enrollmentId: EnrollmentIdSchema,\n    }),\n    response: EnrollmentResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"enrollments:read\"],\n  },\n\n  /**\n   * POST /api/safety-training/plants/:plantId/enrollments\n   * Create a new enrollment\n   */\n  CREATE_ENROLLMENT: {\n    method: \"POST\",\n    path: \"/api/safety-training/plants/:plantId/enrollments\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    body: CreateEnrollmentRequestSchema,\n    response: EnrollmentResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"enrollments:create\"],\n  },\n\n  /**\n   * POST /api/safety-training/plants/:plantId/enrollments/bulk\n   * Create multiple enrollments\n   */\n  CREATE_BULK_ENROLLMENTS: {\n    method: \"POST\",\n    path: \"/api/safety-training/plants/:plantId/enrollments/bulk\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    body: BulkEnrollmentRequestSchema,\n    response: BulkEnrollmentResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"enrollments:create\"],\n  },\n\n  /**\n   * PUT /api/safety-training/plants/:plantId/enrollments/:enrollmentId\n   * Update enrollment details\n   */\n  UPDATE_ENROLLMENT: {\n    method: \"PUT\",\n    path: \"/api/safety-training/plants/:plantId/enrollments/:enrollmentId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      enrollmentId: EnrollmentIdSchema,\n    }),\n    body: UpdateEnrollmentRequestSchema,\n    response: EnrollmentResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"enrollments:update\"],\n  },\n\n  /**\n   * DELETE /api/safety-training/plants/:plantId/enrollments/:enrollmentId\n   * Cancel an enrollment\n   */\n  DELETE_ENROLLMENT: {\n    method: \"DELETE\",\n    path: \"/api/safety-training/plants/:plantId/enrollments/:enrollmentId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      enrollmentId: EnrollmentIdSchema,\n    }),\n    response: z.object({\n      success: z.literal(true),\n      message: z.string(),\n      version: z.literal(\"1.0\"),\n    }),\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"enrollments:delete\"],\n  },\n\n  // =============================================================================\n  // PROGRESS TRACKING ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/safety-training/plants/:plantId/progress\n   * List progress records for a specific plant\n   */\n  LIST_PROGRESS: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/progress\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    query: ProgressSearchQuerySchema.omit({ plantId: true }),\n    response: PaginatedProgressResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"progress:read\"],\n  },\n\n  /**\n   * GET /api/safety-training/plants/:plantId/progress/:progressId\n   * Get specific progress details\n   */\n  GET_PROGRESS: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/progress/:progressId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      progressId: ProgressIdSchema,\n    }),\n    response: ProgressResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"progress:read\"],\n  },\n\n  /**\n   * PUT /api/safety-training/plants/:plantId/progress/:progressId\n   * Update progress details\n   */\n  UPDATE_PROGRESS: {\n    method: \"PUT\",\n    path: \"/api/safety-training/plants/:plantId/progress/:progressId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      progressId: ProgressIdSchema,\n    }),\n    body: UpdateProgressRequestSchema,\n    response: ProgressResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"progress:update\"],\n  },\n\n  // =============================================================================\n  // ACTIVITY TRACKING ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/safety-training/plants/:plantId/activity-events\n   * List activity events for a specific plant\n   */\n  LIST_ACTIVITY_EVENTS: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/activity-events\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    query: PlantScopedQuerySchema.omit({ plantId: true }).extend({\n      userId: UserIdSchema.optional(),\n      courseId: CourseIdSchema.optional(),\n      eventType: z.string().optional(),\n      dateFrom: z.string().datetime().optional(),\n      dateTo: z.string().datetime().optional(),\n    }),\n    response: PaginatedActivityEventResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"activity:read\"],\n  },\n\n  /**\n   * POST /api/safety-training/plants/:plantId/activity-events\n   * Create a new activity event\n   */\n  CREATE_ACTIVITY_EVENT: {\n    method: \"POST\",\n    path: \"/api/safety-training/plants/:plantId/activity-events\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    body: CreateActivityEventRequestSchema,\n    response: ActivityEventResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"activity:create\"],\n  },\n\n  /**\n   * GET /api/safety-training/plants/:plantId/question-events\n   * List question events for a specific plant\n   */\n  LIST_QUESTION_EVENTS: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/question-events\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    query: PlantScopedQuerySchema.omit({ plantId: true }).extend({\n      userId: UserIdSchema.optional(),\n      courseId: CourseIdSchema.optional(),\n      sectionKey: z.string().optional(),\n      questionKey: z.string().optional(),\n      isCorrect: z.boolean().optional(),\n      dateFrom: z.string().datetime().optional(),\n      dateTo: z.string().datetime().optional(),\n    }),\n    response: PaginatedQuestionEventResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"activity:read\"],\n  },\n\n  /**\n   * POST /api/safety-training/plants/:plantId/question-events\n   * Create a new question event\n   */\n  CREATE_QUESTION_EVENT: {\n    method: \"POST\",\n    path: \"/api/safety-training/plants/:plantId/question-events\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    body: CreateQuestionEventRequestSchema,\n    response: QuestionEventResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"activity:create\"],\n  },\n\n  // =============================================================================\n  // ADMIN ROLE MANAGEMENT ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/safety-training/plants/:plantId/admin-roles\n   * List admin roles for a specific plant\n   */\n  LIST_ADMIN_ROLES: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/admin-roles\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    query: PlantScopedQuerySchema.omit({ plantId: true }).extend({\n      userId: UserIdSchema.optional(),\n      roleType: z.string().optional(),\n    }),\n    response: PaginatedAdminRoleResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"admin_roles:read\"],\n  },\n\n  /**\n   * GET /api/safety-training/plants/:plantId/admin-roles/:adminRoleId\n   * Get specific admin role details\n   */\n  GET_ADMIN_ROLE: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/admin-roles/:adminRoleId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      adminRoleId: AdminRoleIdSchema,\n    }),\n    response: AdminRoleResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"admin_roles:read\"],\n  },\n\n  /**\n   * POST /api/safety-training/plants/:plantId/admin-roles\n   * Create a new admin role\n   */\n  CREATE_ADMIN_ROLE: {\n    method: \"POST\",\n    path: \"/api/safety-training/plants/:plantId/admin-roles\",\n    params: z.object({\n      plantId: PlantIdSchema,\n    }),\n    body: CreateAdminRoleRequestSchema,\n    response: AdminRoleResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"admin_roles:create\"],\n  },\n\n  /**\n   * PUT /api/safety-training/plants/:plantId/admin-roles/:adminRoleId\n   * Update admin role details\n   */\n  UPDATE_ADMIN_ROLE: {\n    method: \"PUT\",\n    path: \"/api/safety-training/plants/:plantId/admin-roles/:adminRoleId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      adminRoleId: AdminRoleIdSchema,\n    }),\n    body: UpdateAdminRoleRequestSchema,\n    response: AdminRoleResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"admin_roles:update\"],\n  },\n\n  /**\n   * DELETE /api/safety-training/plants/:plantId/admin-roles/:adminRoleId\n   * Remove an admin role\n   */\n  DELETE_ADMIN_ROLE: {\n    method: \"DELETE\",\n    path: \"/api/safety-training/plants/:plantId/admin-roles/:adminRoleId\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      adminRoleId: AdminRoleIdSchema,\n    }),\n    response: z.object({\n      success: z.literal(true),\n      message: z.string(),\n      version: z.literal(\"1.0\"),\n    }),\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"admin_roles:delete\"],\n  },\n\n  // =============================================================================\n  // USER-SPECIFIC ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/safety-training/users/:userId/enrollments\n   * List enrollments for a specific user\n   */\n  LIST_USER_ENROLLMENTS: {\n    method: \"GET\",\n    path: \"/api/safety-training/users/:userId/enrollments\",\n    params: z.object({\n      userId: UserIdSchema,\n    }),\n    query: UserScopedQuerySchema.omit({ userId: true }),\n    response: PaginatedEnrollmentResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"enrollments:read\"],\n  },\n\n  /**\n   * GET /api/safety-training/users/:userId/progress\n   * List progress records for a specific user\n   */\n  LIST_USER_PROGRESS: {\n    method: \"GET\",\n    path: \"/api/safety-training/users/:userId/progress\",\n    params: z.object({\n      userId: UserIdSchema,\n    }),\n    query: UserScopedQuerySchema.omit({ userId: true }),\n    response: PaginatedProgressResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"progress:read\"],\n  },\n\n  /**\n   * GET /api/safety-training/users/:userId/activity-events\n   * List activity events for a specific user\n   */\n  LIST_USER_ACTIVITY_EVENTS: {\n    method: \"GET\",\n    path: \"/api/safety-training/users/:userId/activity-events\",\n    params: z.object({\n      userId: UserIdSchema,\n    }),\n    query: UserScopedQuerySchema.omit({ userId: true }),\n    response: PaginatedActivityEventResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"activity:read\"],\n  },\n\n  // =============================================================================\n  // INTEGRATION ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/safety-training/auth/context\n   * Get combined auth + safety training user context\n   */\n  GET_AUTH_CONTEXT: {\n    method: \"GET\",\n    path: \"/api/safety-training/auth/context\",\n    response: SafetyTrainingUserContextSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [],\n  },\n\n  /**\n   * GET /api/safety-training/plants/:plantId/users/:userId/permissions\n   * Get user permissions for a specific plant\n   */\n  GET_USER_PERMISSIONS: {\n    method: \"GET\",\n    path: \"/api/safety-training/plants/:plantId/users/:userId/permissions\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      userId: UserIdSchema,\n    }),\n    response: z.object({\n      success: z.literal(true),\n      data: PlantUserPermissionsSchema,\n      version: z.literal(\"1.0\"),\n    }),\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"users:read\"],\n  },\n\n  // =============================================================================\n  // FILE UPLOAD ENDPOINTS\n  // =============================================================================\n\n  /**\n   * POST /api/safety-training/plants/:plantId/courses/:courseId/materials\n   * Upload course material\n   */\n  UPLOAD_COURSE_MATERIAL: {\n    method: \"POST\",\n    path: \"/api/safety-training/plants/:plantId/courses/:courseId/materials\",\n    params: z.object({\n      plantId: PlantIdSchema,\n      courseId: CourseIdSchema,\n    }),\n    body: CourseMaterialUploadRequestSchema,\n    response: CourseMaterialUploadResponseSchema,\n    error: SafetyTrainingErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:update\"],\n  },\n} as const;\n\n// =============================================================================\n// API ENDPOINT UTILITIES\n// =============================================================================\n\n/**\n * Extract endpoint method from endpoint definition\n */\nexport type EndpointMethod<T extends keyof typeof SafetyTrainingApiEndpoints> =\n  (typeof SafetyTrainingApiEndpoints)[T][\"method\"];\n\n/**\n * Extract endpoint path from endpoint definition\n */\nexport type EndpointPath<T extends keyof typeof SafetyTrainingApiEndpoints> =\n  (typeof SafetyTrainingApiEndpoints)[T][\"path\"];\n\n/**\n * Extract endpoint params from endpoint definition\n */\nexport type EndpointParams<T extends keyof typeof SafetyTrainingApiEndpoints> =\n  \"params\" extends keyof (typeof SafetyTrainingApiEndpoints)[T]\n    ? z.infer<(typeof SafetyTrainingApiEndpoints)[T][\"params\"]>\n    : never;\n\n/**\n * Extract endpoint query from endpoint definition\n */\nexport type EndpointQuery<T extends keyof typeof SafetyTrainingApiEndpoints> =\n  \"query\" extends keyof (typeof SafetyTrainingApiEndpoints)[T]\n    ? z.infer<(typeof SafetyTrainingApiEndpoints)[T][\"query\"]>\n    : never;\n\n/**\n * Extract endpoint body from endpoint definition\n */\nexport type EndpointBody<T extends keyof typeof SafetyTrainingApiEndpoints> =\n  \"body\" extends keyof (typeof SafetyTrainingApiEndpoints)[T]\n    ? z.infer<(typeof SafetyTrainingApiEndpoints)[T][\"body\"]>\n    : never;\n\n/**\n * Extract endpoint response from endpoint definition\n */\nexport type EndpointResponse<\n  T extends keyof typeof SafetyTrainingApiEndpoints,\n> = z.infer<(typeof SafetyTrainingApiEndpoints)[T][\"response\"]>;\n\n/**\n * Extract endpoint error from endpoint definition\n */\nexport type EndpointError<T extends keyof typeof SafetyTrainingApiEndpoints> =\n  z.infer<(typeof SafetyTrainingApiEndpoints)[T][\"error\"]>;\n\n/**\n * Get all endpoint names\n */\nexport type SafetyTrainingEndpointNames =\n  keyof typeof SafetyTrainingApiEndpoints;\n\n/**\n * Get endpoints by method\n */\nexport type EndpointsByMethod<M extends string> = {\n  [K in SafetyTrainingEndpointNames]: (typeof SafetyTrainingApiEndpoints)[K][\"method\"] extends M\n    ? K\n    : never;\n}[SafetyTrainingEndpointNames];\n\n/**\n * Get all GET endpoints\n */\nexport type GetEndpoints = EndpointsByMethod<\"GET\">;\n\n/**\n * Get all POST endpoints\n */\nexport type PostEndpoints = EndpointsByMethod<\"POST\">;\n\n/**\n * Get all PUT endpoints\n */\nexport type PutEndpoints = EndpointsByMethod<\"PUT\">;\n\n/**\n * Get all DELETE endpoints\n */\nexport type DeleteEndpoints = EndpointsByMethod<\"DELETE\">;\n","// =============================================================================\n// SAFETY TRAINING OPENAPI SPECIFICATIONS (MINIMAL VERSION)\n// =============================================================================\n\n/**\n * Minimal OpenAPI specifications for Safety Training API endpoints\n * This is a simplified version that compiles without type issues\n */\n\nimport { z } from \"zod\";\n\n// =============================================================================\n// BASIC OPENAPI SCHEMA GENERATORS\n// =============================================================================\n\n/**\n * OpenAPI schema definition\n */\nexport interface OpenApiSchema {\n  type: string;\n  description?: string;\n  properties?: Record<string, OpenApiSchema>;\n  items?: OpenApiSchema;\n  required?: string[];\n}\n\n/**\n * Convert Zod schema to basic OpenAPI schema\n */\nexport const zodToOpenApi = (schema: z.ZodTypeAny): OpenApiSchema => {\n  // Simple fallback implementation - schema parameter is used for future implementation\n  return {\n    type: \"string\",\n    description: `Schema type: ${(schema._def as any).typeName || \"unknown\"}`,\n  };\n};\n\n/**\n * OpenAPI specification structure\n */\nexport interface OpenApiSpec {\n  openapi: string;\n  info: {\n    title: string;\n    version: string;\n    description: string;\n  };\n  servers: Array<{\n    url: string;\n    description: string;\n  }>;\n  paths: Record<string, Record<string, unknown>>;\n  components: {\n    securitySchemes: Record<string, unknown>;\n  };\n  security: Array<Record<string, unknown[]>>;\n}\n\n/**\n * Generate OpenAPI specification for Safety Training API\n */\nexport const generateSafetyTrainingOpenApi = (): OpenApiSpec => {\n  return {\n    openapi: \"3.0.0\",\n    info: {\n      title: \"Safety Training API\",\n      version: \"1.0.0\",\n      description:\n        \"API for Safety Training management with plant-scoped access control\",\n    },\n    servers: [\n      {\n        url: \"/api/safety-training\",\n        description: \"Safety Training API endpoints\",\n      },\n    ],\n    paths: {\n      \"/plants\": {\n        get: {\n          summary: \"List plants\",\n          description: \"Get list of plants accessible to the user\",\n          responses: {\n            \"200\": {\n              description: \"Successful response\",\n              content: {\n                \"application/json\": {\n                  schema: {\n                    type: \"object\",\n                    properties: {\n                      success: { type: \"boolean\" },\n                      data: {\n                        type: \"array\",\n                        items: {\n                          type: \"object\",\n                          properties: {\n                            id: { type: \"string\" },\n                            name: { type: \"string\" },\n                            isActive: { type: \"boolean\" },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    components: {\n      securitySchemes: {\n        bearerAuth: {\n          type: \"http\",\n          scheme: \"bearer\",\n          bearerFormat: \"JWT\",\n        },\n      },\n    },\n    security: [\n      {\n        bearerAuth: [],\n      },\n    ],\n  };\n};\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport { generateSafetyTrainingOpenApi as default };\n","// =============================================================================\n// SAFETY TRAINING API VALIDATION MIDDLEWARE\n// =============================================================================\n\n/**\n * Comprehensive validation middleware for Safety Training API contracts\n * with plant-scoped access control and role-based permissions.\n */\n\nimport { z } from \"zod\";\n\n// Generic request/response interfaces to replace Next.js specific types\ninterface GenericRequest {\n  url: string;\n  method: string;\n  headers: Record<string, string>;\n  json(): Promise<unknown>;\n  nextUrl: {\n    pathname: string;\n    searchParams: URLSearchParams;\n  };\n}\n\ninterface GenericResponse {\n  json(data: unknown, options?: { status?: number }): Response;\n}\nimport {\n  SafetyTrainingApiEndpoints,\n  SafetyTrainingEndpointNames,\n  EndpointParams,\n  EndpointQuery,\n  EndpointBody,\n  EndpointResponse,\n} from \"./safety-training-endpoints\";\nimport {\n  SafetyTrainingErrorResponseSchema,\n  SafetyTrainingErrorCode,\n} from \"./safety-training-contracts\";\n\n// =============================================================================\n// VALIDATION MIDDLEWARE TYPES\n// =============================================================================\n\n/**\n * Validation context for Safety Training API\n */\nexport interface SafetyTrainingValidationContext {\n  userId: string;\n  plantId?: string;\n  permissions: string[];\n  adminRoles: string[];\n  requestId: string;\n  timestamp: string;\n}\n\n/**\n * Validation result for API requests\n */\nexport interface ValidationResult<T = unknown> {\n  success: boolean;\n  data?: T;\n  errors: ValidationError[];\n  context: SafetyTrainingValidationContext;\n}\n\n/**\n * Validation error details\n */\nexport interface ValidationError {\n  field: string;\n  message: string;\n  code: string;\n  value?: unknown;\n}\n\n/**\n * Middleware configuration\n */\nexport interface SafetyTrainingMiddlewareConfig {\n  enableLogging?: boolean;\n  enableMetrics?: boolean;\n  strictMode?: boolean;\n  customValidators?: Record<string, (value: unknown) => boolean>;\n}\n\n// =============================================================================\n// VALIDATION MIDDLEWARE CLASS\n// =============================================================================\n\n/**\n * Safety Training API validation middleware\n */\nexport class SafetyTrainingValidationMiddleware {\n  private config: SafetyTrainingMiddlewareConfig;\n\n  constructor(config: SafetyTrainingMiddlewareConfig = {}) {\n    this.config = {\n      enableLogging: true,\n      enableMetrics: false,\n      strictMode: true,\n      customValidators: {},\n      ...config,\n    };\n  }\n\n  /**\n   * Validate API request parameters\n   */\n  async validateRequest<T extends SafetyTrainingEndpointNames>(\n    endpoint: T,\n    request: GenericRequest,\n    context: Partial<SafetyTrainingValidationContext>\n  ): Promise<\n    ValidationResult<{\n      params: EndpointParams<T>;\n      query: EndpointQuery<T>;\n      body: EndpointBody<T>;\n    }>\n  > {\n    const requestId = this.generateRequestId();\n    const timestamp = new Date().toISOString();\n\n    const validationContext: SafetyTrainingValidationContext = {\n      userId: context.userId || \"\",\n      plantId: context.plantId,\n      permissions: context.permissions || [],\n      adminRoles: context.adminRoles || [],\n      requestId,\n      timestamp,\n    };\n\n    const errors: ValidationError[] = [];\n\n    try {\n      // Validate endpoint exists\n      const endpointConfig = SafetyTrainingApiEndpoints[endpoint];\n      if (!endpointConfig) {\n        errors.push({\n          field: \"endpoint\",\n          message: `Unknown endpoint: ${endpoint}`,\n          code: \"UNKNOWN_ENDPOINT\",\n        });\n        return { success: false, errors, context: validationContext };\n      }\n\n      // Extract and validate path parameters\n      const params = this.extractPathParams(request, endpointConfig);\n      if (\"params\" in endpointConfig && endpointConfig.params) {\n        const paramResult = this.validateSchema(\n          params,\n          endpointConfig.params as z.ZodType<unknown>\n        );\n        if (!paramResult.success) {\n          errors.push(...paramResult.errors);\n        }\n      }\n\n      // Extract and validate query parameters\n      const query = this.extractQueryParams(request);\n      if (\"query\" in endpointConfig && endpointConfig.query) {\n        const queryResult = this.validateSchema(\n          query,\n          endpointConfig.query as z.ZodType<unknown>\n        );\n        if (!queryResult.success) {\n          errors.push(...queryResult.errors);\n        }\n      }\n\n      // Extract and validate request body\n      let body: unknown;\n      if (\n        \"body\" in endpointConfig &&\n        endpointConfig.body &&\n        [\"POST\", \"PUT\", \"PATCH\"].includes(endpointConfig.method)\n      ) {\n        try {\n          body = await request.json();\n        } catch (error) {\n          // Log the actual error for debugging but don't expose it to client\n          console.error(\"JSON parsing error:\", error);\n          errors.push({\n            field: \"body\",\n            message: \"Invalid JSON in request body\",\n            code: \"INVALID_JSON\",\n          });\n        }\n\n        if (body !== undefined) {\n          const bodyResult = this.validateSchema(\n            body,\n            endpointConfig.body as z.ZodType<unknown>\n          );\n          if (!bodyResult.success) {\n            errors.push(...bodyResult.errors);\n          }\n        }\n      }\n\n      // Validate plant access\n      if (\n        \"params\" in endpointConfig &&\n        endpointConfig.params &&\n        \"plantId\" in endpointConfig.params.shape &&\n        validationContext.plantId\n      ) {\n        const plantAccessResult = this.validatePlantAccess(\n          validationContext,\n          validationContext.plantId\n        );\n        if (!plantAccessResult.success) {\n          errors.push(...plantAccessResult.errors);\n        }\n      }\n\n      // Validate permissions\n      const permissionResult = this.validatePermissions(validationContext, [\n        ...(endpointConfig.permissions || []),\n      ]);\n      if (!permissionResult.success) {\n        errors.push(...permissionResult.errors);\n      }\n\n      if (errors.length > 0) {\n        return { success: false, errors, context: validationContext };\n      }\n\n      return {\n        success: true,\n        data: {\n          params: params as EndpointParams<T>,\n          query: query as EndpointQuery<T>,\n          body: body as EndpointBody<T>,\n        },\n        errors: [],\n        context: validationContext,\n      };\n    } catch (error) {\n      this.logError(\"Validation error\", error, validationContext);\n\n      errors.push({\n        field: \"validation\",\n        message: \"Internal validation error\",\n        code: \"INTERNAL_ERROR\",\n      });\n\n      return { success: false, errors, context: validationContext };\n    }\n  }\n\n  /**\n   * Validate API response\n   */\n  validateResponse<T extends SafetyTrainingEndpointNames>(\n    endpoint: T,\n    response: unknown,\n    context: SafetyTrainingValidationContext\n  ): ValidationResult<EndpointResponse<T>> {\n    const errors: ValidationError[] = [];\n\n    try {\n      const endpointConfig = SafetyTrainingApiEndpoints[endpoint];\n      if (!endpointConfig) {\n        errors.push({\n          field: \"endpoint\",\n          message: `Unknown endpoint: ${endpoint}`,\n          code: \"UNKNOWN_ENDPOINT\",\n        });\n        return { success: false, errors, context };\n      }\n\n      const responseResult = this.validateSchema(\n        response,\n        endpointConfig.response as z.ZodType<unknown>\n      );\n      if (!responseResult.success) {\n        errors.push(...responseResult.errors);\n      }\n\n      if (errors.length > 0) {\n        return { success: false, errors, context };\n      }\n\n      return {\n        success: true,\n        data: response as EndpointResponse<T>,\n        errors: [],\n        context,\n      };\n    } catch (error) {\n      this.logError(\"Response validation error\", error, context);\n\n      errors.push({\n        field: \"response\",\n        message: \"Internal response validation error\",\n        code: \"INTERNAL_ERROR\",\n      });\n\n      return { success: false, errors, context };\n    }\n  }\n\n  /**\n   * Create error response\n   */\n  createErrorResponse(\n    code: SafetyTrainingErrorCode,\n    message: string,\n    details: ValidationError[] = [],\n    context: SafetyTrainingValidationContext\n  ): GenericResponse {\n    const errorResponse = SafetyTrainingErrorResponseSchema.parse({\n      success: false,\n      error: {\n        code,\n        message,\n        details: details.map(d => ({\n          field: d.field,\n          message: d.message,\n          code: d.code,\n        })),\n        requestId: context.requestId,\n        timestamp: context.timestamp,\n        plantId: context.plantId,\n        userId: context.userId,\n      },\n      version: \"1.0\",\n    });\n\n    // Return the parsed error response\n    return {\n      json: (data: unknown, options?: { status?: number }) => {\n        return new Response(JSON.stringify(data || errorResponse), {\n          status: options?.status || this.getHttpStatus(code),\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n      },\n    };\n  }\n\n  /**\n   * Create success response\n   */\n  createSuccessResponse<T>(\n    data: T,\n    context: SafetyTrainingValidationContext,\n    metadata?: { pagination?: unknown }\n  ): GenericResponse {\n    const successResponse = {\n      success: true,\n      data,\n      version: \"1.0\" as const,\n      metadata: {\n        timestamp: context.timestamp,\n        requestId: context.requestId,\n        ...metadata,\n      },\n    };\n\n    // Return the success response\n    return {\n      json: (data: unknown, options?: { status?: number }) => {\n        return new Response(JSON.stringify(data || successResponse), {\n          status: options?.status || 200,\n          headers: { \"Content-Type\": \"application/json\" },\n        });\n      },\n    };\n  }\n\n  // =============================================================================\n  // PRIVATE VALIDATION METHODS\n  // =============================================================================\n\n  /**\n   * Validate schema against data\n   */\n  private validateSchema<T>(\n    data: unknown,\n    schema: z.ZodType<T>\n  ): { success: boolean; data?: T; errors: ValidationError[] } {\n    try {\n      const result = schema.safeParse(data);\n\n      if (result.success) {\n        return { success: true, data: result.data, errors: [] };\n      }\n\n      const errors: ValidationError[] = result.error.issues.map(\n        (error: z.ZodIssue) => ({\n          field: error.path.join(\".\"),\n          message: error.message,\n          code: error.code,\n          value: error.input,\n        })\n      );\n\n      return { success: false, errors };\n    } catch (error: unknown) {\n      // Log the actual error for debugging\n      console.error(\"Schema validation error:\", error);\n      return {\n        success: false,\n        errors: [\n          {\n            field: \"schema\",\n            message: \"Schema validation failed\",\n            code: \"SCHEMA_ERROR\",\n          },\n        ],\n      };\n    }\n  }\n\n  /**\n   * Extract path parameters from request\n   */\n  private extractPathParams(\n    request: GenericRequest,\n    endpointConfig: { path: string }\n  ): Record<string, unknown> {\n    const params: Record<string, unknown> = {};\n\n    // Extract from URL path segments\n    const pathSegments = request.nextUrl.pathname.split(\"/\");\n    const endpointSegments = endpointConfig.path.split(\"/\");\n\n    endpointSegments.forEach((segment: string, index: number) => {\n      if (segment.startsWith(\":\")) {\n        const paramName = segment.slice(1);\n        params[paramName] = pathSegments[index];\n      }\n    });\n\n    return params;\n  }\n\n  /**\n   * Extract query parameters from request\n   */\n  private extractQueryParams(request: GenericRequest): Record<string, unknown> {\n    const params: Record<string, unknown> = {};\n\n    request.nextUrl.searchParams.forEach((value, key) => {\n      // Try to parse as number if it looks like one\n      if (!isNaN(Number(value)) && value.trim() !== \"\") {\n        params[key] = Number(value);\n      }\n      // Try to parse as boolean\n      else if (value === \"true\" || value === \"false\") {\n        params[key] = value === \"true\";\n      }\n      // Keep as string\n      else {\n        params[key] = value;\n      }\n    });\n\n    return params;\n  }\n\n  /**\n   * Validate plant access\n   */\n  private validatePlantAccess(\n    context: SafetyTrainingValidationContext,\n    plantId: string\n  ): { success: boolean; errors: ValidationError[] } {\n    const errors: ValidationError[] = [];\n\n    // Check if user has access to the plant\n    if (!context.permissions.includes(`plants:${plantId}:read`)) {\n      errors.push({\n        field: \"plantId\",\n        message: \"Access denied to plant\",\n        code: \"PLANT_ACCESS_DENIED\",\n        value: plantId,\n      });\n    }\n\n    return { success: errors.length === 0, errors };\n  }\n\n  /**\n   * Validate user permissions\n   */\n  private validatePermissions(\n    context: SafetyTrainingValidationContext,\n    requiredPermissions: string[]\n  ): { success: boolean; errors: ValidationError[] } {\n    const errors: ValidationError[] = [];\n\n    for (const permission of requiredPermissions) {\n      if (!context.permissions.includes(permission)) {\n        errors.push({\n          field: \"permissions\",\n          message: `Missing required permission: ${permission}`,\n          code: \"AUTHORIZATION_ERROR\",\n          value: permission,\n        });\n      }\n    }\n\n    return { success: errors.length === 0, errors };\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Get HTTP status code for error\n   */\n  private getHttpStatus(code: SafetyTrainingErrorCode): number {\n    const statusMap: Record<SafetyTrainingErrorCode, number> = {\n      PLANT_NOT_FOUND: 404,\n      PLANT_ACCESS_DENIED: 403,\n      COURSE_NOT_FOUND: 404,\n      COURSE_ACCESS_DENIED: 403,\n      ENROLLMENT_NOT_FOUND: 404,\n      ENROLLMENT_ALREADY_EXISTS: 409,\n      ENROLLMENT_EXPIRED: 410,\n      PROGRESS_NOT_FOUND: 404,\n      PROGRESS_ACCESS_DENIED: 403,\n      ACTIVITY_EVENT_NOT_FOUND: 404,\n      QUESTION_EVENT_NOT_FOUND: 404,\n      ADMIN_ROLE_NOT_FOUND: 404,\n      ADMIN_ROLE_ACCESS_DENIED: 403,\n      USER_NOT_AUTHORIZED: 401,\n      PLANT_MISMATCH: 400,\n      INVALID_PROGRESS_UPDATE: 400,\n      COURSE_COMPLETION_FAILED: 400,\n      CERTIFICATE_GENERATION_FAILED: 500,\n      VALIDATION_ERROR: 400,\n      BUSINESS_ERROR: 400,\n      SYSTEM_ERROR: 500,\n    };\n\n    return statusMap[code] || 500;\n  }\n\n  /**\n   * Log error with context\n   */\n  private logError(\n    message: string,\n    error: unknown,\n    context: SafetyTrainingValidationContext\n  ): void {\n    if (this.config.enableLogging) {\n      console.error(`[${context.requestId}] ${message}:`, {\n        error: error instanceof Error ? error.message : error,\n        context: {\n          userId: context.userId,\n          plantId: context.plantId,\n          timestamp: context.timestamp,\n        },\n      });\n    }\n  }\n}\n\n// =============================================================================\n// VALIDATION MIDDLEWARE FACTORY\n// =============================================================================\n\n/**\n * Create validation middleware instance\n */\nexport const createSafetyTrainingValidationMiddleware = (\n  config?: SafetyTrainingMiddlewareConfig\n): SafetyTrainingValidationMiddleware => {\n  return new SafetyTrainingValidationMiddleware(config);\n};\n\n/**\n * Default validation middleware instance\n */\nexport const safetyTrainingValidation =\n  createSafetyTrainingValidationMiddleware();\n\n// =============================================================================\n// VALIDATION UTILITIES\n// =============================================================================\n\n/**\n * Validate plant ID format\n */\nexport const validatePlantId = (plantId: string): boolean => {\n  const uuidRegex =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(plantId);\n};\n\n/**\n * Validate user ID format\n */\nexport const validateUserId = (userId: string): boolean => {\n  const uuidRegex =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(userId);\n};\n\n/**\n * Validate course ID format\n */\nexport const validateCourseId = (courseId: string): boolean => {\n  const uuidRegex =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(courseId);\n};\n\n/**\n * Validate enrollment ID format\n */\nexport const validateEnrollmentId = (enrollmentId: string): boolean => {\n  const uuidRegex =\n    /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n  return uuidRegex.test(enrollmentId);\n};\n\n/**\n * Validate progress percentage\n */\nexport const validateProgressPercent = (percent: number): boolean => {\n  return Number.isFinite(percent) && percent >= 0 && percent <= 100;\n};\n\n/**\n * Validate duration in minutes\n */\nexport const validateDuration = (duration: number): boolean => {\n  return Number.isInteger(duration) && duration > 0 && duration <= 1440; // Max 24 hours\n};\n\n/**\n * Validate email format\n */\nexport const validateEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n/**\n * Validate URL format\n */\nexport const validateUrl = (url: string): boolean => {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Validate datetime format\n */\nexport const validateDateTime = (dateTime: string): boolean => {\n  const date = new Date(dateTime);\n  return !isNaN(date.getTime());\n};\n\n/**\n * Validate pagination parameters\n */\nexport const validatePagination = (page: number, limit: number): boolean => {\n  return (\n    Number.isInteger(page) &&\n    page >= 1 &&\n    Number.isInteger(limit) &&\n    limit >= 1 &&\n    limit <= 100\n  );\n};\n\n/**\n * Validate sort order\n */\nexport const validateSortOrder = (sortOrder: string): boolean => {\n  return [\"asc\", \"desc\"].includes(sortOrder.toLowerCase());\n};\n\n/**\n * Validate course type\n */\nexport const validateCourseType = (courseType: string): boolean => {\n  const validTypes = [\n    \"safety_orientation\",\n    \"hazard_communication\",\n    \"emergency_response\",\n    \"equipment_operation\",\n    \"compliance_training\",\n    \"certification\",\n    \"refresher\",\n    \"custom\",\n  ];\n  return validTypes.includes(courseType);\n};\n\n/**\n * Validate enrollment status\n */\nexport const validateEnrollmentStatus = (status: string): boolean => {\n  const validStatuses = [\n    \"enrolled\",\n    \"in_progress\",\n    \"completed\",\n    \"failed\",\n    \"expired\",\n    \"cancelled\",\n  ];\n  return validStatuses.includes(status);\n};\n\n/**\n * Validate progress status\n */\nexport const validateProgressStatus = (status: string): boolean => {\n  const validStatuses = [\n    \"not_started\",\n    \"in_progress\",\n    \"completed\",\n    \"paused\",\n    \"failed\",\n  ];\n  return validStatuses.includes(status);\n};\n\n/**\n * Validate admin role type\n */\nexport const validateAdminRoleType = (roleType: string): boolean => {\n  const validTypes = [\n    \"plant_admin\",\n    \"course_admin\",\n    \"instructor\",\n    \"supervisor\",\n    \"compliance_officer\",\n  ];\n  return validTypes.includes(roleType);\n};\n","// =============================================================================\n// LMS CONTENT API CONTRACTS\n// =============================================================================\n\n/**\n * LMS Content API contracts for structured course content, sections, blocks, and quizzes\n */\n\nimport { z } from \"zod\";\n\n// =============================================================================\n// LMS CONTENT BRANDED TYPES\n// =============================================================================\n\nexport const CourseSectionIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"CourseSectionId\">();\nexport type CourseSectionId = z.infer<typeof CourseSectionIdSchema>;\n\nexport const ContentBlockIdSchema = z.string().uuid().brand<\"ContentBlockId\">();\nexport type ContentBlockId = z.infer<typeof ContentBlockIdSchema>;\n\nexport const QuizQuestionIdSchema = z.string().uuid().brand<\"QuizQuestionId\">();\nexport type QuizQuestionId = z.infer<typeof QuizQuestionIdSchema>;\n\nexport const UserProgressIdSchema = z.string().uuid().brand<\"UserProgressId\">();\nexport type UserProgressId = z.infer<typeof UserProgressIdSchema>;\n\nexport const QuizAttemptIdSchema = z.string().uuid().brand<\"QuizAttemptId\">();\nexport type QuizAttemptId = z.infer<typeof QuizAttemptIdSchema>;\n\nexport const ContentInteractionIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"ContentInteractionId\">();\nexport type ContentInteractionId = z.infer<typeof ContentInteractionIdSchema>;\n\nexport const CourseTranslationIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"CourseTranslationId\">();\nexport type CourseTranslationId = z.infer<typeof CourseTranslationIdSchema>;\n\nexport const SectionTranslationIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"SectionTranslationId\">();\nexport type SectionTranslationId = z.infer<typeof SectionTranslationIdSchema>;\n\nexport const ContentBlockTranslationIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"ContentBlockTranslationId\">();\nexport type ContentBlockTranslationId = z.infer<\n  typeof ContentBlockTranslationIdSchema\n>;\n\nexport const QuizQuestionTranslationIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"QuizQuestionTranslationId\">();\nexport type QuizQuestionTranslationId = z.infer<\n  typeof QuizQuestionTranslationIdSchema\n>;\n\n// =============================================================================\n// LMS CONTENT ENUM SCHEMAS\n// =============================================================================\n\n/**\n * Content block type enum\n */\nexport const ContentBlockTypeSchema = z.enum([\n  \"hero\",\n  \"text\",\n  \"card\",\n  \"image\",\n  \"table\",\n  \"list\",\n  \"grid\",\n  \"callout\",\n  \"quote\",\n  \"divider\",\n  \"video\",\n  \"audio\",\n]);\nexport type ContentBlockType = z.infer<typeof ContentBlockTypeSchema>;\n\n/**\n * Question type enum\n */\nexport const QuestionTypeSchema = z.enum([\"true-false\", \"multiple-choice\"]);\nexport type QuestionType = z.infer<typeof QuestionTypeSchema>;\n\n/**\n * Language code enum\n */\nexport const LanguageCodeSchema = z.enum([\"en\", \"es\", \"fr\", \"de\"]);\nexport type LanguageCode = z.infer<typeof LanguageCodeSchema>;\n\n/**\n * Interaction type enum\n */\nexport const InteractionTypeSchema = z.enum([\n  \"view\",\n  \"click\",\n  \"expand\",\n  \"collapse\",\n  \"download\",\n  \"share\",\n]);\nexport type InteractionType = z.infer<typeof InteractionTypeSchema>;\n\n// =============================================================================\n// LMS CONTENT ENTITY SCHEMAS\n// =============================================================================\n\n/**\n * Course section entity schema\n */\nexport const CourseSectionSchema = z\n  .object({\n    id: CourseSectionIdSchema,\n    courseId: z.string().uuid(),\n    sectionKey: z.string().min(1).max(100),\n    title: z.string().min(1).max(200),\n    orderIndex: z.number().int().min(0),\n    iconName: z.string().max(50).optional(),\n    isPublished: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type CourseSection = z.infer<typeof CourseSectionSchema>;\n\n/**\n * Content block entity schema\n */\nexport const ContentBlockSchema = z\n  .object({\n    id: ContentBlockIdSchema,\n    sectionId: CourseSectionIdSchema,\n    blockType: ContentBlockTypeSchema,\n    orderIndex: z.number().int().min(0),\n    content: z.record(z.string(), z.unknown()),\n    metadata: z.record(z.string(), z.unknown()).optional(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type ContentBlock = z.infer<typeof ContentBlockSchema>;\n\n/**\n * Quiz question entity schema\n */\nexport const QuizQuestionSchema = z\n  .object({\n    id: QuizQuestionIdSchema,\n    sectionId: CourseSectionIdSchema,\n    questionKey: z.string().min(1).max(100),\n    questionType: QuestionTypeSchema,\n    questionText: z.string().min(1).max(1000),\n    options: z.record(z.string(), z.string()).optional(),\n    correctAnswer: z.union([z.string(), z.boolean(), z.number()]),\n    explanation: z.string().max(2000).optional(),\n    orderIndex: z.number().int().min(0).default(0),\n    isPublished: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type QuizQuestion = z.infer<typeof QuizQuestionSchema>;\n\n/**\n * Course translation entity schema\n */\nexport const CourseTranslationSchema = z\n  .object({\n    id: CourseTranslationIdSchema,\n    courseId: z.string().uuid(),\n    languageCode: LanguageCodeSchema,\n    title: z.string().min(1).max(200),\n    description: z.string().max(2000).optional(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type CourseTranslation = z.infer<typeof CourseTranslationSchema>;\n\n/**\n * Section translation entity schema\n */\nexport const SectionTranslationSchema = z\n  .object({\n    id: SectionTranslationIdSchema,\n    sectionId: CourseSectionIdSchema,\n    languageCode: LanguageCodeSchema,\n    title: z.string().min(1).max(200),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type SectionTranslation = z.infer<typeof SectionTranslationSchema>;\n\n/**\n * Content block translation entity schema\n */\nexport const ContentBlockTranslationSchema = z\n  .object({\n    id: ContentBlockTranslationIdSchema,\n    contentBlockId: ContentBlockIdSchema,\n    languageCode: LanguageCodeSchema,\n    content: z.record(z.string(), z.unknown()),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type ContentBlockTranslation = z.infer<\n  typeof ContentBlockTranslationSchema\n>;\n\n/**\n * Quiz question translation entity schema\n */\nexport const QuizQuestionTranslationSchema = z\n  .object({\n    id: QuizQuestionTranslationIdSchema,\n    quizQuestionId: QuizQuestionIdSchema,\n    languageCode: LanguageCodeSchema,\n    questionText: z.string().min(1).max(1000),\n    options: z.record(z.string(), z.string()).optional(),\n    correctAnswer: z.union([z.string(), z.boolean(), z.number()]),\n    explanation: z.string().max(2000).optional(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type QuizQuestionTranslation = z.infer<\n  typeof QuizQuestionTranslationSchema\n>;\n\n/**\n * User progress entity schema\n */\nexport const UserProgressSchema = z\n  .object({\n    id: UserProgressIdSchema,\n    userId: z.string().min(1),\n    courseId: z.string().uuid(),\n    sectionId: CourseSectionIdSchema,\n    isCompleted: z.boolean(),\n    completionPercentage: z.number().int().min(0).max(100),\n    timeSpentSeconds: z.number().int().min(0),\n    lastAccessedAt: z.string().datetime(),\n    completedAt: z.string().datetime().optional(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type UserProgress = z.infer<typeof UserProgressSchema>;\n\n/**\n * Quiz attempt entity schema\n */\nexport const QuizAttemptSchema = z\n  .object({\n    id: QuizAttemptIdSchema,\n    userId: z.string().min(1),\n    quizQuestionId: QuizQuestionIdSchema,\n    userAnswer: z.union([z.string(), z.boolean(), z.number()]),\n    isCorrect: z.boolean(),\n    attemptedAt: z.string().datetime(),\n    timeSpentSeconds: z.number().int().min(0),\n  })\n  .strict();\n\nexport type QuizAttempt = z.infer<typeof QuizAttemptSchema>;\n\n/**\n * Content interaction entity schema\n */\nexport const ContentInteractionSchema = z\n  .object({\n    id: ContentInteractionIdSchema,\n    userId: z.string().min(1),\n    contentBlockId: ContentBlockIdSchema,\n    interactionType: InteractionTypeSchema,\n    metadata: z.record(z.string(), z.unknown()).optional(),\n    interactedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type ContentInteraction = z.infer<typeof ContentInteractionSchema>;\n\n// =============================================================================\n// LMS CONTENT REQUEST SCHEMAS\n// =============================================================================\n\n/**\n * Create course section request schema\n */\nexport const CreateCourseSectionRequestSchema = z\n  .object({\n    courseId: z.string().uuid(),\n    sectionKey: z.string().min(1).max(100),\n    title: z.string().min(1).max(200),\n    orderIndex: z.number().int().min(0),\n    iconName: z.string().max(50).optional(),\n    isPublished: z.boolean().default(false),\n  })\n  .strict();\n\nexport type CreateCourseSectionRequest = z.infer<\n  typeof CreateCourseSectionRequestSchema\n>;\n\n/**\n * Update course section request schema\n */\nexport const UpdateCourseSectionRequestSchema =\n  CreateCourseSectionRequestSchema.partial().strict();\n\nexport type UpdateCourseSectionRequest = z.infer<\n  typeof UpdateCourseSectionRequestSchema\n>;\n\n/**\n * Create content block request schema\n */\nexport const CreateContentBlockRequestSchema = z\n  .object({\n    sectionId: CourseSectionIdSchema,\n    blockType: ContentBlockTypeSchema,\n    orderIndex: z.number().int().min(0),\n    content: z.record(z.string(), z.unknown()),\n    metadata: z.record(z.string(), z.unknown()).optional(),\n  })\n  .strict();\n\nexport type CreateContentBlockRequest = z.infer<\n  typeof CreateContentBlockRequestSchema\n>;\n\n/**\n * Update content block request schema\n */\nexport const UpdateContentBlockRequestSchema =\n  CreateContentBlockRequestSchema.partial().strict();\n\nexport type UpdateContentBlockRequest = z.infer<\n  typeof UpdateContentBlockRequestSchema\n>;\n\n/**\n * Create quiz question request schema\n */\nexport const CreateQuizQuestionRequestSchema = z\n  .object({\n    sectionId: CourseSectionIdSchema,\n    questionKey: z.string().min(1).max(100),\n    questionType: QuestionTypeSchema,\n    questionText: z.string().min(1).max(1000),\n    options: z.record(z.string(), z.string()).optional(),\n    correctAnswer: z.union([z.string(), z.boolean(), z.number()]),\n    explanation: z.string().max(2000).optional(),\n    orderIndex: z.number().int().min(0).default(0),\n    isPublished: z.boolean().default(false),\n  })\n  .strict();\n\nexport type CreateQuizQuestionRequest = z.infer<\n  typeof CreateQuizQuestionRequestSchema\n>;\n\n/**\n * Update quiz question request schema\n */\nexport const UpdateQuizQuestionRequestSchema =\n  CreateQuizQuestionRequestSchema.partial().strict();\n\nexport type UpdateQuizQuestionRequest = z.infer<\n  typeof UpdateQuizQuestionRequestSchema\n>;\n\n/**\n * Submit quiz answer request schema\n */\nexport const SubmitQuizAnswerRequestSchema = z\n  .object({\n    quizQuestionId: QuizQuestionIdSchema,\n    userAnswer: z.union([z.string(), z.boolean(), z.number()]),\n    timeSpentSeconds: z.number().int().min(0).default(0),\n  })\n  .strict();\n\nexport type SubmitQuizAnswerRequest = z.infer<\n  typeof SubmitQuizAnswerRequestSchema\n>;\n\n/**\n * Update user progress request schema\n */\nexport const UpdateUserProgressRequestSchema = z\n  .object({\n    courseId: z.string().uuid(),\n    sectionId: CourseSectionIdSchema,\n    isCompleted: z.boolean().optional(),\n    completionPercentage: z.number().int().min(0).max(100).optional(),\n    timeSpentSeconds: z.number().int().min(0).optional(),\n  })\n  .strict();\n\nexport type UpdateUserProgressRequest = z.infer<\n  typeof UpdateUserProgressRequestSchema\n>;\n\n/**\n * Track content interaction request schema\n */\nexport const TrackContentInteractionRequestSchema = z\n  .object({\n    contentBlockId: ContentBlockIdSchema,\n    interactionType: InteractionTypeSchema,\n    metadata: z.record(z.string(), z.unknown()).optional(),\n  })\n  .strict();\n\nexport type TrackContentInteractionRequest = z.infer<\n  typeof TrackContentInteractionRequestSchema\n>;\n\n// =============================================================================\n// LMS CONTENT QUERY SCHEMAS\n// =============================================================================\n\n/**\n * Course content query schema\n */\nexport const CourseContentQuerySchema = z\n  .object({\n    courseKey: z.string().min(1).max(100),\n    languageCode: LanguageCodeSchema.default(\"en\"),\n    includeUnpublished: z.boolean().default(false),\n  })\n  .strict();\n\nexport type CourseContentQuery = z.infer<typeof CourseContentQuerySchema>;\n\n/**\n * Section content query schema\n */\nexport const SectionContentQuerySchema = z\n  .object({\n    courseKey: z.string().min(1).max(100),\n    sectionKey: z.string().min(1).max(100),\n    languageCode: LanguageCodeSchema.default(\"en\"),\n    includeUnpublished: z.boolean().default(false),\n  })\n  .strict();\n\nexport type SectionContentQuery = z.infer<typeof SectionContentQuerySchema>;\n\n/**\n * User progress query schema\n */\nexport const UserProgressQuerySchema = z\n  .object({\n    userId: z.string().min(1),\n    courseId: z.string().uuid().optional(),\n    sectionId: CourseSectionIdSchema.optional(),\n    isCompleted: z.boolean().optional(),\n  })\n  .strict();\n\nexport type UserProgressQuery = z.infer<typeof UserProgressQuerySchema>;\n\n/**\n * Quiz attempts query schema\n */\nexport const QuizAttemptsQuerySchema = z\n  .object({\n    userId: z.string().min(1),\n    quizQuestionId: QuizQuestionIdSchema.optional(),\n    isCorrect: z.boolean().optional(),\n    dateFrom: z.string().datetime().optional(),\n    dateTo: z.string().datetime().optional(),\n  })\n  .strict();\n\nexport type QuizAttemptsQuery = z.infer<typeof QuizAttemptsQuerySchema>;\n\n/**\n * Content interactions query schema\n */\nexport const ContentInteractionsQuerySchema = z\n  .object({\n    userId: z.string().min(1),\n    contentBlockId: ContentBlockIdSchema.optional(),\n    interactionType: InteractionTypeSchema.optional(),\n    dateFrom: z.string().datetime().optional(),\n    dateTo: z.string().datetime().optional(),\n  })\n  .strict();\n\nexport type ContentInteractionsQuery = z.infer<\n  typeof ContentInteractionsQuerySchema\n>;\n\n// =============================================================================\n// LMS CONTENT RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Course section response schema\n */\nexport const CourseSectionResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: CourseSectionSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type CourseSectionResponse = z.infer<typeof CourseSectionResponseSchema>;\n\n/**\n * Content block response schema\n */\nexport const ContentBlockResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: ContentBlockSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type ContentBlockResponse = z.infer<typeof ContentBlockResponseSchema>;\n\n/**\n * Quiz question response schema\n */\nexport const QuizQuestionResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: QuizQuestionSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type QuizQuestionResponse = z.infer<typeof QuizQuestionResponseSchema>;\n\n/**\n * User progress response schema\n */\nexport const UserProgressResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: UserProgressSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type UserProgressResponse = z.infer<typeof UserProgressResponseSchema>;\n\n/**\n * Quiz attempt response schema\n */\nexport const QuizAttemptResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: QuizAttemptSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type QuizAttemptResponse = z.infer<typeof QuizAttemptResponseSchema>;\n\n/**\n * Content interaction response schema\n */\nexport const ContentInteractionResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: ContentInteractionSchema,\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type ContentInteractionResponse = z.infer<\n  typeof ContentInteractionResponseSchema\n>;\n\n// =============================================================================\n// LMS CONTENT COMPOSITE RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Course with sections response schema\n */\nexport const CourseWithSectionsResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: z.object({\n      course: z.object({\n        id: z.string().uuid(),\n        courseKey: z.string(),\n        title: z.string(),\n        description: z.string().optional(),\n        version: z.string(),\n        isPublished: z.boolean(),\n      }),\n      sections: z.array(CourseSectionSchema),\n    }),\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type CourseWithSectionsResponse = z.infer<\n  typeof CourseWithSectionsResponseSchema\n>;\n\n/**\n * Section with content blocks response schema\n */\nexport const SectionWithContentResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: z.object({\n      section: CourseSectionSchema,\n      contentBlocks: z.array(ContentBlockSchema),\n      quizQuestions: z.array(QuizQuestionSchema),\n    }),\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type SectionWithContentResponse = z.infer<\n  typeof SectionWithContentResponseSchema\n>;\n\n/**\n * Course completion status response schema\n */\nexport const CourseCompletionStatusResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: z.object({\n      courseId: z.string().uuid(),\n      userId: z.string(),\n      totalSections: z.number().int().min(0),\n      completedSections: z.number().int().min(0),\n      completionPercentage: z.number().int().min(0).max(100),\n      timeSpentSeconds: z.number().int().min(0),\n      lastAccessedAt: z.string().datetime(),\n      completedAt: z.string().datetime().optional(),\n    }),\n    version: z.literal(\"1.0\"),\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type CourseCompletionStatusResponse = z.infer<\n  typeof CourseCompletionStatusResponseSchema\n>;\n\n// =============================================================================\n// LMS CONTENT ERROR RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * LMS content error codes\n */\nexport const LmsContentErrorCodeSchema = z.enum([\n  \"COURSE_NOT_FOUND\",\n  \"COURSE_SECTION_NOT_FOUND\",\n  \"CONTENT_BLOCK_NOT_FOUND\",\n  \"QUIZ_QUESTION_NOT_FOUND\",\n  \"USER_PROGRESS_NOT_FOUND\",\n  \"QUIZ_ATTEMPT_NOT_FOUND\",\n  \"CONTENT_INTERACTION_NOT_FOUND\",\n  \"TRANSLATION_NOT_FOUND\",\n  \"INVALID_CONTENT_TYPE\",\n  \"INVALID_QUIZ_ANSWER\",\n  \"PROGRESS_UPDATE_FAILED\",\n  \"QUIZ_SUBMISSION_FAILED\",\n  \"CONTENT_INTERACTION_FAILED\",\n  \"VALIDATION_ERROR\",\n  \"BUSINESS_ERROR\",\n  \"SYSTEM_ERROR\",\n]);\n\nexport type LmsContentErrorCode = z.infer<typeof LmsContentErrorCodeSchema>;\n\n/**\n * LMS content error response schema\n */\nexport const LmsContentErrorResponseSchema = z\n  .object({\n    success: z.literal(false),\n    error: z.object({\n      code: LmsContentErrorCodeSchema,\n      message: z.string().min(1),\n      details: z\n        .array(\n          z.object({\n            field: z.string().optional(),\n            message: z.string(),\n            code: z.string().optional(),\n          })\n        )\n        .optional(),\n      requestId: z.string().optional(),\n      timestamp: z.string().datetime(),\n      path: z.string().optional(),\n      method: z.string().optional(),\n      courseId: z.string().uuid().optional(),\n      userId: z.string().optional(),\n    }),\n    version: z.literal(\"1.0\"),\n  })\n  .strict();\n\nexport type LmsContentErrorResponse = z.infer<\n  typeof LmsContentErrorResponseSchema\n>;\n","// =============================================================================\n// LMS CONTENT API ENDPOINT SPECIFICATIONS\n// =============================================================================\n\n/**\n * LMS Content API endpoint specifications for structured course content,\n * sections, blocks, quizzes, and user progress tracking.\n */\n\nimport { z } from \"zod\";\nimport {\n  CourseSectionIdSchema,\n  ContentBlockIdSchema,\n  QuizQuestionIdSchema,\n  UserProgressIdSchema,\n  QuizAttemptIdSchema,\n  ContentInteractionIdSchema,\n  LanguageCodeSchema,\n  CreateCourseSectionRequestSchema,\n  UpdateCourseSectionRequestSchema,\n  CreateContentBlockRequestSchema,\n  UpdateContentBlockRequestSchema,\n  CreateQuizQuestionRequestSchema,\n  UpdateQuizQuestionRequestSchema,\n  SubmitQuizAnswerRequestSchema,\n  UpdateUserProgressRequestSchema,\n  TrackContentInteractionRequestSchema,\n  CourseContentQuerySchema,\n  SectionContentQuerySchema,\n  UserProgressQuerySchema,\n  QuizAttemptsQuerySchema,\n  ContentInteractionsQuerySchema,\n  CourseSectionResponseSchema,\n  ContentBlockResponseSchema,\n  QuizQuestionResponseSchema,\n  UserProgressResponseSchema,\n  QuizAttemptResponseSchema,\n  ContentInteractionResponseSchema,\n  CourseWithSectionsResponseSchema,\n  SectionWithContentResponseSchema,\n  CourseCompletionStatusResponseSchema,\n  LmsContentErrorResponseSchema,\n} from \"./lms-content-contracts\";\n\n// =============================================================================\n// LMS CONTENT API ENDPOINT DEFINITIONS\n// =============================================================================\n\n/**\n * LMS Content API endpoint specifications\n * All endpoints are prefixed with /api/lms-content\n */\n\nexport const LmsContentApiEndpoints = {\n  // =============================================================================\n  // COURSE CONTENT ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/lms-content/courses/:courseKey/content\n   * Get complete course content with sections\n   */\n  GET_COURSE_CONTENT: {\n    method: \"GET\",\n    path: \"/api/lms-content/courses/:courseKey/content\",\n    params: z.object({\n      courseKey: z.string().min(1).max(100),\n    }),\n    query: CourseContentQuerySchema.omit({ courseKey: true }),\n    response: CourseWithSectionsResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  /**\n   * GET /api/lms-content/courses/:courseKey/sections/:sectionKey\n   * Get specific section with content blocks and quiz questions\n   */\n  GET_SECTION_CONTENT: {\n    method: \"GET\",\n    path: \"/api/lms-content/courses/:courseKey/sections/:sectionKey\",\n    params: z.object({\n      courseKey: z.string().min(1).max(100),\n      sectionKey: z.string().min(1).max(100),\n    }),\n    query: SectionContentQuerySchema.omit({\n      courseKey: true,\n      sectionKey: true,\n    }),\n    response: SectionWithContentResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  // =============================================================================\n  // COURSE SECTION MANAGEMENT ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/lms-content/courses/:courseKey/sections\n   * List all sections for a course\n   */\n  LIST_COURSE_SECTIONS: {\n    method: \"GET\",\n    path: \"/api/lms-content/courses/:courseKey/sections\",\n    params: z.object({\n      courseKey: z.string().min(1).max(100),\n    }),\n    query: z.object({\n      languageCode: LanguageCodeSchema.default(\"en\"),\n      includeUnpublished: z.boolean().default(false),\n      sortBy: z\n        .enum([\"orderIndex\", \"title\", \"createdAt\"])\n        .default(\"orderIndex\"),\n      sortOrder: z.enum([\"asc\", \"desc\"]).default(\"asc\"),\n    }),\n    response: z.object({\n      success: z.literal(true),\n      data: z.array(\n        z.object({\n          id: CourseSectionIdSchema,\n          sectionKey: z.string(),\n          title: z.string(),\n          orderIndex: z.number().int(),\n          iconName: z.string().optional(),\n          isPublished: z.boolean(),\n          createdAt: z.string().datetime(),\n          updatedAt: z.string().datetime(),\n        })\n      ),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  /**\n   * GET /api/lms-content/sections/:sectionId\n   * Get specific section details\n   */\n  GET_COURSE_SECTION: {\n    method: \"GET\",\n    path: \"/api/lms-content/sections/:sectionId\",\n    params: z.object({\n      sectionId: CourseSectionIdSchema,\n    }),\n    response: CourseSectionResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  /**\n   * POST /api/lms-content/courses/:courseKey/sections\n   * Create a new course section\n   */\n  CREATE_COURSE_SECTION: {\n    method: \"POST\",\n    path: \"/api/lms-content/courses/:courseKey/sections\",\n    params: z.object({\n      courseKey: z.string().min(1).max(100),\n    }),\n    body: CreateCourseSectionRequestSchema.omit({ courseId: true }),\n    response: CourseSectionResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:create\"],\n  },\n\n  /**\n   * PUT /api/lms-content/sections/:sectionId\n   * Update course section details\n   */\n  UPDATE_COURSE_SECTION: {\n    method: \"PUT\",\n    path: \"/api/lms-content/sections/:sectionId\",\n    params: z.object({\n      sectionId: CourseSectionIdSchema,\n    }),\n    body: UpdateCourseSectionRequestSchema,\n    response: CourseSectionResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:update\"],\n  },\n\n  /**\n   * DELETE /api/lms-content/sections/:sectionId\n   * Delete a course section\n   */\n  DELETE_COURSE_SECTION: {\n    method: \"DELETE\",\n    path: \"/api/lms-content/sections/:sectionId\",\n    params: z.object({\n      sectionId: CourseSectionIdSchema,\n    }),\n    response: z.object({\n      success: z.literal(true),\n      message: z.string(),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:delete\"],\n  },\n\n  // =============================================================================\n  // CONTENT BLOCK MANAGEMENT ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/lms-content/sections/:sectionId/content-blocks\n   * List content blocks for a section\n   */\n  LIST_CONTENT_BLOCKS: {\n    method: \"GET\",\n    path: \"/api/lms-content/sections/:sectionId/content-blocks\",\n    params: z.object({\n      sectionId: CourseSectionIdSchema,\n    }),\n    query: z.object({\n      languageCode: LanguageCodeSchema.default(\"en\"),\n      blockType: z\n        .enum([\n          \"hero\",\n          \"text\",\n          \"card\",\n          \"image\",\n          \"table\",\n          \"list\",\n          \"grid\",\n          \"callout\",\n          \"quote\",\n          \"divider\",\n          \"video\",\n          \"audio\",\n        ])\n        .optional(),\n      sortBy: z\n        .enum([\"orderIndex\", \"blockType\", \"createdAt\"])\n        .default(\"orderIndex\"),\n      sortOrder: z.enum([\"asc\", \"desc\"]).default(\"asc\"),\n    }),\n    response: z.object({\n      success: z.literal(true),\n      data: z.array(ContentBlockResponseSchema.shape.data),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  /**\n   * GET /api/lms-content/content-blocks/:contentBlockId\n   * Get specific content block details\n   */\n  GET_CONTENT_BLOCK: {\n    method: \"GET\",\n    path: \"/api/lms-content/content-blocks/:contentBlockId\",\n    params: z.object({\n      contentBlockId: ContentBlockIdSchema,\n    }),\n    response: ContentBlockResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  /**\n   * POST /api/lms-content/sections/:sectionId/content-blocks\n   * Create a new content block\n   */\n  CREATE_CONTENT_BLOCK: {\n    method: \"POST\",\n    path: \"/api/lms-content/sections/:sectionId/content-blocks\",\n    params: z.object({\n      sectionId: CourseSectionIdSchema,\n    }),\n    body: CreateContentBlockRequestSchema.omit({ sectionId: true }),\n    response: ContentBlockResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:create\"],\n  },\n\n  /**\n   * PUT /api/lms-content/content-blocks/:contentBlockId\n   * Update content block details\n   */\n  UPDATE_CONTENT_BLOCK: {\n    method: \"PUT\",\n    path: \"/api/lms-content/content-blocks/:contentBlockId\",\n    params: z.object({\n      contentBlockId: ContentBlockIdSchema,\n    }),\n    body: UpdateContentBlockRequestSchema,\n    response: ContentBlockResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:update\"],\n  },\n\n  /**\n   * DELETE /api/lms-content/content-blocks/:contentBlockId\n   * Delete a content block\n   */\n  DELETE_CONTENT_BLOCK: {\n    method: \"DELETE\",\n    path: \"/api/lms-content/content-blocks/:contentBlockId\",\n    params: z.object({\n      contentBlockId: ContentBlockIdSchema,\n    }),\n    response: z.object({\n      success: z.literal(true),\n      message: z.string(),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:delete\"],\n  },\n\n  // =============================================================================\n  // QUIZ QUESTION MANAGEMENT ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/lms-content/sections/:sectionId/quiz-questions\n   * List quiz questions for a section\n   */\n  LIST_QUIZ_QUESTIONS: {\n    method: \"GET\",\n    path: \"/api/lms-content/sections/:sectionId/quiz-questions\",\n    params: z.object({\n      sectionId: CourseSectionIdSchema,\n    }),\n    query: z.object({\n      languageCode: LanguageCodeSchema.default(\"en\"),\n      questionType: z.enum([\"true-false\", \"multiple-choice\"]).optional(),\n      includeUnpublished: z.boolean().default(false),\n      sortBy: z\n        .enum([\"orderIndex\", \"questionKey\", \"createdAt\"])\n        .default(\"orderIndex\"),\n      sortOrder: z.enum([\"asc\", \"desc\"]).default(\"asc\"),\n    }),\n    response: z.object({\n      success: z.literal(true),\n      data: z.array(QuizQuestionResponseSchema.shape.data),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  /**\n   * GET /api/lms-content/quiz-questions/:quizQuestionId\n   * Get specific quiz question details\n   */\n  GET_QUIZ_QUESTION: {\n    method: \"GET\",\n    path: \"/api/lms-content/quiz-questions/:quizQuestionId\",\n    params: z.object({\n      quizQuestionId: QuizQuestionIdSchema,\n    }),\n    response: QuizQuestionResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n\n  /**\n   * POST /api/lms-content/sections/:sectionId/quiz-questions\n   * Create a new quiz question\n   */\n  CREATE_QUIZ_QUESTION: {\n    method: \"POST\",\n    path: \"/api/lms-content/sections/:sectionId/quiz-questions\",\n    params: z.object({\n      sectionId: CourseSectionIdSchema,\n    }),\n    body: CreateQuizQuestionRequestSchema.omit({ sectionId: true }),\n    response: QuizQuestionResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:create\"],\n  },\n\n  /**\n   * PUT /api/lms-content/quiz-questions/:quizQuestionId\n   * Update quiz question details\n   */\n  UPDATE_QUIZ_QUESTION: {\n    method: \"PUT\",\n    path: \"/api/lms-content/quiz-questions/:quizQuestionId\",\n    params: z.object({\n      quizQuestionId: QuizQuestionIdSchema,\n    }),\n    body: UpdateQuizQuestionRequestSchema,\n    response: QuizQuestionResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:update\"],\n  },\n\n  /**\n   * DELETE /api/lms-content/quiz-questions/:quizQuestionId\n   * Delete a quiz question\n   */\n  DELETE_QUIZ_QUESTION: {\n    method: \"DELETE\",\n    path: \"/api/lms-content/quiz-questions/:quizQuestionId\",\n    params: z.object({\n      quizQuestionId: QuizQuestionIdSchema,\n    }),\n    response: z.object({\n      success: z.literal(true),\n      message: z.string(),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:delete\"],\n  },\n\n  // =============================================================================\n  // USER PROGRESS ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/lms-content/users/:userId/progress\n   * Get user progress for courses\n   */\n  GET_USER_PROGRESS: {\n    method: \"GET\",\n    path: \"/api/lms-content/users/:userId/progress\",\n    params: z.object({\n      userId: z.string().min(1),\n    }),\n    query: UserProgressQuerySchema.omit({ userId: true }),\n    response: z.object({\n      success: z.literal(true),\n      data: z.array(UserProgressResponseSchema.shape.data),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"progress:read\"],\n  },\n\n  /**\n   * GET /api/lms-content/users/:userId/courses/:courseId/completion\n   * Get course completion status for a user\n   */\n  GET_COURSE_COMPLETION_STATUS: {\n    method: \"GET\",\n    path: \"/api/lms-content/users/:userId/courses/:courseId/completion\",\n    params: z.object({\n      userId: z.string().min(1),\n      courseId: z.string().uuid(),\n    }),\n    response: CourseCompletionStatusResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"progress:read\"],\n  },\n\n  /**\n   * PUT /api/lms-content/users/:userId/progress\n   * Update user progress\n   */\n  UPDATE_USER_PROGRESS: {\n    method: \"PUT\",\n    path: \"/api/lms-content/users/:userId/progress\",\n    params: z.object({\n      userId: z.string().min(1),\n    }),\n    body: UpdateUserProgressRequestSchema,\n    response: UserProgressResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"progress:update\"],\n  },\n\n  // =============================================================================\n  // QUIZ INTERACTION ENDPOINTS\n  // =============================================================================\n\n  /**\n   * POST /api/lms-content/quiz-questions/:quizQuestionId/submit\n   * Submit quiz answer\n   */\n  SUBMIT_QUIZ_ANSWER: {\n    method: \"POST\",\n    path: \"/api/lms-content/quiz-questions/:quizQuestionId/submit\",\n    params: z.object({\n      quizQuestionId: QuizQuestionIdSchema,\n    }),\n    body: SubmitQuizAnswerRequestSchema.omit({ quizQuestionId: true }),\n    response: QuizAttemptResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"quiz:submit\"],\n  },\n\n  /**\n   * GET /api/lms-content/users/:userId/quiz-attempts\n   * Get user's quiz attempts\n   */\n  GET_USER_QUIZ_ATTEMPTS: {\n    method: \"GET\",\n    path: \"/api/lms-content/users/:userId/quiz-attempts\",\n    params: z.object({\n      userId: z.string().min(1),\n    }),\n    query: QuizAttemptsQuerySchema.omit({ userId: true }),\n    response: z.object({\n      success: z.literal(true),\n      data: z.array(QuizAttemptResponseSchema.shape.data),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"quiz:read\"],\n  },\n\n  // =============================================================================\n  // CONTENT INTERACTION ENDPOINTS\n  // =============================================================================\n\n  /**\n   * POST /api/lms-content/content-blocks/:contentBlockId/interact\n   * Track content interaction\n   */\n  TRACK_CONTENT_INTERACTION: {\n    method: \"POST\",\n    path: \"/api/lms-content/content-blocks/:contentBlockId/interact\",\n    params: z.object({\n      contentBlockId: ContentBlockIdSchema,\n    }),\n    body: TrackContentInteractionRequestSchema.omit({ contentBlockId: true }),\n    response: ContentInteractionResponseSchema,\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"interaction:track\"],\n  },\n\n  /**\n   * GET /api/lms-content/users/:userId/content-interactions\n   * Get user's content interactions\n   */\n  GET_USER_CONTENT_INTERACTIONS: {\n    method: \"GET\",\n    path: \"/api/lms-content/users/:userId/content-interactions\",\n    params: z.object({\n      userId: z.string().min(1),\n    }),\n    query: ContentInteractionsQuerySchema.omit({ userId: true }),\n    response: z.object({\n      success: z.literal(true),\n      data: z.array(ContentInteractionResponseSchema.shape.data),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"interaction:read\"],\n  },\n\n  // =============================================================================\n  // TRANSLATION ENDPOINTS\n  // =============================================================================\n\n  /**\n   * GET /api/lms-content/courses/:courseKey/translations/:languageCode\n   * Get course translations\n   */\n  GET_COURSE_TRANSLATIONS: {\n    method: \"GET\",\n    path: \"/api/lms-content/courses/:courseKey/translations/:languageCode\",\n    params: z.object({\n      courseKey: z.string().min(1).max(100),\n      languageCode: LanguageCodeSchema,\n    }),\n    response: z.object({\n      success: z.literal(true),\n      data: z.object({\n        course: z.object({\n          title: z.string(),\n          description: z.string().optional(),\n        }),\n        sections: z.array(\n          z.object({\n            sectionKey: z.string(),\n            title: z.string(),\n          })\n        ),\n        contentBlocks: z.array(\n          z.object({\n            contentBlockId: ContentBlockIdSchema,\n            content: z.record(z.string(), z.unknown()),\n          })\n        ),\n        quizQuestions: z.array(\n          z.object({\n            quizQuestionId: QuizQuestionIdSchema,\n            questionText: z.string(),\n            options: z.record(z.string(), z.string()).optional(),\n            explanation: z.string().optional(),\n          })\n        ),\n      }),\n      version: z.literal(\"1.0\"),\n    }),\n    error: LmsContentErrorResponseSchema,\n    auth: true,\n    permissions: [\"courses:read\"],\n  },\n} as const;\n\n// =============================================================================\n// LMS CONTENT API ENDPOINT UTILITIES\n// =============================================================================\n\n/**\n * Extract endpoint method from endpoint definition\n */\nexport type LmsContentEndpointMethod<\n  T extends keyof typeof LmsContentApiEndpoints,\n> = (typeof LmsContentApiEndpoints)[T][\"method\"];\n\n/**\n * Extract endpoint path from endpoint definition\n */\nexport type LmsContentEndpointPath<\n  T extends keyof typeof LmsContentApiEndpoints,\n> = (typeof LmsContentApiEndpoints)[T][\"path\"];\n\n/**\n * Extract endpoint params from endpoint definition\n */\nexport type LmsContentEndpointParams<\n  T extends keyof typeof LmsContentApiEndpoints,\n> = \"params\" extends keyof (typeof LmsContentApiEndpoints)[T]\n  ? z.infer<(typeof LmsContentApiEndpoints)[T][\"params\"]>\n  : never;\n\n/**\n * Extract endpoint query from endpoint definition\n */\nexport type LmsContentEndpointQuery<\n  T extends keyof typeof LmsContentApiEndpoints,\n> = \"query\" extends keyof (typeof LmsContentApiEndpoints)[T]\n  ? z.infer<(typeof LmsContentApiEndpoints)[T][\"query\"]>\n  : never;\n\n/**\n * Extract endpoint body from endpoint definition\n */\nexport type LmsContentEndpointBody<\n  T extends keyof typeof LmsContentApiEndpoints,\n> = \"body\" extends keyof (typeof LmsContentApiEndpoints)[T]\n  ? z.infer<(typeof LmsContentApiEndpoints)[T][\"body\"]>\n  : never;\n\n/**\n * Extract endpoint response from endpoint definition\n */\nexport type LmsContentEndpointResponse<\n  T extends keyof typeof LmsContentApiEndpoints,\n> = z.infer<(typeof LmsContentApiEndpoints)[T][\"response\"]>;\n\n/**\n * Extract endpoint error from endpoint definition\n */\nexport type LmsContentEndpointError<\n  T extends keyof typeof LmsContentApiEndpoints,\n> = z.infer<(typeof LmsContentApiEndpoints)[T][\"error\"]>;\n\n/**\n * Get all endpoint names\n */\nexport type LmsContentEndpointNames = keyof typeof LmsContentApiEndpoints;\n\n/**\n * Get endpoints by method\n */\nexport type LmsContentEndpointsByMethod<M extends string> = {\n  [K in LmsContentEndpointNames]: (typeof LmsContentApiEndpoints)[K][\"method\"] extends M\n    ? K\n    : never;\n}[LmsContentEndpointNames];\n\n/**\n * Get all GET endpoints\n */\nexport type LmsContentGetEndpoints = LmsContentEndpointsByMethod<\"GET\">;\n\n/**\n * Get all POST endpoints\n */\nexport type LmsContentPostEndpoints = LmsContentEndpointsByMethod<\"POST\">;\n\n/**\n * Get all PUT endpoints\n */\nexport type LmsContentPutEndpoints = LmsContentEndpointsByMethod<\"PUT\">;\n\n/**\n * Get all DELETE endpoints\n */\nexport type LmsContentDeleteEndpoints = LmsContentEndpointsByMethod<\"DELETE\">;\n"],"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","names":["import_zod","data","import_zod","import_zod"]}