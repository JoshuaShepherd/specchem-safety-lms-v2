{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient, type CookieOptions } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\nimport { cache } from \"react\";\n\nexport const createClient = cache(async () => {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value, ...options });\n          } catch (error) {\n            // The `cookies().set()` method can only be called from a Server Component or Server Action.\n            // This error can be ignored if you are running tests that don't have a Server Component.\n          }\n        },\n        remove(name: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value: \"\", ...options });\n          } catch (error) {\n            // The `cookies().set()` method can only be called from a Server Component or Server Action.\n            // This error can be ignored if you are running tests that don't have a Server Component.\n          }\n        },\n      },\n    }\n  );\n});\n\n// Legacy export for backward compatibility\nexport const createServerSupabaseClient = createClient;\n\n// Server auth helper for API routes\nexport const serverAuth = {\n  async getCurrentUser() {\n    const supabase = await createClient();\n    const { data: { user }, error } = await supabase.auth.getUser();\n\n    if (error || !user) {\n      return { user: null, profile: null };\n    }\n\n    // Get user profile from profiles table\n    const { data: profile, error: profileError } = await supabase\n      .from(\"profiles\")\n      .select(\"*\")\n      .eq(\"auth_user_id\", user.id)\n      .single();\n\n    if (profileError) {\n      console.error(\"Error fetching user profile:\", profileError);\n      return { user, profile: null };\n    }\n\n    return { user, profile };\n  }\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AACA;AACA;;;;AAEO,MAAM,eAAe,IAAA,+UAAK,EAAC;IAChC,MAAM,cAAc,MAAM,IAAA,2QAAO;IAEjC,OAAO,IAAA,8SAAkB,sUAGvB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C,EAAE,OAAO,OAAO;gBACd,4FAA4F;gBAC5F,yFAAyF;gBAC3F;YACF;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD,EAAE,OAAO,OAAO;gBACd,4FAA4F;gBAC5F,yFAAyF;gBAC3F;YACF;QACF;IACF;AAEJ;AAGO,MAAM,6BAA6B;AAGnC,MAAM,aAAa;IACxB,MAAM;QACJ,MAAM,WAAW,MAAM;QACvB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE7D,IAAI,SAAS,CAAC,MAAM;YAClB,OAAO;gBAAE,MAAM;gBAAM,SAAS;YAAK;QACrC;QAEA,uCAAuC;QACvC,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SAClD,IAAI,CAAC,YACL,MAAM,CAAC,KACP,EAAE,CAAC,gBAAgB,KAAK,EAAE,EAC1B,MAAM;QAET,IAAI,cAAc;YAChB,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO;gBAAE;gBAAM,SAAS;YAAK;QAC/B;QAEA,OAAO;YAAE;YAAM;QAAQ;IACzB;AACF","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/types/branded-types.ts"],"sourcesContent":["import { z } from \"zod\";\n\n// =============================================================================\n// BRANDED TYPES FOR DOMAIN SAFETY\n// =============================================================================\n\n/**\n * Branded types provide compile-time type safety by preventing ID confusion\n * and ensuring type-safe operations across domain boundaries.\n */\n\n// =============================================================================\n// DOMAIN ENTITY BRANDED TYPES\n// =============================================================================\n\n// Core Safety Training Entities\nexport type PlantId = string & { readonly __brand: \"PlantId\" };\nexport type UserId = string & { readonly __brand: \"UserId\" };\nexport type CourseId = string & { readonly __brand: \"CourseId\" };\nexport type EnrollmentId = string & { readonly __brand: \"EnrollmentId\" };\nexport type ProgressId = string & { readonly __brand: \"ProgressId\" };\nexport type ActivityEventId = string & { readonly __brand: \"ActivityEventId\" };\nexport type QuestionEventId = string & { readonly __brand: \"QuestionEventId\" };\nexport type AdminRoleId = string & { readonly __brand: \"AdminRoleId\" };\n\n// Safety Business Entities\nexport type TerritoryId = string & { readonly __brand: \"TerritoryId\" };\nexport type AccountId = string & { readonly __brand: \"AccountId\" };\nexport type BranchId = string & { readonly __brand: \"BranchId\" };\nexport type ContactId = string & { readonly __brand: \"ContactId\" };\nexport type OpportunityId = string & { readonly __brand: \"OpportunityId\" };\nexport type ProductId = string & { readonly __brand: \"ProductId\" };\nexport type ProjectId = string & { readonly __brand: \"ProjectId\" };\nexport type SalesFactId = string & { readonly __brand: \"SalesFactId\" };\nexport type ActivityLogId = string & { readonly __brand: \"ActivityLogId\" };\n\n// Auth Integration\nexport type AuthUserId = string & { readonly __brand: \"AuthUserId\" };\n\n// =============================================================================\n// BRANDED SCHEMAS FOR RUNTIME VALIDATION\n// =============================================================================\n\n// Core Safety Training Schemas\nexport const PlantIdSchema = z.string().uuid().brand<\"PlantId\">();\nexport const UserIdSchema = z.string().uuid().brand<\"UserId\">();\nexport const CourseIdSchema = z.string().uuid().brand<\"CourseId\">();\nexport const EnrollmentIdSchema = z.string().uuid().brand<\"EnrollmentId\">();\nexport const ProgressIdSchema = z.string().uuid().brand<\"ProgressId\">();\nexport const ActivityEventIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"ActivityEventId\">();\nexport const QuestionEventIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"QuestionEventId\">();\nexport const AdminRoleIdSchema = z.string().uuid().brand<\"AdminRoleId\">();\n\n// Safety Business Schemas\nexport const TerritoryIdSchema = z.string().uuid().brand<\"TerritoryId\">();\nexport const AccountIdSchema = z.string().uuid().brand<\"AccountId\">();\nexport const BranchIdSchema = z.string().uuid().brand<\"BranchId\">();\nexport const ContactIdSchema = z.string().uuid().brand<\"ContactId\">();\nexport const OpportunityIdSchema = z.string().uuid().brand<\"OpportunityId\">();\nexport const ProductIdSchema = z.string().uuid().brand<\"ProductId\">();\nexport const ProjectIdSchema = z.string().uuid().brand<\"ProjectId\">();\nexport const SalesFactIdSchema = z.string().uuid().brand<\"SalesFactId\">();\nexport const ActivityLogIdSchema = z.string().uuid().brand<\"ActivityLogId\">();\n\n// Auth Integration Schema\nexport const AuthUserIdSchema = z.string().uuid().brand<\"AuthUserId\">();\n\n// =============================================================================\n// BRANDED ENUM TYPES\n// =============================================================================\n\n// Safety Training Enums\nexport type UserRole =\n  | \"safety_admin\"\n  | \"safety_manager\"\n  | \"safety_coordinator\"\n  | \"safety_instructor\"\n  | \"safety_rep\"\n  | \"plant_manager\"\n  | \"hr_admin\"\n  | \"employee\";\n\nexport type PlantStatus = \"active\" | \"inactive\" | \"suspended\" | \"closed\";\nexport type CourseStatus = \"active\" | \"inactive\" | \"draft\" | \"archived\";\nexport type EnrollmentStatus =\n  | \"enrolled\"\n  | \"in_progress\"\n  | \"completed\"\n  | \"failed\"\n  | \"dropped\"\n  | \"expired\";\nexport type ProgressStatus =\n  | \"not_started\"\n  | \"in_progress\"\n  | \"completed\"\n  | \"failed\";\n\n// Safety Business Enums\nexport type AccountStatus = \"active\" | \"inactive\" | \"suspended\" | \"closed\";\nexport type AccountType =\n  | \"safety_equipment_customer\"\n  | \"training_client\"\n  | \"consulting_client\"\n  | \"maintenance_client\"\n  | \"partner\"\n  | \"vendor\";\n\nexport type OpportunityStatus = \"open\" | \"closed\" | \"on_hold\" | \"cancelled\";\nexport type OpportunityStage =\n  | \"prospecting\"\n  | \"qualification\"\n  | \"proposal\"\n  | \"negotiation\"\n  | \"closed_won\"\n  | \"closed_lost\";\nexport type ProductStatus =\n  | \"active\"\n  | \"inactive\"\n  | \"discontinued\"\n  | \"coming_soon\";\nexport type ProjectStatus =\n  | \"planning\"\n  | \"in_progress\"\n  | \"on_hold\"\n  | \"completed\"\n  | \"cancelled\";\n\n// =============================================================================\n// BRANDED ENUM SCHEMAS\n// =============================================================================\n\n// Safety Training Enum Schemas\nexport const UserRoleSchema = z\n  .enum([\n    \"safety_admin\",\n    \"safety_manager\",\n    \"safety_coordinator\",\n    \"safety_instructor\",\n    \"safety_rep\",\n    \"plant_manager\",\n    \"hr_admin\",\n    \"employee\",\n  ])\n  .brand<\"UserRole\">();\n\nexport const PlantStatusSchema = z\n  .enum([\"active\", \"inactive\", \"suspended\", \"closed\"])\n  .brand<\"PlantStatus\">();\nexport const CourseStatusSchema = z\n  .enum([\"active\", \"inactive\", \"draft\", \"archived\"])\n  .brand<\"CourseStatus\">();\nexport const EnrollmentStatusSchema = z\n  .enum([\n    \"enrolled\",\n    \"in_progress\",\n    \"completed\",\n    \"failed\",\n    \"dropped\",\n    \"expired\",\n  ])\n  .brand<\"EnrollmentStatus\">();\nexport const ProgressStatusSchema = z\n  .enum([\"not_started\", \"in_progress\", \"completed\", \"failed\"])\n  .brand<\"ProgressStatus\">();\n\n// Safety Business Enum Schemas\nexport const AccountStatusSchema = z\n  .enum([\"active\", \"inactive\", \"suspended\", \"closed\"])\n  .brand<\"AccountStatus\">();\nexport const AccountTypeSchema = z\n  .enum([\n    \"safety_equipment_customer\",\n    \"training_client\",\n    \"consulting_client\",\n    \"maintenance_client\",\n    \"partner\",\n    \"vendor\",\n  ])\n  .brand<\"AccountType\">();\n\nexport const OpportunityStatusSchema = z\n  .enum([\"open\", \"closed\", \"on_hold\", \"cancelled\"])\n  .brand<\"OpportunityStatus\">();\nexport const OpportunityStageSchema = z\n  .enum([\n    \"prospecting\",\n    \"qualification\",\n    \"proposal\",\n    \"negotiation\",\n    \"closed_won\",\n    \"closed_lost\",\n  ])\n  .brand<\"OpportunityStage\">();\nexport const ProductStatusSchema = z\n  .enum([\"active\", \"inactive\", \"discontinued\", \"coming_soon\"])\n  .brand<\"ProductStatus\">();\nexport const ProjectStatusSchema = z\n  .enum([\"planning\", \"in_progress\", \"on_hold\", \"completed\", \"cancelled\"])\n  .brand<\"ProjectStatus\">();\n\n// =============================================================================\n// TYPE-SAFE ROLE CHECKING\n// =============================================================================\n\n/**\n * Type-safe role checking functions that provide compile-time guarantees\n * about role-based permissions and operations.\n */\n\nexport const isAdminRole = (role: UserRole): role is \"safety_admin\" =>\n  role === \"safety_admin\";\n\nexport const isManagerRole = (\n  role: UserRole\n): role is \"safety_manager\" | \"safety_admin\" =>\n  role === \"safety_manager\" || role === \"safety_admin\";\n\nexport const isInstructorRole = (\n  role: UserRole\n): role is \"safety_instructor\" | \"safety_coordinator\" =>\n  role === \"safety_instructor\" || role === \"safety_coordinator\";\n\nexport const isPlantManagerRole = (role: UserRole): role is \"plant_manager\" =>\n  role === \"plant_manager\";\n\nexport const isHrAdminRole = (role: UserRole): role is \"hr_admin\" =>\n  role === \"hr_admin\";\n\nexport const isEmployeeRole = (role: UserRole): role is \"employee\" =>\n  role === \"employee\";\n\n// =============================================================================\n// TYPE-SAFE ID CONVERSION UTILITIES\n// =============================================================================\n\n/**\n * Type-safe ID conversion utilities that ensure proper branded type handling\n * while maintaining runtime validation.\n */\n\nexport const createPlantId = (id: string): PlantId => {\n  const validated = PlantIdSchema.parse(id);\n  return validated as unknown as PlantId;\n};\n\nexport const createUserId = (id: string): UserId => {\n  const validated = UserIdSchema.parse(id);\n  return validated as unknown as UserId;\n};\n\nexport const createTerritoryId = (id: string): TerritoryId => {\n  const validated = TerritoryIdSchema.parse(id);\n  return validated as unknown as TerritoryId;\n};\n\nexport const createAccountId = (id: string): AccountId => {\n  const validated = AccountIdSchema.parse(id);\n  return validated as unknown as AccountId;\n};\n\nexport const createContactId = (id: string): ContactId => {\n  const validated = ContactIdSchema.parse(id);\n  return validated as unknown as ContactId;\n};\n\nexport const createOpportunityId = (id: string): OpportunityId => {\n  const validated = OpportunityIdSchema.parse(id);\n  return validated as unknown as OpportunityId;\n};\n\n// =============================================================================\n// TYPE-SAFE ENUM CONVERSION UTILITIES\n// =============================================================================\n\nexport const createUserRole = (role: string): UserRole => {\n  const validated = UserRoleSchema.parse(role);\n  return validated as unknown as UserRole;\n};\n\nexport const createAccountStatus = (status: string): AccountStatus => {\n  const validated = AccountStatusSchema.parse(status);\n  return validated as unknown as AccountStatus;\n};\n\nexport const createAccountType = (type: string): AccountType => {\n  const validated = AccountTypeSchema.parse(type);\n  return validated as unknown as AccountType;\n};\n\nexport const createOpportunityStatus = (status: string): OpportunityStatus => {\n  const validated = OpportunityStatusSchema.parse(status);\n  return validated as unknown as OpportunityStatus;\n};\n\nexport const createOpportunityStage = (stage: string): OpportunityStage => {\n  const validated = OpportunityStageSchema.parse(stage);\n  return validated as unknown as OpportunityStage;\n};\n\n// =============================================================================\n// TYPE-SAFE VALIDATION UTILITIES\n// =============================================================================\n\n/**\n * Type-safe validation utilities that provide both compile-time and runtime\n * type safety for branded types and enums.\n */\n\nexport const isValidPlantId = (id: unknown): id is PlantId => {\n  return PlantIdSchema.safeParse(id).success;\n};\n\nexport const isValidUserId = (id: unknown): id is UserId => {\n  return UserIdSchema.safeParse(id).success;\n};\n\nexport const isValidTerritoryId = (id: unknown): id is TerritoryId => {\n  return TerritoryIdSchema.safeParse(id).success;\n};\n\nexport const isValidAccountId = (id: unknown): id is AccountId => {\n  return AccountIdSchema.safeParse(id).success;\n};\n\nexport const isValidUserRole = (role: unknown): role is UserRole => {\n  return UserRoleSchema.safeParse(role).success;\n};\n\nexport const isValidAccountStatus = (\n  status: unknown\n): status is AccountStatus => {\n  return AccountStatusSchema.safeParse(status).success;\n};\n\n// =============================================================================\n// TYPE-SAFE COMPARISON UTILITIES\n// =============================================================================\n\n/**\n * Type-safe comparison utilities that prevent accidental ID mixing\n * and ensure proper domain entity comparisons.\n */\n\nexport const isSamePlant = (id1: PlantId, id2: PlantId): boolean => id1 === id2;\nexport const isSameUser = (id1: UserId, id2: UserId): boolean => id1 === id2;\nexport const isSameTerritory = (id1: TerritoryId, id2: TerritoryId): boolean =>\n  id1 === id2;\nexport const isSameAccount = (id1: AccountId, id2: AccountId): boolean =>\n  id1 === id2;\nexport const isSameContact = (id1: ContactId, id2: ContactId): boolean =>\n  id1 === id2;\nexport const isSameOpportunity = (\n  id1: OpportunityId,\n  id2: OpportunityId\n): boolean => id1 === id2;\n\n// =============================================================================\n// TYPE-SAFE COLLECTION UTILITIES\n// =============================================================================\n\n/**\n * Type-safe collection utilities for working with arrays of branded types.\n */\n\nexport const filterByPlantId = <T extends { plantId: PlantId }>(\n  items: T[],\n  plantId: PlantId\n): T[] => items.filter(item => isSamePlant(item.plantId, plantId));\n\nexport const filterByUserId = <T extends { userId: UserId }>(\n  items: T[],\n  userId: UserId\n): T[] => items.filter(item => isSameUser(item.userId, userId));\n\nexport const filterByTerritoryId = <T extends { territoryId: TerritoryId }>(\n  items: T[],\n  territoryId: TerritoryId\n): T[] => items.filter(item => isSameTerritory(item.territoryId, territoryId));\n\nexport const filterByAccountId = <T extends { accountId: AccountId }>(\n  items: T[],\n  accountId: AccountId\n): T[] => items.filter(item => isSameAccount(item.accountId, accountId));\n\n// =============================================================================\n// TYPE-SAFE MAPPING UTILITIES\n// =============================================================================\n\n/**\n * Type-safe mapping utilities for transforming between different ID types\n * while maintaining type safety.\n */\n\nexport const mapToPlantIds = (items: { plantId: PlantId }[]): PlantId[] =>\n  items.map(item => item.plantId);\n\nexport const mapToUserIds = (items: { userId: UserId }[]): UserId[] =>\n  items.map(item => item.userId);\n\nexport const mapToTerritoryIds = (\n  items: { territoryId: TerritoryId }[]\n): TerritoryId[] => items.map(item => item.territoryId);\n\nexport const mapToAccountIds = (\n  items: { accountId: AccountId }[]\n): AccountId[] => items.map(item => item.accountId);\n\n// =============================================================================\n// TYPE-SAFE SET UTILITIES\n// =============================================================================\n\n/**\n * Type-safe set utilities for working with unique collections of branded types.\n */\n\nexport const createPlantIdSet = (ids: PlantId[]): Set<PlantId> => new Set(ids);\nexport const createUserIdSet = (ids: UserId[]): Set<UserId> => new Set(ids);\nexport const createTerritoryIdSet = (ids: TerritoryId[]): Set<TerritoryId> =>\n  new Set(ids);\nexport const createAccountIdSet = (ids: AccountId[]): Set<AccountId> =>\n  new Set(ids);\n\nexport const hasPlantId = (set: Set<PlantId>, id: PlantId): boolean =>\n  set.has(id);\nexport const hasUserId = (set: Set<UserId>, id: UserId): boolean => set.has(id);\nexport const hasTerritoryId = (\n  set: Set<TerritoryId>,\n  id: TerritoryId\n): boolean => set.has(id);\nexport const hasAccountId = (set: Set<AccountId>, id: AccountId): boolean =>\n  set.has(id);\n\n// =============================================================================\n// TYPE-SAFE ERROR HANDLING\n// =============================================================================\n\n/**\n * Type-safe error handling for branded type operations.\n */\n\nexport class BrandedTypeError extends Error {\n  constructor(\n    public readonly expectedType: string,\n    public readonly actualValue: unknown,\n    message?: string\n  ) {\n    super(message || `Expected ${expectedType}, got ${typeof actualValue}`);\n    this.name = \"BrandedTypeError\";\n  }\n}\n\nexport const assertPlantId = (id: unknown): PlantId => {\n  if (!isValidPlantId(id)) {\n    throw new BrandedTypeError(\"PlantId\", id);\n  }\n  return id;\n};\n\nexport const assertUserId = (id: unknown): UserId => {\n  if (!isValidUserId(id)) {\n    throw new BrandedTypeError(\"UserId\", id);\n  }\n  return id;\n};\n\nexport const assertTerritoryId = (id: unknown): TerritoryId => {\n  if (!isValidTerritoryId(id)) {\n    throw new BrandedTypeError(\"TerritoryId\", id);\n  }\n  return id;\n};\n\nexport const assertAccountId = (id: unknown): AccountId => {\n  if (!isValidAccountId(id)) {\n    throw new BrandedTypeError(\"AccountId\", id);\n  }\n  return id;\n};\n\n// =============================================================================\n// TYPE-SAFE SERIALIZATION\n// =============================================================================\n\n/**\n * Type-safe serialization utilities for branded types.\n */\n\nexport const serializePlantId = (id: PlantId): string => id as string;\nexport const serializeUserId = (id: UserId): string => id as string;\nexport const serializeTerritoryId = (id: TerritoryId): string => id as string;\nexport const serializeAccountId = (id: AccountId): string => id as string;\nexport const serializeContactId = (id: ContactId): string => id as string;\nexport const serializeOpportunityId = (id: OpportunityId): string =>\n  id as string;\n\nexport const deserializePlantId = (id: string): PlantId => createPlantId(id);\nexport const deserializeUserId = (id: string): UserId => createUserId(id);\nexport const deserializeTerritoryId = (id: string): TerritoryId =>\n  createTerritoryId(id);\nexport const deserializeAccountId = (id: string): AccountId =>\n  createAccountId(id);\nexport const deserializeContactId = (id: string): ContactId =>\n  createContactId(id);\nexport const deserializeOpportunityId = (id: string): OpportunityId =>\n  createOpportunityId(id);\n\n// =============================================================================\n// TYPE-SAFE JSON SERIALIZATION\n// =============================================================================\n\n/**\n * Type-safe JSON serialization for objects containing branded types.\n */\n\nexport const serializeBrandedObject = <T extends Record<string, any>>(\n  obj: T\n): Record<string, any> => {\n  const serialized: Record<string, any> = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (\n      typeof value === \"string\" &&\n      (isValidPlantId(value) ||\n        isValidUserId(value) ||\n        isValidTerritoryId(value) ||\n        isValidAccountId(value))\n    ) {\n      serialized[key] = value as string;\n    } else if (typeof value === \"object\" && value !== null) {\n      serialized[key] = serializeBrandedObject(value);\n    } else {\n      serialized[key] = value;\n    }\n  }\n\n  return serialized;\n};\n\nexport const deserializeBrandedObject = <T extends Record<string, any>>(\n  obj: Record<string, any>,\n  schema: Record<string, (value: string) => any>\n): T => {\n  const deserialized: Record<string, any> = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"string\" && schema[key]) {\n      deserialized[key] = schema[key](value);\n    } else if (typeof value === \"object\" && value !== null) {\n      deserialized[key] = deserializeBrandedObject(value, schema);\n    } else {\n      deserialized[key] = value;\n    }\n  }\n\n  return deserialized as T;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 619, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/types/api-contracts.ts"],"sourcesContent":["import { z } from \"zod\";\nimport {\n  UserId,\n  TerritoryId,\n  PlantId,\n  AccountId,\n  ContactId,\n  OpportunityId,\n  UserRole,\n  AccountStatus,\n  AccountType,\n  OpportunityStatus,\n  OpportunityStage,\n  ProductStatus,\n  ProjectStatus,\n  UserIdSchema,\n  TerritoryIdSchema,\n  PlantIdSchema,\n  AccountIdSchema,\n  ContactIdSchema,\n  OpportunityIdSchema,\n  UserRoleSchema,\n  AccountStatusSchema,\n  AccountTypeSchema,\n  OpportunityStatusSchema,\n  OpportunityStageSchema,\n  ProductStatusSchema,\n  ProjectStatusSchema,\n} from \"./branded-types\";\n\n// =============================================================================\n// STRICT API CONTRACTS\n// =============================================================================\n\n/**\n * Strict API contracts ensure compile-time type safety with no additional\n * properties allowed, versioned responses, and comprehensive validation.\n */\n\n// =============================================================================\n// API VERSIONING\n// =============================================================================\n\n/**\n * API version schema\n */\nexport const ApiVersionSchema = z\n  .enum([\"1.0\", \"1.1\", \"2.0\"])\n  .brand<\"ApiVersion\">();\nexport type ApiVersion = z.infer<typeof ApiVersionSchema>;\n\n/**\n * Current API version\n */\nexport const CURRENT_API_VERSION: ApiVersion = \"1.0\" as ApiVersion;\n\n// =============================================================================\n// STRICT ENTITY RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Strict account response schema with no additional properties\n */\nexport const StrictAccountResponseSchema = z\n  .object({\n    id: AccountIdSchema,\n    name: z.string().min(1).max(200),\n    accountNumber: z.string().max(50).optional(),\n    type: AccountTypeSchema,\n    status: AccountStatusSchema,\n    industry: z\n      .enum([\n        \"manufacturing\",\n        \"construction\",\n        \"mining\",\n        \"oil_gas\",\n        \"chemical\",\n        \"healthcare\",\n        \"transportation\",\n        \"utilities\",\n        \"government\",\n        \"education\",\n        \"retail\",\n        \"other\",\n      ])\n      .optional(),\n    website: z.string().url().optional(),\n    phone: z.string().optional(),\n    email: z.string().email().optional(),\n    description: z.string().max(2000).optional(),\n    annualRevenue: z.string().optional(),\n    employeeCount: z\n      .enum([\"1-10\", \"11-50\", \"51-200\", \"201-500\", \"500+\"])\n      .optional(),\n    safetyComplianceLevel: z\n      .enum([\"OSHA Compliant\", \"ISO 45001\", \"Custom\", \"Non-Compliant\"])\n      .optional(),\n    billingAddress: z.string().max(500).optional(),\n    shippingAddress: z.string().max(500).optional(),\n    territoryId: TerritoryIdSchema,\n    ownerId: UserIdSchema,\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    createdBy: UserIdSchema,\n  })\n  .strict(); // No additional properties allowed\n\nexport type StrictAccountResponse = z.infer<typeof StrictAccountResponseSchema>;\n\n/**\n * Strict contact response schema with no additional properties\n */\nexport const StrictContactResponseSchema = z\n  .object({\n    id: ContactIdSchema,\n    accountId: AccountIdSchema,\n    branchId: z.string().uuid().optional(),\n    ownerId: UserIdSchema,\n    firstName: z.string().min(1).max(50),\n    lastName: z.string().min(1).max(50),\n    email: z.string().email(),\n    phone: z.string().optional(),\n    mobile: z.string().optional(),\n    jobTitle: z.string().max(100).optional(),\n    department: z.string().max(100).optional(),\n    role: z\n      .enum([\n        \"decision_maker\",\n        \"influencer\",\n        \"user\",\n        \"evaluator\",\n        \"champion\",\n        \"gatekeeper\",\n        \"other\",\n      ])\n      .default(\"user\"),\n    status: z.enum([\"active\", \"inactive\", \"do_not_contact\"]).default(\"active\"),\n    isPrimary: z.boolean().default(false),\n    safetyCertifications: z.string().max(500).optional(),\n    notes: z.string().max(2000).optional(),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    createdBy: UserIdSchema,\n  })\n  .strict();\n\nexport type StrictContactResponse = z.infer<typeof StrictContactResponseSchema>;\n\n/**\n * Strict opportunity response schema with no additional properties\n */\nexport const StrictOpportunityResponseSchema = z\n  .object({\n    id: OpportunityIdSchema,\n    accountId: AccountIdSchema,\n    contactId: z.string().uuid().optional(),\n    ownerId: UserIdSchema,\n    name: z.string().min(1).max(200),\n    description: z.string().max(2000).optional(),\n    type: z.enum([\n      \"safety_equipment_sale\",\n      \"training_service\",\n      \"consulting_service\",\n      \"maintenance_contract\",\n      \"compliance_assessment\",\n      \"emergency_response_planning\",\n      \"other\",\n    ]),\n    stage: OpportunityStageSchema,\n    status: OpportunityStatusSchema,\n    source: z\n      .enum([\n        \"website\",\n        \"referral\",\n        \"cold_call\",\n        \"trade_show\",\n        \"social_media\",\n        \"advertising\",\n        \"other\",\n      ])\n      .optional(),\n    probability: z.enum([\"10\", \"25\", \"50\", \"75\", \"90\"]).default(\"10\"),\n    amount: z.string().optional(),\n    closeDate: z.string().datetime().optional(),\n    actualCloseDate: z.string().datetime().optional(),\n    lostReason: z.string().max(500).optional(),\n    nextSteps: z.string().max(1000).optional(),\n    safetyRequirements: z.string().max(1000).optional(),\n    complianceNotes: z.string().max(1000).optional(),\n    notes: z.string().max(2000).optional(),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    createdBy: UserIdSchema,\n  })\n  .strict();\n\nexport type StrictOpportunityResponse = z.infer<\n  typeof StrictOpportunityResponseSchema\n>;\n\n/**\n * Strict territory response schema with no additional properties\n */\nexport const StrictTerritoryResponseSchema = z\n  .object({\n    id: TerritoryIdSchema,\n    name: z.string().min(1).max(100),\n    code: z.string().min(1).max(20),\n    description: z.string().max(500).optional(),\n    region: z.string().max(50).optional(),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type StrictTerritoryResponse = z.infer<\n  typeof StrictTerritoryResponseSchema\n>;\n\n/**\n * Strict plant response schema with no additional properties\n */\nexport const StrictPlantResponseSchema = z\n  .object({\n    id: PlantIdSchema,\n    name: z.string().min(1).max(100),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type StrictPlantResponse = z.infer<typeof StrictPlantResponseSchema>;\n\n/**\n * Strict user response schema with no additional properties\n */\nexport const StrictUserResponseSchema = z\n  .object({\n    id: UserIdSchema,\n    authUserId: z.string().uuid(),\n    plantId: PlantIdSchema.optional(),\n    territoryId: TerritoryIdSchema.optional(),\n    firstName: z.string().min(1).max(50),\n    lastName: z.string().min(1).max(50),\n    email: z.string().email(),\n    phone: z.string().optional(),\n    jobTitle: z.string().max(100).optional(),\n    department: z.string().max(100).optional(),\n    role: UserRoleSchema,\n    status: z.enum([\"active\", \"inactive\", \"suspended\"]),\n    isActive: z.boolean(),\n    lastLoginAt: z.string().datetime().optional(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    createdBy: z.string().uuid().optional(),\n  })\n  .strict();\n\nexport type StrictUserResponse = z.infer<typeof StrictUserResponseSchema>;\n\n// =============================================================================\n// VERSIONED API RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Versioned account response schema\n */\nexport const ApiV1AccountResponseSchema = StrictAccountResponseSchema.extend({\n  version: z.literal(\"1.0\"),\n  metadata: z.object({\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    lastModifiedBy: UserIdSchema.optional(),\n    tags: z.array(z.string()).optional(),\n    customFields: z.record(z.string(), z.unknown()).optional(),\n  }),\n}).strict();\n\nexport type ApiV1AccountResponse = z.infer<typeof ApiV1AccountResponseSchema>;\n\n/**\n * Versioned contact response schema\n */\nexport const ApiV1ContactResponseSchema = StrictContactResponseSchema.extend({\n  version: z.literal(\"1.0\"),\n  metadata: z.object({\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    lastModifiedBy: UserIdSchema.optional(),\n    tags: z.array(z.string()).optional(),\n    customFields: z.record(z.string(), z.unknown()).optional(),\n  }),\n}).strict();\n\nexport type ApiV1ContactResponse = z.infer<typeof ApiV1ContactResponseSchema>;\n\n/**\n * Versioned opportunity response schema\n */\nexport const ApiV1OpportunityResponseSchema =\n  StrictOpportunityResponseSchema.extend({\n    version: z.literal(\"1.0\"),\n    metadata: z.object({\n      createdAt: z.string().datetime(),\n      updatedAt: z.string().datetime(),\n      lastModifiedBy: UserIdSchema.optional(),\n      tags: z.array(z.string()).optional(),\n      customFields: z.record(z.string(), z.unknown()).optional(),\n    }),\n  }).strict();\n\nexport type ApiV1OpportunityResponse = z.infer<\n  typeof ApiV1OpportunityResponseSchema\n>;\n\n// =============================================================================\n// STRICT API REQUEST SCHEMAS\n// =============================================================================\n\n/**\n * Strict account creation request schema\n */\nexport const StrictCreateAccountRequestSchema = z\n  .object({\n    name: z.string().min(1).max(200),\n    accountNumber: z.string().max(50).optional(),\n    type: AccountTypeSchema,\n    status: AccountStatusSchema.optional(),\n    industry: z\n      .enum([\n        \"manufacturing\",\n        \"construction\",\n        \"mining\",\n        \"oil_gas\",\n        \"chemical\",\n        \"healthcare\",\n        \"transportation\",\n        \"utilities\",\n        \"government\",\n        \"education\",\n        \"retail\",\n        \"other\",\n      ])\n      .optional(),\n    website: z.string().url().optional(),\n    phone: z.string().optional(),\n    email: z.string().email().optional(),\n    description: z.string().max(2000).optional(),\n    annualRevenue: z.string().optional(),\n    employeeCount: z\n      .enum([\"1-10\", \"11-50\", \"51-200\", \"201-500\", \"500+\"])\n      .optional(),\n    safetyComplianceLevel: z\n      .enum([\"OSHA Compliant\", \"ISO 45001\", \"Custom\", \"Non-Compliant\"])\n      .optional(),\n    billingAddress: z.string().max(500).optional(),\n    shippingAddress: z.string().max(500).optional(),\n    territoryId: TerritoryIdSchema,\n    ownerId: UserIdSchema,\n  })\n  .strict();\n\nexport type StrictCreateAccountRequest = z.infer<\n  typeof StrictCreateAccountRequestSchema\n>;\n\n/**\n * Strict account update request schema\n */\nexport const StrictUpdateAccountRequestSchema =\n  StrictCreateAccountRequestSchema.partial().strict();\n\nexport type StrictUpdateAccountRequest = z.infer<\n  typeof StrictUpdateAccountRequestSchema\n>;\n\n/**\n * Strict contact creation request schema\n */\nexport const StrictCreateContactRequestSchema = z\n  .object({\n    accountId: AccountIdSchema,\n    branchId: z.string().uuid().optional(),\n    ownerId: UserIdSchema,\n    firstName: z.string().min(1).max(50),\n    lastName: z.string().min(1).max(50),\n    email: z.string().email(),\n    phone: z.string().optional(),\n    mobile: z.string().optional(),\n    jobTitle: z.string().max(100).optional(),\n    department: z.string().max(100).optional(),\n    role: z\n      .enum([\n        \"decision_maker\",\n        \"influencer\",\n        \"user\",\n        \"evaluator\",\n        \"champion\",\n        \"gatekeeper\",\n        \"other\",\n      ])\n      .default(\"user\"),\n    status: z.enum([\"active\", \"inactive\", \"do_not_contact\"]).default(\"active\"),\n    isPrimary: z.boolean().default(false),\n    safetyCertifications: z.string().max(500).optional(),\n    notes: z.string().max(2000).optional(),\n  })\n  .strict();\n\nexport type StrictCreateContactRequest = z.infer<\n  typeof StrictCreateContactRequestSchema\n>;\n\n/**\n * Strict contact update request schema\n */\nexport const StrictUpdateContactRequestSchema =\n  StrictCreateContactRequestSchema.partial().strict();\n\nexport type StrictUpdateContactRequest = z.infer<\n  typeof StrictUpdateContactRequestSchema\n>;\n\n/**\n * Strict opportunity creation request schema\n */\nexport const StrictCreateOpportunityRequestSchema = z\n  .object({\n    accountId: AccountIdSchema,\n    contactId: z.string().uuid().optional(),\n    ownerId: UserIdSchema,\n    name: z.string().min(1).max(200),\n    description: z.string().max(2000).optional(),\n    type: z.enum([\n      \"safety_equipment_sale\",\n      \"training_service\",\n      \"consulting_service\",\n      \"maintenance_contract\",\n      \"compliance_assessment\",\n      \"emergency_response_planning\",\n      \"other\",\n    ]),\n    stage: OpportunityStageSchema.optional(),\n    status: OpportunityStatusSchema.optional(),\n    source: z\n      .enum([\n        \"website\",\n        \"referral\",\n        \"cold_call\",\n        \"trade_show\",\n        \"social_media\",\n        \"advertising\",\n        \"other\",\n      ])\n      .optional(),\n    probability: z.enum([\"10\", \"25\", \"50\", \"75\", \"90\"]).default(\"10\"),\n    amount: z.string().optional(),\n    closeDate: z.string().datetime().optional(),\n    nextSteps: z.string().max(1000).optional(),\n    safetyRequirements: z.string().max(1000).optional(),\n    complianceNotes: z.string().max(1000).optional(),\n    notes: z.string().max(2000).optional(),\n  })\n  .strict();\n\nexport type StrictCreateOpportunityRequest = z.infer<\n  typeof StrictCreateOpportunityRequestSchema\n>;\n\n/**\n * Strict opportunity update request schema\n */\nexport const StrictUpdateOpportunityRequestSchema =\n  StrictCreateOpportunityRequestSchema.partial().strict();\n\nexport type StrictUpdateOpportunityRequest = z.infer<\n  typeof StrictUpdateOpportunityRequestSchema\n>;\n\n// =============================================================================\n// STRICT QUERY PARAMETER SCHEMAS\n// =============================================================================\n\n/**\n * Strict pagination schema\n */\nexport const StrictPaginationSchema = z\n  .object({\n    page: z.number().int().min(1).default(1),\n    limit: z.number().int().min(1).max(100).default(20),\n    sortBy: z.string().optional(),\n    sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  })\n  .strict();\n\nexport type StrictPagination = z.infer<typeof StrictPaginationSchema>;\n\n/**\n * Strict search query schema\n */\nexport const StrictSearchQuerySchema = z\n  .object({\n    query: z.string().min(1).max(200),\n    ...StrictPaginationSchema.shape,\n  })\n  .strict();\n\nexport type StrictSearchQuery = z.infer<typeof StrictSearchQuerySchema>;\n\n/**\n * Strict territory-scoped query schema\n */\nexport const StrictTerritoryScopedQuerySchema = z\n  .object({\n    territoryId: TerritoryIdSchema,\n    ...StrictPaginationSchema.shape,\n  })\n  .strict();\n\nexport type StrictTerritoryScopedQuery = z.infer<\n  typeof StrictTerritoryScopedQuerySchema\n>;\n\n/**\n * Strict plant-scoped query schema\n */\nexport const StrictPlantScopedQuerySchema = z\n  .object({\n    plantId: PlantIdSchema,\n    ...StrictPaginationSchema.shape,\n  })\n  .strict();\n\nexport type StrictPlantScopedQuery = z.infer<\n  typeof StrictPlantScopedQuerySchema\n>;\n\n// =============================================================================\n// STRICT ERROR RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Strict error response schema with branded error codes\n */\nexport const StrictErrorResponseSchema = z\n  .object({\n    success: z.literal(false),\n    error: z.object({\n      code: z.enum([\n        \"VALIDATION_ERROR\",\n        \"BUSINESS_ERROR\",\n        \"SYSTEM_ERROR\",\n        \"AUTHENTICATION_ERROR\",\n        \"AUTHORIZATION_ERROR\",\n        \"NOT_FOUND\",\n        \"DUPLICATE\",\n        \"INVALID_STATE\",\n        \"COMPLIANCE_VIOLATION\",\n        \"RATE_LIMIT_EXCEEDED\",\n        \"SERVICE_UNAVAILABLE\",\n        \"INTERNAL_ERROR\",\n      ]),\n      message: z.string().min(1),\n      details: z\n        .array(\n          z.object({\n            field: z.string().optional(),\n            message: z.string(),\n            code: z.string().optional(),\n          })\n        )\n        .optional(),\n      requestId: z.string().optional(),\n      timestamp: z.string().datetime(),\n      path: z.string().optional(),\n      method: z.string().optional(),\n    }),\n    version: ApiVersionSchema,\n  })\n  .strict();\n\nexport type StrictErrorResponse = z.infer<typeof StrictErrorResponseSchema>;\n\n/**\n * Strict success response schema\n */\nexport const StrictSuccessResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: z.unknown(),\n    version: ApiVersionSchema,\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n        pagination: StrictPaginationSchema.optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type StrictSuccessResponse = z.infer<typeof StrictSuccessResponseSchema>;\n\n// =============================================================================\n// STRICT PAGINATED RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Strict paginated response schema\n */\nexport const StrictPaginatedResponseSchema = <T extends z.ZodTypeAny>(\n  dataSchema: T\n) =>\n  z\n    .object({\n      success: z.literal(true),\n      data: z.array(dataSchema),\n      pagination: z.object({\n        page: z.number().int().min(1),\n        limit: z.number().int().min(1).max(100),\n        total: z.number().int().min(0),\n        totalPages: z.number().int().min(0),\n        hasNext: z.boolean(),\n        hasPrev: z.boolean(),\n      }),\n      version: ApiVersionSchema,\n      metadata: z\n        .object({\n          timestamp: z.string().datetime(),\n          requestId: z.string().optional(),\n        })\n        .optional(),\n    })\n    .strict();\n\n/**\n * Strict paginated account response schema\n */\nexport const StrictPaginatedAccountResponseSchema =\n  StrictPaginatedResponseSchema(StrictAccountResponseSchema);\nexport type StrictPaginatedAccountResponse = z.infer<\n  typeof StrictPaginatedAccountResponseSchema\n>;\n\n/**\n * Strict paginated contact response schema\n */\nexport const StrictPaginatedContactResponseSchema =\n  StrictPaginatedResponseSchema(StrictContactResponseSchema);\nexport type StrictPaginatedContactResponse = z.infer<\n  typeof StrictPaginatedContactResponseSchema\n>;\n\n/**\n * Strict paginated opportunity response schema\n */\nexport const StrictPaginatedOpportunityResponseSchema =\n  StrictPaginatedResponseSchema(StrictOpportunityResponseSchema);\nexport type StrictPaginatedOpportunityResponse = z.infer<\n  typeof StrictPaginatedOpportunityResponseSchema\n>;\n\n// =============================================================================\n// STRICT API CONTRACT VALIDATION\n// =============================================================================\n\n/**\n * Validates that a response conforms to the strict API contract\n */\nexport const validateStrictApiContract = <T>(\n  response: unknown,\n  schema: z.ZodSchema<T>\n): T => {\n  try {\n    return schema.parse(response);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      throw new Error(\n        `API contract validation failed: ${error.issues.map(e => e.message).join(\", \")}`\n      );\n    }\n    throw error;\n  }\n};\n\n/**\n * Validates that a request conforms to the strict API contract\n */\nexport const validateStrictApiRequest = <T>(\n  request: unknown,\n  schema: z.ZodSchema<T>\n): T => {\n  try {\n    return schema.parse(request);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      throw new Error(\n        `API request validation failed: ${error.issues.map(e => e.message).join(\", \")}`\n      );\n    }\n    throw error;\n  }\n};\n\n/**\n * Creates a strict API response with proper versioning\n */\nexport const createStrictApiResponse = <T>(\n  data: T,\n  version: ApiVersion = CURRENT_API_VERSION,\n  metadata?: {\n    timestamp?: string;\n    requestId?: string;\n    pagination?: StrictPagination;\n  }\n): StrictSuccessResponse => {\n  return {\n    success: true,\n    data,\n    version,\n    metadata: {\n      timestamp: metadata?.timestamp || new Date().toISOString(),\n      requestId: metadata?.requestId,\n      pagination: metadata?.pagination,\n    },\n  };\n};\n\n/**\n * Creates a strict API error response with proper versioning\n */\nexport const createStrictApiErrorResponse = (\n  code: StrictErrorResponse[\"error\"][\"code\"],\n  message: string,\n  details?: StrictErrorResponse[\"error\"][\"details\"],\n  version: ApiVersion = CURRENT_API_VERSION,\n  metadata?: {\n    requestId?: string;\n    path?: string;\n    method?: string;\n  }\n): StrictErrorResponse => {\n  return {\n    success: false,\n    error: {\n      code,\n      message,\n      details,\n      requestId: metadata?.requestId,\n      timestamp: new Date().toISOString(),\n      path: metadata?.path,\n      method: metadata?.method,\n    },\n    version,\n  };\n};\n\n// =============================================================================\n// STRICT API CONTRACT TESTING\n// =============================================================================\n\n/**\n * Type-safe API contract testing utilities\n */\nexport const createApiContractTest = <T>(\n  schema: z.ZodSchema<T>,\n  testData: T\n): {\n  isValid: boolean;\n  errors: string[];\n  validatedData: T | null;\n} => {\n  try {\n    const validatedData = schema.parse(testData);\n    return {\n      isValid: true,\n      errors: [],\n      validatedData,\n    };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return {\n        isValid: false,\n        errors: error.issues.map(e => e.message),\n        validatedData: null,\n      };\n    }\n    return {\n      isValid: false,\n      errors: [\"Unknown validation error\"],\n      validatedData: null,\n    };\n  }\n};\n\n/**\n * Validates that an API response has no additional properties\n */\nexport const validateNoAdditionalProperties = <T>(\n  response: unknown,\n  schema: z.ZodSchema<T>\n): boolean => {\n  try {\n    const validated = schema.parse(response);\n    const responseKeys = Object.keys(response as object);\n    const schemaKeys = Object.keys(validated as object);\n\n    // Check if response has any keys not in the schema\n    const hasAdditionalProperties = responseKeys.some(\n      key => !schemaKeys.includes(key)\n    );\n\n    return !hasAdditionalProperties;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Validates API contract backward compatibility\n */\nexport const validateApiContractCompatibility = <T>(\n  oldSchema: z.ZodSchema<T>,\n  newSchema: z.ZodSchema<T>,\n  testData: T\n): {\n  isCompatible: boolean;\n  breakingChanges: string[];\n  warnings: string[];\n} => {\n  const breakingChanges: string[] = [];\n  const warnings: string[] = [];\n\n  try {\n    // Validate with old schema\n    const oldResult = oldSchema.parse(testData);\n\n    // Validate with new schema\n    const newResult = newSchema.parse(testData);\n\n    // Check for breaking changes\n    const oldKeys = Object.keys(oldResult as object);\n    const newKeys = Object.keys(newResult as object);\n\n    // Check for removed fields\n    const removedFields = oldKeys.filter(key => !newKeys.includes(key));\n    if (removedFields.length > 0) {\n      breakingChanges.push(`Removed fields: ${removedFields.join(\", \")}`);\n    }\n\n    // Check for type changes\n    for (const key of oldKeys) {\n      if (newKeys.includes(key)) {\n        const oldType = typeof (oldResult as any)[key];\n        const newType = typeof (newResult as any)[key];\n        if (oldType !== newType) {\n          breakingChanges.push(\n            `Type change for field '${key}': ${oldType} -> ${newType}`\n          );\n        }\n      }\n    }\n\n    return {\n      isCompatible: breakingChanges.length === 0,\n      breakingChanges,\n      warnings,\n    };\n  } catch (error) {\n    return {\n      isCompatible: false,\n      breakingChanges: [\"Schema validation failed\"],\n      warnings: [],\n    };\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1257, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/enrollments.ts"],"sourcesContent":["import { pgTable, uuid, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Enums\nexport const enrollmentStatusEnum = pgEnum(\"enrollment_status\", [\n  \"enrolled\",\n  \"in_progress\",\n  \"completed\",\n]);\n\n// Enrollments table - tracks user course enrollments\nexport const enrollments = pgTable(\"enrollments\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id),\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  status: enrollmentStatusEnum(\"status\").default(\"enrolled\").notNull(),\n  enrolledAt: timestamp(\"enrolled_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const enrollmentsRelations = relations(enrollments, ({ one }) => ({\n  user: one(profiles, {\n    fields: [enrollments.userId],\n    references: [profiles.id],\n  }),\n  course: one(courses, {\n    fields: [enrollments.courseId],\n    references: [courses.id],\n  }),\n  plant: one(plants, {\n    fields: [enrollments.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type Enrollment = typeof enrollments.$inferSelect;\nexport type NewEnrollment = typeof enrollments.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAgDA,+DAA+D;AAC/D;AACA;AACA;;;AAhDO,MAAM,uBAAuB,IAAA,+PAAM,EAAC,qBAAqB;IAC9D;IACA;IACA;CACD;AAGM,MAAM,cAAc,IAAA,sPAAO,EAAC,eAAe;IAChD,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE;IAC9B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,QAAQ,qBAAqB,UAAU,OAAO,CAAC,YAAY,OAAO;IAClE,YAAY,IAAA,uQAAS,EAAC,eAAe,UAAU,GAAG,OAAO;IACzD,aAAa,IAAA,uQAAS,EAAC;IACvB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,uBAAuB,IAAA,8OAAS,EAAC,aAAa,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACvE,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,YAAY,MAAM;aAAC;YAC5B,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,YAAY,QAAQ;aAAC;YAC9B,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,YAAY,OAAO;aAAC;YAC7B,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1325, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/progress.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Progress table - tracks user progress through courses\nexport const progress = pgTable(\"progress\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id),\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  progressPercent: integer(\"progress_percent\").default(0).notNull(),\n  currentSection: text(\"current_section\"),\n  lastActiveAt: timestamp(\"last_active_at\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const progressRelations = relations(progress, ({ one }) => ({\n  user: one(profiles, {\n    fields: [progress.userId],\n    references: [profiles.id],\n  }),\n  course: one(courses, {\n    fields: [progress.courseId],\n    references: [courses.id],\n  }),\n  plant: one(plants, {\n    fields: [progress.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type Progress = typeof progress.$inferSelect;\nexport type NewProgress = typeof progress.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyCA,+DAA+D;AAC/D;AACA;AACA;;;AAzCO,MAAM,WAAW,IAAA,sPAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE;IAC9B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,iBAAiB,IAAA,mQAAO,EAAC,oBAAoB,OAAO,CAAC,GAAG,OAAO;IAC/D,gBAAgB,IAAA,6PAAI,EAAC;IACrB,cAAc,IAAA,uQAAS,EAAC,kBAAkB,UAAU,GAAG,OAAO;IAC9D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,oBAAoB,IAAA,8OAAS,EAAC,UAAU,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACjE,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,SAAS,MAAM;aAAC;YACzB,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,SAAS,QAAQ;aAAC;YAC3B,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,SAAS,OAAO;aAAC;YAC1B,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1387, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/activity-events.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  jsonb,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Enums\nexport const eventTypeEnum = pgEnum(\"event_type\", [\n  \"view_section\",\n  \"start_course\",\n  \"complete_course\",\n]);\n\n// Activity Events table - tracks user activity within courses\nexport const activityEvents = pgTable(\"activity_events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id),\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  eventType: eventTypeEnum(\"event_type\").notNull(),\n  meta: jsonb(\"meta\"),\n  occurredAt: timestamp(\"occurred_at\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const activityEventsRelations = relations(activityEvents, ({ one }) => ({\n  user: one(profiles, {\n    fields: [activityEvents.userId],\n    references: [profiles.id],\n  }),\n  course: one(courses, {\n    fields: [activityEvents.courseId],\n    references: [courses.id],\n  }),\n  plant: one(plants, {\n    fields: [activityEvents.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type ActivityEvent = typeof activityEvents.$inferSelect;\nexport type NewActivityEvent = typeof activityEvents.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AA+CA,+DAA+D;AAC/D;AACA;AACA;;;AA/CO,MAAM,gBAAgB,IAAA,+PAAM,EAAC,cAAc;IAChD;IACA;IACA;CACD;AAGM,MAAM,iBAAiB,IAAA,sPAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE;IAC9B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,WAAW,cAAc,cAAc,OAAO;IAC9C,MAAM,IAAA,+PAAK,EAAC;IACZ,YAAY,IAAA,uQAAS,EAAC,eAAe,UAAU,GAAG,OAAO;IACzD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,0BAA0B,IAAA,8OAAS,EAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC7E,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,eAAe,MAAM;aAAC;YAC/B,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,eAAe,QAAQ;aAAC;YACjC,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,eAAe,OAAO;aAAC;YAChC,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1455, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/question-events.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  jsonb,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Question Events table - tracks user responses to quiz questions\nexport const questionEvents = pgTable(\"question_events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id),\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  sectionKey: text(\"section_key\").notNull(),\n  questionKey: text(\"question_key\").notNull(),\n  isCorrect: boolean(\"is_correct\").notNull(),\n  attemptIndex: integer(\"attempt_index\").default(1).notNull(),\n  responseMeta: jsonb(\"response_meta\"),\n  answeredAt: timestamp(\"answered_at\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const questionEventsRelations = relations(questionEvents, ({ one }) => ({\n  user: one(profiles, {\n    fields: [questionEvents.userId],\n    references: [profiles.id],\n  }),\n  course: one(courses, {\n    fields: [questionEvents.courseId],\n    references: [courses.id],\n  }),\n  plant: one(plants, {\n    fields: [questionEvents.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type QuestionEvent = typeof questionEvents.$inferSelect;\nexport type NewQuestionEvent = typeof questionEvents.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AA2CA,+DAA+D;AAC/D;AACA;AACA;;;AA3CO,MAAM,iBAAiB,IAAA,sPAAO,EAAC,mBAAmB;IACvD,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE;IAC9B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,YAAY,IAAA,6PAAI,EAAC,eAAe,OAAO;IACvC,aAAa,IAAA,6PAAI,EAAC,gBAAgB,OAAO;IACzC,WAAW,IAAA,mQAAO,EAAC,cAAc,OAAO;IACxC,cAAc,IAAA,mQAAO,EAAC,iBAAiB,OAAO,CAAC,GAAG,OAAO;IACzD,cAAc,IAAA,+PAAK,EAAC;IACpB,YAAY,IAAA,uQAAS,EAAC,eAAe,UAAU,GAAG,OAAO;IACzD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,0BAA0B,IAAA,8OAAS,EAAC,gBAAgB,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC7E,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,eAAe,MAAM;aAAC;YAC/B,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,eAAe,QAAQ;aAAC;YACjC,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,eAAe,OAAO;aAAC;YAChC,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1521, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/courses.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Courses table - safety training courses\nexport const courses = pgTable(\"courses\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  slug: text(\"slug\").notNull().unique(),\n  title: text(\"title\").notNull(),\n  version: text(\"version\").default(\"1.0\").notNull(),\n  isPublished: boolean(\"is_published\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const coursesRelations = relations(courses, ({ many }) => ({\n  enrollments: many(enrollments),\n  progress: many(progress),\n  activityEvents: many(activityEvents),\n  questionEvents: many(questionEvents),\n}));\n\n// Type exports\nexport type Course = typeof courses.$inferSelect;\nexport type NewCourse = typeof courses.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { enrollments } from \"./enrollments\";\nimport { progress } from \"./progress\";\nimport { activityEvents } from \"./activity-events\";\nimport { questionEvents } from \"./question-events\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA,+DAA+D;AAC/D;AACA;AACA;AACA;;;AA1BO,MAAM,UAAU,IAAA,sPAAO,EAAC,WAAW;IACxC,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,SAAS,IAAA,6PAAI,EAAC,WAAW,OAAO,CAAC,OAAO,OAAO;IAC/C,aAAa,IAAA,mQAAO,EAAC,gBAAgB,OAAO,CAAC,OAAO,OAAO;IAC3D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,mBAAmB,IAAA,8OAAS,EAAC,SAAS,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAChE,aAAa,KAAK,mLAAW;QAC7B,UAAU,KAAK,6KAAQ;QACvB,gBAAgB,KAAK,6LAAc;QACnC,gBAAgB,KAAK,6LAAc;IACrC,CAAC","debugId":null}},
    {"offset": {"line": 1563, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/admin-roles.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Enums\nexport const adminRoleEnum = pgEnum(\"admin_role\", [\n  \"hr_admin\",\n  \"dev_admin\",\n  \"plant_manager\",\n]);\n\n// Admin Roles table - manages user administrative permissions\nexport const adminRoles = pgTable(\"admin_roles\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => profiles.id),\n  role: adminRoleEnum(\"role\").notNull(),\n  plantId: uuid(\"plant_id\").references(() => plants.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const adminRolesRelations = relations(adminRoles, ({ one }) => ({\n  user: one(profiles, {\n    fields: [adminRoles.userId],\n    references: [profiles.id],\n  }),\n  plant: one(plants, {\n    fields: [adminRoles.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type AdminRole = typeof adminRoles.$inferSelect;\nexport type NewAdminRole = typeof adminRoles.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { plants } from \"./plants\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAqCA,+DAA+D;AAC/D;AACA;;;AApCO,MAAM,gBAAgB,IAAA,+PAAM,EAAC,cAAc;IAChD;IACA;IACA;CACD;AAGM,MAAM,aAAa,IAAA,sPAAO,EAAC,eAAe;IAC/C,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,MAAM,cAAc,QAAQ,OAAO;IACnC,SAAS,IAAA,6PAAI,EAAC,YAAY,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,sBAAsB,IAAA,8OAAS,EAAC,YAAY,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACrE,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,WAAW,MAAM;aAAC;YAC3B,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;QACA,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,WAAW,OAAO;aAAC;YAC5B,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1618, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/plants.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Plants table - represents different plant/facility locations\nexport const plants = pgTable(\"plants\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: text(\"name\").notNull().unique(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const plantsRelations = relations(plants, ({ many }) => ({\n  profiles: many(profiles),\n  courses: many(courses),\n  enrollments: many(enrollments),\n  progress: many(progress),\n  activityEvents: many(activityEvents),\n  questionEvents: many(questionEvents),\n  adminRoles: many(adminRoles),\n}));\n\n// Type exports\nexport type Plant = typeof plants.$inferSelect;\nexport type NewPlant = typeof plants.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\nimport { courses } from \"./courses\";\nimport { enrollments } from \"./enrollments\";\nimport { progress } from \"./progress\";\nimport { activityEvents } from \"./activity-events\";\nimport { questionEvents } from \"./question-events\";\nimport { adminRoles } from \"./admin-roles\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA0BA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;;;AA9BO,MAAM,SAAS,IAAA,sPAAO,EAAC,UAAU;IACtC,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,kBAAkB,IAAA,8OAAS,EAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAC9D,UAAU,KAAK,6KAAQ;QACvB,SAAS,KAAK,2KAAO;QACrB,aAAa,KAAK,mLAAW;QAC7B,UAAU,KAAK,6KAAQ;QACvB,gBAAgB,KAAK,6LAAc;QACnC,gBAAgB,KAAK,6LAAc;QACnC,YAAY,KAAK,qLAAU;IAC7B,CAAC","debugId":null}},
    {"offset": {"line": 1667, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/profiles.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { plants } from \"./plants\";\n\n// Enums\nexport const userStatusEnum = pgEnum(\"user_status\", [\"active\", \"suspended\"]);\n\n// Profiles table - extends Supabase auth.users\nexport const profiles = pgTable(\"profiles\", {\n  id: uuid(\"id\").primaryKey(), // References auth.users.id\n  plantId: uuid(\"plant_id\")\n    .notNull()\n    .references(() => plants.id),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: text(\"email\").notNull(),\n  jobTitle: text(\"job_title\"),\n  status: userStatusEnum(\"status\").default(\"active\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const profilesRelations = relations(profiles, ({ one, many }) => ({\n  plant: one(plants, {\n    fields: [profiles.plantId],\n    references: [plants.id],\n  }),\n}));\n\n// Type exports\nexport type Profile = typeof profiles.$inferSelect;\nexport type NewProfile = typeof profiles.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;;;;AAGO,MAAM,iBAAiB,IAAA,+PAAM,EAAC,eAAe;IAAC;IAAU;CAAY;AAGpE,MAAM,WAAW,IAAA,sPAAO,EAAC,YAAY;IAC1C,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU;IACzB,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yKAAM,CAAC,EAAE;IAC7B,WAAW,IAAA,6PAAI,EAAC,cAAc,OAAO;IACrC,UAAU,IAAA,6PAAI,EAAC,aAAa,OAAO;IACnC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,UAAU,IAAA,6PAAI,EAAC;IACf,QAAQ,eAAe,UAAU,OAAO,CAAC,UAAU,OAAO;IAC1D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,oBAAoB,IAAA,8OAAS,EAAC,UAAU,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QACvE,OAAO,IAAI,yKAAM,EAAE;YACjB,QAAQ;gBAAC,SAAS,OAAO;aAAC;YAC1B,YAAY;gBAAC,yKAAM,CAAC,EAAE;aAAC;QACzB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1714, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/audit-log.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Audit Log table - tracks all database changes for compliance\nexport const auditLog = pgTable(\"audit_log\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  tableName: text(\"table_name\").notNull(),\n  operation: text(\"operation\").notNull(),\n  oldData: jsonb(\"old_data\"),\n  newData: jsonb(\"new_data\"),\n  userId: uuid(\"user_id\").references(() => profiles.id),\n  occurredAt: timestamp(\"occurred_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const auditLogRelations = relations(auditLog, ({ one }) => ({\n  user: one(profiles, {\n    fields: [auditLog.userId],\n    references: [profiles.id],\n  }),\n}));\n\n// Type exports\nexport type AuditLog = typeof auditLog.$inferSelect;\nexport type NewAuditLog = typeof auditLog.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { profiles } from \"./profiles\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA,+DAA+D;AAC/D;;;AAvBO,MAAM,WAAW,IAAA,sPAAO,EAAC,aAAa;IAC3C,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cAAc,OAAO;IACrC,WAAW,IAAA,6PAAI,EAAC,aAAa,OAAO;IACpC,SAAS,IAAA,+PAAK,EAAC;IACf,SAAS,IAAA,+PAAK,EAAC;IACf,QAAQ,IAAA,6PAAI,EAAC,WAAW,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IACpD,YAAY,IAAA,uQAAS,EAAC,eAAe,UAAU,GAAG,OAAO;AAC3D;AAGO,MAAM,oBAAoB,IAAA,8OAAS,EAAC,UAAU,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACjE,MAAM,IAAI,6KAAQ,EAAE;YAClB,QAAQ;gBAAC,SAAS,MAAM;aAAC;YACzB,YAAY;gBAAC,6KAAQ,CAAC,EAAE;aAAC;QAC3B;IACF,CAAC","debugId":null}},
    {"offset": {"line": 1754, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/territories.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  index,\n} from \"drizzle-orm/pg-core\";\n\n// Territories table - regional foundation for safety operations\nexport const territories = pgTable(\n  \"territories\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    name: text(\"name\").notNull().unique(),\n    code: text(\"code\").notNull().unique(), // e.g., \"NORTH\", \"SOUTH\", \"EAST\", \"WEST\"\n    description: text(\"description\"),\n    region: text(\"region\"), // e.g., \"North America\", \"Europe\", \"Asia-Pacific\"\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    nameIdx: index(\"territories_name_idx\").on(table.name),\n    codeIdx: index(\"territories_code_idx\").on(table.code),\n    regionIdx: index(\"territories_region_idx\").on(table.region),\n    activeIdx: index(\"territories_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Territory = typeof territories.$inferSelect;\nexport type NewTerritory = typeof territories.$inferInsert;\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUO,MAAM,cAAc,IAAA,sPAAO,EAChC,eACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO,GAAG,MAAM;IACnC,aAAa,IAAA,6PAAI,EAAC;IAClB,QAAQ,IAAA,6PAAI,EAAC;IACb,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,SAAS,IAAA,sPAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,IAAI;QACpD,SAAS,IAAA,sPAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,IAAI;QACpD,WAAW,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,MAAM;QAC1D,WAAW,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,QAAQ;IAC9D,CAAC","debugId":null}},
    {"offset": {"line": 1784, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/user-profiles.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { territories } from \"./territories\";\nimport { userStatusEnum } from \"./profiles\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\n  \"safety_admin\",\n  \"safety_manager\",\n  \"safety_coordinator\",\n  \"safety_instructor\",\n  \"safety_rep\",\n  \"plant_manager\",\n  \"hr_admin\",\n  \"employee\",\n]);\n\n// userStatusEnum is exported from profiles.ts to avoid duplication\n\n// User Profiles table - extends Supabase auth.users for safety operations\nexport const userProfiles = pgTable(\n  \"user_profiles\",\n  {\n    id: uuid(\"id\").primaryKey(), // References auth.users.id\n    authUserId: uuid(\"auth_user_id\").notNull().unique(), // Direct reference to auth.users.id\n    territoryId: uuid(\"territory_id\")\n      .notNull()\n      .references(() => territories.id),\n    firstName: text(\"first_name\").notNull(),\n    lastName: text(\"last_name\").notNull(),\n    email: text(\"email\").notNull().unique(),\n    phone: text(\"phone\"),\n    jobTitle: text(\"job_title\"),\n    department: text(\"department\"),\n    role: userRoleEnum(\"role\").default(\"employee\").notNull(),\n    status: userStatusEnum(\"status\").default(\"active\").notNull(),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    lastLoginAt: timestamp(\"last_login_at\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\"), // References another user_profiles.id\n  },\n  table => ({\n    authUserIdIdx: index(\"user_profiles_auth_user_id_idx\").on(table.authUserId),\n    territoryIdIdx: index(\"user_profiles_territory_id_idx\").on(\n      table.territoryId\n    ),\n    emailIdx: index(\"user_profiles_email_idx\").on(table.email),\n    roleIdx: index(\"user_profiles_role_idx\").on(table.role),\n    statusIdx: index(\"user_profiles_status_idx\").on(table.status),\n    activeIdx: index(\"user_profiles_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type UserProfile = typeof userProfiles.$inferSelect;\nexport type NewUserProfile = typeof userProfiles.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;;;;AAGO,MAAM,eAAe,IAAA,+PAAM,EAAC,aAAa;IAC9C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAKM,MAAM,eAAe,IAAA,sPAAO,EACjC,iBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU;IACzB,YAAY,IAAA,6PAAI,EAAC,gBAAgB,OAAO,GAAG,MAAM;IACjD,aAAa,IAAA,6PAAI,EAAC,gBACf,OAAO,GACP,UAAU,CAAC,IAAM,mLAAW,CAAC,EAAE;IAClC,WAAW,IAAA,6PAAI,EAAC,cAAc,OAAO;IACrC,UAAU,IAAA,6PAAI,EAAC,aAAa,OAAO;IACnC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO,GAAG,MAAM;IACrC,OAAO,IAAA,6PAAI,EAAC;IACZ,UAAU,IAAA,6PAAI,EAAC;IACf,YAAY,IAAA,6PAAI,EAAC;IACjB,MAAM,aAAa,QAAQ,OAAO,CAAC,YAAY,OAAO;IACtD,QAAQ,IAAA,mLAAc,EAAC,UAAU,OAAO,CAAC,UAAU,OAAO;IAC1D,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,aAAa,IAAA,uQAAS,EAAC;IACvB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,6PAAI,EAAC;AAClB,GACA,CAAA,QAAS,CAAC;QACR,eAAe,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CAAC,MAAM,UAAU;QAC1E,gBAAgB,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CACxD,MAAM,WAAW;QAEnB,UAAU,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,KAAK;QACzD,SAAS,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,IAAI;QACtD,WAAW,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,MAAM;QAC5D,WAAW,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,QAAQ;IAChE,CAAC","debugId":null}},
    {"offset": {"line": 1841, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/accounts.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { territories } from \"./territories\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const accountTypeEnum = pgEnum(\"account_type\", [\n  \"safety_equipment_customer\",\n  \"training_client\",\n  \"consulting_client\",\n  \"maintenance_client\",\n  \"partner\",\n  \"vendor\",\n]);\n\nexport const accountStatusEnum = pgEnum(\"account_status\", [\n  \"active\",\n  \"inactive\",\n  \"suspended\",\n  \"closed\",\n]);\n\nexport const industryEnum = pgEnum(\"industry\", [\n  \"manufacturing\",\n  \"construction\",\n  \"oil_gas\",\n  \"chemical\",\n  \"mining\",\n  \"utilities\",\n  \"transportation\",\n  \"healthcare\",\n  \"agriculture\",\n  \"other\",\n]);\n\n// Accounts table - safety equipment and service customers\nexport const accounts = pgTable(\n  \"accounts\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    territoryId: uuid(\"territory_id\")\n      .notNull()\n      .references(() => territories.id),\n    ownerId: uuid(\"owner_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    name: text(\"name\").notNull(),\n    accountNumber: text(\"account_number\").unique(),\n    type: accountTypeEnum(\"type\")\n      .default(\"safety_equipment_customer\")\n      .notNull(),\n    status: accountStatusEnum(\"status\").default(\"active\").notNull(),\n    industry: industryEnum(\"industry\"),\n    website: text(\"website\"),\n    phone: text(\"phone\"),\n    email: text(\"email\"),\n    description: text(\"description\"),\n    annualRevenue: decimal(\"annual_revenue\", { precision: 15, scale: 2 }),\n    employeeCount: text(\"employee_count\"), // e.g., \"1-10\", \"11-50\", \"51-200\", \"201-500\", \"500+\"\n    safetyComplianceLevel: text(\"safety_compliance_level\"), // e.g., \"OSHA Compliant\", \"ISO 45001\", \"Custom\"\n    billingAddress: text(\"billing_address\"),\n    shippingAddress: text(\"shipping_address\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\")\n      .notNull()\n      .references(() => userProfiles.id),\n  },\n  table => ({\n    territoryIdIdx: index(\"accounts_territory_id_idx\").on(table.territoryId),\n    ownerIdIdx: index(\"accounts_owner_id_idx\").on(table.ownerId),\n    nameIdx: index(\"accounts_name_idx\").on(table.name),\n    accountNumberIdx: index(\"accounts_account_number_idx\").on(\n      table.accountNumber\n    ),\n    typeIdx: index(\"accounts_type_idx\").on(table.type),\n    statusIdx: index(\"accounts_status_idx\").on(table.status),\n    industryIdx: index(\"accounts_industry_idx\").on(table.industry),\n    activeIdx: index(\"accounts_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Account = typeof accounts.$inferSelect;\nexport type NewAccount = typeof accounts.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;AAGO,MAAM,kBAAkB,IAAA,+PAAM,EAAC,gBAAgB;IACpD;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,oBAAoB,IAAA,+PAAM,EAAC,kBAAkB;IACxD;IACA;IACA;IACA;CACD;AAEM,MAAM,eAAe,IAAA,+PAAM,EAAC,YAAY;IAC7C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,aAAa,IAAA,6PAAI,EAAC,gBACf,OAAO,GACP,UAAU,CAAC,IAAM,mLAAW,CAAC,EAAE;IAClC,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,eAAe,IAAA,6PAAI,EAAC,kBAAkB,MAAM;IAC5C,MAAM,gBAAgB,QACnB,OAAO,CAAC,6BACR,OAAO;IACV,QAAQ,kBAAkB,UAAU,OAAO,CAAC,UAAU,OAAO;IAC7D,UAAU,aAAa;IACvB,SAAS,IAAA,6PAAI,EAAC;IACd,OAAO,IAAA,6PAAI,EAAC;IACZ,OAAO,IAAA,6PAAI,EAAC;IACZ,aAAa,IAAA,6PAAI,EAAC;IAClB,eAAe,IAAA,mQAAO,EAAC,kBAAkB;QAAE,WAAW;QAAI,OAAO;IAAE;IACnE,eAAe,IAAA,6PAAI,EAAC;IACpB,uBAAuB,IAAA,6PAAI,EAAC;IAC5B,gBAAgB,IAAA,6PAAI,EAAC;IACrB,iBAAiB,IAAA,6PAAI,EAAC;IACtB,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;AACrC,GACA,CAAA,QAAS,CAAC;QACR,gBAAgB,IAAA,sPAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,WAAW;QACvE,YAAY,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,OAAO;QAC3D,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,kBAAkB,IAAA,sPAAK,EAAC,+BAA+B,EAAE,CACvD,MAAM,aAAa;QAErB,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,aAAa,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,QAAQ;QAC7D,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 1929, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/branches.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\n\n// Branches table - physical locations for safety operations\nexport const branches = pgTable(\n  \"branches\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    name: text(\"name\").notNull(),\n    branchCode: text(\"branch_code\"), // Internal code for the branch\n    address: text(\"address\").notNull(),\n    city: text(\"city\").notNull(),\n    state: text(\"state\").notNull(),\n    postalCode: text(\"postal_code\").notNull(),\n    country: text(\"country\").default(\"US\").notNull(),\n    phone: text(\"phone\"),\n    email: text(\"email\"),\n    contactPerson: text(\"contact_person\"),\n    safetyManager: text(\"safety_manager\"), // Primary safety contact\n    isPrimary: boolean(\"is_primary\").default(false).notNull(), // Primary branch for the account\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    accountIdIdx: index(\"branches_account_id_idx\").on(table.accountId),\n    nameIdx: index(\"branches_name_idx\").on(table.name),\n    branchCodeIdx: index(\"branches_branch_code_idx\").on(table.branchCode),\n    cityIdx: index(\"branches_city_idx\").on(table.city),\n    stateIdx: index(\"branches_state_idx\").on(table.state),\n    primaryIdx: index(\"branches_primary_idx\").on(table.isPrimary),\n    activeIdx: index(\"branches_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Branch = typeof branches.$inferSelect;\nexport type NewBranch = typeof branches.$inferInsert;\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;AAGO,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,YAAY,IAAA,6PAAI,EAAC;IACjB,SAAS,IAAA,6PAAI,EAAC,WAAW,OAAO;IAChC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,YAAY,IAAA,6PAAI,EAAC,eAAe,OAAO;IACvC,SAAS,IAAA,6PAAI,EAAC,WAAW,OAAO,CAAC,MAAM,OAAO;IAC9C,OAAO,IAAA,6PAAI,EAAC;IACZ,OAAO,IAAA,6PAAI,EAAC;IACZ,eAAe,IAAA,6PAAI,EAAC;IACpB,eAAe,IAAA,6PAAI,EAAC;IACpB,WAAW,IAAA,mQAAO,EAAC,cAAc,OAAO,CAAC,OAAO,OAAO;IACvD,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,eAAe,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,UAAU;QACpE,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,UAAU,IAAA,sPAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,KAAK;QACpD,YAAY,IAAA,sPAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,SAAS;QAC5D,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 1973, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/contacts.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { branches } from \"./branches\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const contactRoleEnum = pgEnum(\"contact_role\", [\n  \"safety_manager\",\n  \"safety_coordinator\",\n  \"safety_instructor\",\n  \"hr_manager\",\n  \"plant_manager\",\n  \"purchasing_manager\",\n  \"decision_maker\",\n  \"influencer\",\n  \"user\",\n  \"other\",\n]);\n\nexport const contactStatusEnum = pgEnum(\"contact_status\", [\n  \"active\",\n  \"inactive\",\n  \"do_not_contact\",\n]);\n\n// Contacts table - individual people in safety operations\nexport const contacts = pgTable(\n  \"contacts\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    branchId: uuid(\"branch_id\").references(() => branches.id), // Optional - may not be assigned to specific branch\n    ownerId: uuid(\"owner_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    firstName: text(\"first_name\").notNull(),\n    lastName: text(\"last_name\").notNull(),\n    email: text(\"email\").notNull(),\n    phone: text(\"phone\"),\n    mobile: text(\"mobile\"),\n    jobTitle: text(\"job_title\"),\n    department: text(\"department\"),\n    role: contactRoleEnum(\"role\").default(\"user\").notNull(),\n    status: contactStatusEnum(\"status\").default(\"active\").notNull(),\n    isPrimary: boolean(\"is_primary\").default(false).notNull(), // Primary contact for the account\n    safetyCertifications: text(\"safety_certifications\"), // e.g., \"OSHA 30\", \"CSP\", \"ASP\"\n    notes: text(\"notes\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\")\n      .notNull()\n      .references(() => userProfiles.id),\n  },\n  table => ({\n    accountIdIdx: index(\"contacts_account_id_idx\").on(table.accountId),\n    branchIdIdx: index(\"contacts_branch_id_idx\").on(table.branchId),\n    ownerIdIdx: index(\"contacts_owner_id_idx\").on(table.ownerId),\n    emailIdx: index(\"contacts_email_idx\").on(table.email),\n    nameIdx: index(\"contacts_name_idx\").on(table.firstName, table.lastName),\n    roleIdx: index(\"contacts_role_idx\").on(table.role),\n    statusIdx: index(\"contacts_status_idx\").on(table.status),\n    primaryIdx: index(\"contacts_primary_idx\").on(table.isPrimary),\n    activeIdx: index(\"contacts_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Contact = typeof contacts.$inferSelect;\nexport type NewContact = typeof contacts.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;;;;;AAGO,MAAM,kBAAkB,IAAA,+PAAM,EAAC,gBAAgB;IACpD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,oBAAoB,IAAA,+PAAM,EAAC,kBAAkB;IACxD;IACA;IACA;CACD;AAGM,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,UAAU,IAAA,6PAAI,EAAC,aAAa,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IACxD,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,WAAW,IAAA,6PAAI,EAAC,cAAc,OAAO;IACrC,UAAU,IAAA,6PAAI,EAAC,aAAa,OAAO;IACnC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,OAAO,IAAA,6PAAI,EAAC;IACZ,QAAQ,IAAA,6PAAI,EAAC;IACb,UAAU,IAAA,6PAAI,EAAC;IACf,YAAY,IAAA,6PAAI,EAAC;IACjB,MAAM,gBAAgB,QAAQ,OAAO,CAAC,QAAQ,OAAO;IACrD,QAAQ,kBAAkB,UAAU,OAAO,CAAC,UAAU,OAAO;IAC7D,WAAW,IAAA,mQAAO,EAAC,cAAc,OAAO,CAAC,OAAO,OAAO;IACvD,sBAAsB,IAAA,6PAAI,EAAC;IAC3B,OAAO,IAAA,6PAAI,EAAC;IACZ,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;AACrC,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,aAAa,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,QAAQ;QAC9D,YAAY,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,OAAO;QAC3D,UAAU,IAAA,sPAAK,EAAC,sBAAsB,EAAE,CAAC,MAAM,KAAK;QACpD,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,SAAS,EAAE,MAAM,QAAQ;QACtE,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,YAAY,IAAA,sPAAK,EAAC,wBAAwB,EAAE,CAAC,MAAM,SAAS;QAC5D,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 2048, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/activity-logs.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { contacts } from \"./contacts\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const activityTypeEnum = pgEnum(\"activity_type\", [\n  \"safety_consultation\",\n  \"equipment_demo\",\n  \"training_session\",\n  \"safety_audit\",\n  \"compliance_review\",\n  \"incident_follow_up\",\n  \"proposal_presentation\",\n  \"follow_up_call\",\n  \"site_visit\",\n  \"note\",\n  \"task\",\n  \"other\",\n]);\n\nexport const activityStatusEnum = pgEnum(\"activity_status\", [\n  \"completed\",\n  \"pending\",\n  \"cancelled\",\n  \"rescheduled\",\n]);\n\nexport const activityPriorityEnum = pgEnum(\"activity_priority\", [\n  \"low\",\n  \"medium\",\n  \"high\",\n  \"urgent\",\n]);\n\n// Activity Logs table - safety-related activities\nexport const activityLogs = pgTable(\n  \"activity_logs\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\").references(() => accounts.id), // Optional - some activities may not be account-specific\n    contactId: uuid(\"contact_id\").references(() => contacts.id), // Optional - some activities may not be contact-specific\n    userId: uuid(\"user_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    type: activityTypeEnum(\"type\").notNull(),\n    subject: text(\"subject\").notNull(),\n    description: text(\"description\"),\n    status: activityStatusEnum(\"status\").default(\"completed\").notNull(),\n    priority: activityPriorityEnum(\"priority\").default(\"medium\").notNull(),\n    scheduledAt: timestamp(\"scheduled_at\"), // For future activities\n    completedAt: timestamp(\"completed_at\"), // When the activity was completed\n    duration: text(\"duration\"), // e.g., \"30 minutes\", \"1 hour\"\n    outcome: text(\"outcome\"), // Result of the activity\n    nextSteps: text(\"next_steps\"), // Follow-up actions\n    safetyNotes: text(\"safety_notes\"), // Safety-specific observations\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    accountIdIdx: index(\"activity_logs_account_id_idx\").on(table.accountId),\n    contactIdIdx: index(\"activity_logs_contact_id_idx\").on(table.contactId),\n    userIdIdx: index(\"activity_logs_user_id_idx\").on(table.userId),\n    typeIdx: index(\"activity_logs_type_idx\").on(table.type),\n    statusIdx: index(\"activity_logs_status_idx\").on(table.status),\n    priorityIdx: index(\"activity_logs_priority_idx\").on(table.priority),\n    scheduledAtIdx: index(\"activity_logs_scheduled_at_idx\").on(\n      table.scheduledAt\n    ),\n    completedAtIdx: index(\"activity_logs_completed_at_idx\").on(\n      table.completedAt\n    ),\n    activeIdx: index(\"activity_logs_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type NewActivityLog = typeof activityLogs.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;;;;;AAGO,MAAM,mBAAmB,IAAA,+PAAM,EAAC,iBAAiB;IACtD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,qBAAqB,IAAA,+PAAM,EAAC,mBAAmB;IAC1D;IACA;IACA;IACA;CACD;AAEM,MAAM,uBAAuB,IAAA,+PAAM,EAAC,qBAAqB;IAC9D;IACA;IACA;IACA;CACD;AAGM,MAAM,eAAe,IAAA,sPAAO,EACjC,iBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cAAc,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC1D,WAAW,IAAA,6PAAI,EAAC,cAAc,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC1D,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,MAAM,iBAAiB,QAAQ,OAAO;IACtC,SAAS,IAAA,6PAAI,EAAC,WAAW,OAAO;IAChC,aAAa,IAAA,6PAAI,EAAC;IAClB,QAAQ,mBAAmB,UAAU,OAAO,CAAC,aAAa,OAAO;IACjE,UAAU,qBAAqB,YAAY,OAAO,CAAC,UAAU,OAAO;IACpE,aAAa,IAAA,uQAAS,EAAC;IACvB,aAAa,IAAA,uQAAS,EAAC;IACvB,UAAU,IAAA,6PAAI,EAAC;IACf,SAAS,IAAA,6PAAI,EAAC;IACd,WAAW,IAAA,6PAAI,EAAC;IAChB,aAAa,IAAA,6PAAI,EAAC;IAClB,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;QACtE,cAAc,IAAA,sPAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,SAAS;QACtE,WAAW,IAAA,sPAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,MAAM;QAC7D,SAAS,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,IAAI;QACtD,WAAW,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,MAAM;QAC5D,aAAa,IAAA,sPAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,QAAQ;QAClE,gBAAgB,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CACxD,MAAM,WAAW;QAEnB,gBAAgB,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CACxD,MAAM,WAAW;QAEnB,WAAW,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,QAAQ;IAChE,CAAC","debugId":null}},
    {"offset": {"line": 2132, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/opportunities.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { contacts } from \"./contacts\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const opportunityStageEnum = pgEnum(\"opportunity_stage\", [\n  \"prospecting\",\n  \"qualification\",\n  \"needs_analysis\",\n  \"proposal\",\n  \"negotiation\",\n  \"closed_won\",\n  \"closed_lost\",\n]);\n\nexport const opportunityStatusEnum = pgEnum(\"opportunity_status\", [\n  \"open\",\n  \"closed\",\n  \"cancelled\",\n]);\n\nexport const opportunitySourceEnum = pgEnum(\"opportunity_source\", [\n  \"inbound\",\n  \"outbound\",\n  \"referral\",\n  \"website\",\n  \"trade_show\",\n  \"safety_conference\",\n  \"cold_call\",\n  \"other\",\n]);\n\nexport const opportunityTypeEnum = pgEnum(\"opportunity_type\", [\n  \"safety_equipment\",\n  \"safety_training\",\n  \"safety_consulting\",\n  \"safety_audit\",\n  \"compliance_services\",\n  \"maintenance_contract\",\n  \"other\",\n]);\n\nexport const probabilityEnum = pgEnum(\"probability\", [\n  \"10\",\n  \"20\",\n  \"30\",\n  \"40\",\n  \"50\",\n  \"60\",\n  \"70\",\n  \"80\",\n  \"90\",\n  \"100\",\n]);\n\n// Opportunities table - safety equipment and services sales pipeline\nexport const opportunities = pgTable(\n  \"opportunities\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    contactId: uuid(\"contact_id\").references(() => contacts.id), // Primary contact for this opportunity\n    ownerId: uuid(\"owner_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    name: text(\"name\").notNull(),\n    description: text(\"description\"),\n    type: opportunityTypeEnum(\"type\").notNull(),\n    stage: opportunityStageEnum(\"stage\").default(\"prospecting\").notNull(),\n    status: opportunityStatusEnum(\"status\").default(\"open\").notNull(),\n    source: opportunitySourceEnum(\"source\"),\n    probability: probabilityEnum(\"probability\").default(\"10\").notNull(),\n    amount: decimal(\"amount\", { precision: 15, scale: 2 }), // Expected deal value\n    closeDate: timestamp(\"close_date\"), // Expected close date\n    actualCloseDate: timestamp(\"actual_close_date\"), // Actual close date\n    lostReason: text(\"lost_reason\"), // Reason if opportunity was lost\n    nextSteps: text(\"next_steps\"), // Next actions\n    safetyRequirements: text(\"safety_requirements\"), // Specific safety needs\n    complianceNotes: text(\"compliance_notes\"), // Compliance-related notes\n    notes: text(\"notes\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\")\n      .notNull()\n      .references(() => userProfiles.id),\n  },\n  table => ({\n    accountIdIdx: index(\"opportunities_account_id_idx\").on(table.accountId),\n    contactIdIdx: index(\"opportunities_contact_id_idx\").on(table.contactId),\n    ownerIdIdx: index(\"opportunities_owner_id_idx\").on(table.ownerId),\n    nameIdx: index(\"opportunities_name_idx\").on(table.name),\n    typeIdx: index(\"opportunities_type_idx\").on(table.type),\n    stageIdx: index(\"opportunities_stage_idx\").on(table.stage),\n    statusIdx: index(\"opportunities_status_idx\").on(table.status),\n    sourceIdx: index(\"opportunities_source_idx\").on(table.source),\n    probabilityIdx: index(\"opportunities_probability_idx\").on(\n      table.probability\n    ),\n    closeDateIdx: index(\"opportunities_close_date_idx\").on(table.closeDate),\n    activeIdx: index(\"opportunities_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Opportunity = typeof opportunities.$inferSelect;\nexport type NewOpportunity = typeof opportunities.$inferInsert;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2250, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/sales-facts.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n  integer,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { opportunities } from \"./opportunities\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const salesFactTypeEnum = pgEnum(\"sales_fact_type\", [\n  \"safety_equipment_revenue\",\n  \"training_revenue\",\n  \"consulting_revenue\",\n  \"maintenance_revenue\",\n  \"equipment_units_sold\",\n  \"training_sessions_delivered\",\n  \"consulting_hours\",\n  \"contract_value\",\n  \"renewal\",\n  \"upsell\",\n  \"cross_sell\",\n]);\n\nexport const periodTypeEnum = pgEnum(\"period_type\", [\n  \"daily\",\n  \"weekly\",\n  \"monthly\",\n  \"quarterly\",\n  \"yearly\",\n]);\n\n// Sales Facts table - historical data for safety business reporting\nexport const salesFacts = pgTable(\n  \"sales_facts\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    opportunityId: uuid(\"opportunity_id\").references(() => opportunities.id), // Optional - may not be tied to specific opportunity\n    userId: uuid(\"user_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    factType: salesFactTypeEnum(\"fact_type\").notNull(),\n    periodType: periodTypeEnum(\"period_type\").notNull(),\n    periodStart: timestamp(\"period_start\").notNull(),\n    periodEnd: timestamp(\"period_end\").notNull(),\n    amount: decimal(\"amount\", { precision: 15, scale: 2 }).notNull(),\n    quantity: integer(\"quantity\"), // Number of units, sessions, hours, etc.\n    currency: text(\"currency\").default(\"USD\").notNull(),\n    description: text(\"description\"),\n    safetyCategory: text(\"safety_category\"), // e.g., \"PPE\", \"Training\", \"Consulting\"\n    complianceStandard: text(\"compliance_standard\"), // e.g., \"OSHA\", \"ISO 45001\", \"ANSI\"\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    accountIdIdx: index(\"sales_facts_account_id_idx\").on(table.accountId),\n    opportunityIdIdx: index(\"sales_facts_opportunity_id_idx\").on(\n      table.opportunityId\n    ),\n    userIdIdx: index(\"sales_facts_user_id_idx\").on(table.userId),\n    factTypeIdx: index(\"sales_facts_fact_type_idx\").on(table.factType),\n    periodTypeIdx: index(\"sales_facts_period_type_idx\").on(table.periodType),\n    periodStartIdx: index(\"sales_facts_period_start_idx\").on(table.periodStart),\n    periodEndIdx: index(\"sales_facts_period_end_idx\").on(table.periodEnd),\n    safetyCategoryIdx: index(\"sales_facts_safety_category_idx\").on(\n      table.safetyCategory\n    ),\n    activeIdx: index(\"sales_facts_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type SalesFact = typeof salesFacts.$inferSelect;\nexport type NewSalesFact = typeof salesFacts.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;AAGO,MAAM,oBAAoB,IAAA,+PAAM,EAAC,mBAAmB;IACzD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,iBAAiB,IAAA,+PAAM,EAAC,eAAe;IAClD;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,aAAa,IAAA,sPAAO,EAC/B,eACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,eAAe,IAAA,6PAAI,EAAC,kBAAkB,UAAU,CAAC,IAAM,uLAAa,CAAC,EAAE;IACvE,QAAQ,IAAA,6PAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,UAAU,kBAAkB,aAAa,OAAO;IAChD,YAAY,eAAe,eAAe,OAAO;IACjD,aAAa,IAAA,uQAAS,EAAC,gBAAgB,OAAO;IAC9C,WAAW,IAAA,uQAAS,EAAC,cAAc,OAAO;IAC1C,QAAQ,IAAA,mQAAO,EAAC,UAAU;QAAE,WAAW;QAAI,OAAO;IAAE,GAAG,OAAO;IAC9D,UAAU,IAAA,mQAAO,EAAC;IAClB,UAAU,IAAA,6PAAI,EAAC,YAAY,OAAO,CAAC,OAAO,OAAO;IACjD,aAAa,IAAA,6PAAI,EAAC;IAClB,gBAAgB,IAAA,6PAAI,EAAC;IACrB,oBAAoB,IAAA,6PAAI,EAAC;IACzB,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,SAAS;QACpE,kBAAkB,IAAA,sPAAK,EAAC,kCAAkC,EAAE,CAC1D,MAAM,aAAa;QAErB,WAAW,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,MAAM;QAC3D,aAAa,IAAA,sPAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,QAAQ;QACjE,eAAe,IAAA,sPAAK,EAAC,+BAA+B,EAAE,CAAC,MAAM,UAAU;QACvE,gBAAgB,IAAA,sPAAK,EAAC,gCAAgC,EAAE,CAAC,MAAM,WAAW;QAC1E,cAAc,IAAA,sPAAK,EAAC,8BAA8B,EAAE,CAAC,MAAM,SAAS;QACpE,mBAAmB,IAAA,sPAAK,EAAC,mCAAmC,EAAE,CAC5D,MAAM,cAAc;QAEtB,WAAW,IAAA,sPAAK,EAAC,0BAA0B,EAAE,CAAC,MAAM,QAAQ;IAC9D,CAAC","debugId":null}},
    {"offset": {"line": 2330, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/products.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { territories } from \"./territories\";\n\n// Enums\nexport const productTypeEnum = pgEnum(\"product_type\", [\n  \"safety_equipment\",\n  \"ppe\", // Personal Protective Equipment\n  \"safety_training\",\n  \"safety_consulting\",\n  \"safety_software\",\n  \"safety_services\",\n  \"maintenance_services\",\n  \"other\",\n]);\n\nexport const productStatusEnum = pgEnum(\"product_status\", [\n  \"active\",\n  \"inactive\",\n  \"discontinued\",\n  \"coming_soon\",\n]);\n\nexport const complianceStandardEnum = pgEnum(\"compliance_standard\", [\n  \"osha\",\n  \"ansi\",\n  \"niosh\",\n  \"iso_45001\",\n  \"iso_14001\",\n  \"custom\",\n  \"other\",\n]);\n\n// Products table - safety equipment and services catalog\nexport const products = pgTable(\n  \"products\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    territoryId: uuid(\"territory_id\")\n      .notNull()\n      .references(() => territories.id),\n    sku: text(\"sku\").notNull().unique(), // Stock Keeping Unit\n    name: text(\"name\").notNull(),\n    description: text(\"description\"),\n    type: productTypeEnum(\"type\").notNull(),\n    status: productStatusEnum(\"status\").default(\"active\").notNull(),\n    category: text(\"category\"), // e.g., \"Head Protection\", \"Fall Protection\", \"Online Training\"\n    subcategory: text(\"subcategory\"), // e.g., \"Hard Hats\", \"Safety Harnesses\", \"OSHA 10-Hour\"\n    unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }),\n    currency: text(\"currency\").default(\"USD\").notNull(),\n    unitOfMeasure: text(\"unit_of_measure\"), // e.g., \"each\", \"hour\", \"license\", \"course\"\n    weight: decimal(\"weight\", { precision: 8, scale: 2 }), // in pounds\n    dimensions: text(\"dimensions\"), // e.g., \"12x8x4 inches\"\n    manufacturer: text(\"manufacturer\"),\n    model: text(\"model\"),\n    complianceStandards: text(\"compliance_standards\"), // JSON array of compliance standards\n    safetyFeatures: text(\"safety_features\"), // Key safety features\n    specifications: text(\"specifications\"), // JSON string or detailed specs\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    territoryIdIdx: index(\"products_territory_id_idx\").on(table.territoryId),\n    skuIdx: index(\"products_sku_idx\").on(table.sku),\n    nameIdx: index(\"products_name_idx\").on(table.name),\n    typeIdx: index(\"products_type_idx\").on(table.type),\n    statusIdx: index(\"products_status_idx\").on(table.status),\n    categoryIdx: index(\"products_category_idx\").on(table.category),\n    subcategoryIdx: index(\"products_subcategory_idx\").on(table.subcategory),\n    activeIdx: index(\"products_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Product = typeof products.$inferSelect;\nexport type NewProduct = typeof products.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAGO,MAAM,kBAAkB,IAAA,+PAAM,EAAC,gBAAgB;IACpD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,oBAAoB,IAAA,+PAAM,EAAC,kBAAkB;IACxD;IACA;IACA;IACA;CACD;AAEM,MAAM,yBAAyB,IAAA,+PAAM,EAAC,uBAAuB;IAClE;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,aAAa,IAAA,6PAAI,EAAC,gBACf,OAAO,GACP,UAAU,CAAC,IAAM,mLAAW,CAAC,EAAE;IAClC,KAAK,IAAA,6PAAI,EAAC,OAAO,OAAO,GAAG,MAAM;IACjC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,aAAa,IAAA,6PAAI,EAAC;IAClB,MAAM,gBAAgB,QAAQ,OAAO;IACrC,QAAQ,kBAAkB,UAAU,OAAO,CAAC,UAAU,OAAO;IAC7D,UAAU,IAAA,6PAAI,EAAC;IACf,aAAa,IAAA,6PAAI,EAAC;IAClB,WAAW,IAAA,mQAAO,EAAC,cAAc;QAAE,WAAW;QAAI,OAAO;IAAE;IAC3D,UAAU,IAAA,6PAAI,EAAC,YAAY,OAAO,CAAC,OAAO,OAAO;IACjD,eAAe,IAAA,6PAAI,EAAC;IACpB,QAAQ,IAAA,mQAAO,EAAC,UAAU;QAAE,WAAW;QAAG,OAAO;IAAE;IACnD,YAAY,IAAA,6PAAI,EAAC;IACjB,cAAc,IAAA,6PAAI,EAAC;IACnB,OAAO,IAAA,6PAAI,EAAC;IACZ,qBAAqB,IAAA,6PAAI,EAAC;IAC1B,gBAAgB,IAAA,6PAAI,EAAC;IACrB,gBAAgB,IAAA,6PAAI,EAAC;IACrB,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,gBAAgB,IAAA,sPAAK,EAAC,6BAA6B,EAAE,CAAC,MAAM,WAAW;QACvE,QAAQ,IAAA,sPAAK,EAAC,oBAAoB,EAAE,CAAC,MAAM,GAAG;QAC9C,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,aAAa,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,QAAQ;QAC7D,gBAAgB,IAAA,sPAAK,EAAC,4BAA4B,EAAE,CAAC,MAAM,WAAW;QACtE,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 2419, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/projects.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  pgEnum,\n  index,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { accounts } from \"./accounts\";\nimport { userProfiles } from \"./user-profiles\";\n\n// Enums\nexport const projectTypeEnum = pgEnum(\"project_type\", [\n  \"safety_audit\",\n  \"safety_consulting\",\n  \"safety_training\",\n  \"safety_equipment_installation\",\n  \"compliance_assessment\",\n  \"safety_system_implementation\",\n  \"incident_investigation\",\n  \"safety_program_development\",\n  \"other\",\n]);\n\nexport const projectStatusEnum = pgEnum(\"project_status\", [\n  \"planning\",\n  \"in_progress\",\n  \"on_hold\",\n  \"completed\",\n  \"cancelled\",\n]);\n\nexport const projectPriorityEnum = pgEnum(\"project_priority\", [\n  \"low\",\n  \"medium\",\n  \"high\",\n  \"urgent\",\n]);\n\n// Projects table - construction and safety projects\nexport const projects = pgTable(\n  \"projects\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    accountId: uuid(\"account_id\")\n      .notNull()\n      .references(() => accounts.id),\n    ownerId: uuid(\"owner_id\")\n      .notNull()\n      .references(() => userProfiles.id),\n    name: text(\"name\").notNull(),\n    description: text(\"description\"),\n    type: projectTypeEnum(\"type\").notNull(),\n    status: projectStatusEnum(\"status\").default(\"planning\").notNull(),\n    priority: projectPriorityEnum(\"priority\").default(\"medium\").notNull(),\n    startDate: timestamp(\"start_date\"),\n    endDate: timestamp(\"end_date\"),\n    actualStartDate: timestamp(\"actual_start_date\"),\n    actualEndDate: timestamp(\"actual_end_date\"),\n    budget: decimal(\"budget\", { precision: 15, scale: 2 }),\n    actualCost: decimal(\"actual_cost\", { precision: 15, scale: 2 }),\n    currency: text(\"currency\").default(\"USD\").notNull(),\n    location: text(\"location\"), // Project site location\n    safetyRequirements: text(\"safety_requirements\"), // Specific safety requirements\n    complianceStandards: text(\"compliance_standards\"), // Applicable compliance standards\n    deliverables: text(\"deliverables\"), // Project deliverables\n    notes: text(\"notes\"),\n    isActive: boolean(\"is_active\").default(true).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n    createdBy: uuid(\"created_by\")\n      .notNull()\n      .references(() => userProfiles.id),\n  },\n  table => ({\n    accountIdIdx: index(\"projects_account_id_idx\").on(table.accountId),\n    ownerIdIdx: index(\"projects_owner_id_idx\").on(table.ownerId),\n    nameIdx: index(\"projects_name_idx\").on(table.name),\n    typeIdx: index(\"projects_type_idx\").on(table.type),\n    statusIdx: index(\"projects_status_idx\").on(table.status),\n    priorityIdx: index(\"projects_priority_idx\").on(table.priority),\n    startDateIdx: index(\"projects_start_date_idx\").on(table.startDate),\n    endDateIdx: index(\"projects_end_date_idx\").on(table.endDate),\n    activeIdx: index(\"projects_active_idx\").on(table.isActive),\n  })\n);\n\n// Type exports\nexport type Project = typeof projects.$inferSelect;\nexport type NewProject = typeof projects.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;AAGO,MAAM,kBAAkB,IAAA,+PAAM,EAAC,gBAAgB;IACpD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,oBAAoB,IAAA,+PAAM,EAAC,kBAAkB;IACxD;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,sBAAsB,IAAA,+PAAM,EAAC,oBAAoB;IAC5D;IACA;IACA;IACA;CACD;AAGM,MAAM,WAAW,IAAA,sPAAO,EAC7B,YACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6KAAQ,CAAC,EAAE;IAC/B,SAAS,IAAA,6PAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;IACnC,MAAM,IAAA,6PAAI,EAAC,QAAQ,OAAO;IAC1B,aAAa,IAAA,6PAAI,EAAC;IAClB,MAAM,gBAAgB,QAAQ,OAAO;IACrC,QAAQ,kBAAkB,UAAU,OAAO,CAAC,YAAY,OAAO;IAC/D,UAAU,oBAAoB,YAAY,OAAO,CAAC,UAAU,OAAO;IACnE,WAAW,IAAA,uQAAS,EAAC;IACrB,SAAS,IAAA,uQAAS,EAAC;IACnB,iBAAiB,IAAA,uQAAS,EAAC;IAC3B,eAAe,IAAA,uQAAS,EAAC;IACzB,QAAQ,IAAA,mQAAO,EAAC,UAAU;QAAE,WAAW;QAAI,OAAO;IAAE;IACpD,YAAY,IAAA,mQAAO,EAAC,eAAe;QAAE,WAAW;QAAI,OAAO;IAAE;IAC7D,UAAU,IAAA,6PAAI,EAAC,YAAY,OAAO,CAAC,OAAO,OAAO;IACjD,UAAU,IAAA,6PAAI,EAAC;IACf,oBAAoB,IAAA,6PAAI,EAAC;IACzB,qBAAqB,IAAA,6PAAI,EAAC;IAC1B,cAAc,IAAA,6PAAI,EAAC;IACnB,OAAO,IAAA,6PAAI,EAAC;IACZ,UAAU,IAAA,mQAAO,EAAC,aAAa,OAAO,CAAC,MAAM,OAAO;IACpD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,yLAAY,CAAC,EAAE;AACrC,GACA,CAAA,QAAS,CAAC;QACR,cAAc,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,YAAY,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,OAAO;QAC3D,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,SAAS,IAAA,sPAAK,EAAC,qBAAqB,EAAE,CAAC,MAAM,IAAI;QACjD,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,MAAM;QACvD,aAAa,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,QAAQ;QAC7D,cAAc,IAAA,sPAAK,EAAC,2BAA2B,EAAE,CAAC,MAAM,SAAS;QACjE,YAAY,IAAA,sPAAK,EAAC,yBAAyB,EAAE,CAAC,MAAM,OAAO;QAC3D,WAAW,IAAA,sPAAK,EAAC,uBAAuB,EAAE,CAAC,MAAM,QAAQ;IAC3D,CAAC","debugId":null}},
    {"offset": {"line": 2512, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/course-translations.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courses } from \"./courses\";\n\n// Language code enum\nexport const languageCodeEnum = pgEnum(\"language_code\", [\n  \"en\",\n  \"es\",\n  \"fr\",\n  \"de\",\n]);\n\n// Course translations table\nexport const courseTranslations = pgTable(\"course_translations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  courseId: uuid(\"course_id\")\n    .notNull()\n    .references(() => courses.id, { onDelete: \"cascade\" }),\n  languageCode: languageCodeEnum(\"language_code\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const courseTranslationsRelations = relations(\n  courseTranslations,\n  ({ one }) => ({\n    course: one(courses, {\n      fields: [courseTranslations.courseId],\n      references: [courses.id],\n    }),\n  })\n);\n\n// Type exports\nexport type CourseTranslation = typeof courseTranslations.$inferSelect;\nexport type NewCourseTranslation = typeof courseTranslations.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAGO,MAAM,mBAAmB,IAAA,+PAAM,EAAC,iBAAiB;IACtD;IACA;IACA;IACA;CACD;AAGM,MAAM,qBAAqB,IAAA,sPAAO,EAAC,uBAAuB;IAC/D,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IACtD,cAAc,iBAAiB,iBAAiB,OAAO;IACvD,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,aAAa,IAAA,6PAAI,EAAC;IAClB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,8BAA8B,IAAA,8OAAS,EAClD,oBACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,mBAAmB,QAAQ;aAAC;YACrC,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;IACF,CAAC","debugId":null}},
    {"offset": {"line": 2561, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/quiz-question-translations.ts"],"sourcesContent":["import { pgTable, uuid, text, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { quizQuestions } from \"./quiz-questions\";\nimport { languageCodeEnum } from \"./course-translations\";\n\n// Quiz question translations table\nexport const quizQuestionTranslations = pgTable(\"quiz_question_translations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  quizQuestionId: uuid(\"quiz_question_id\")\n    .notNull()\n    .references(() => quizQuestions.id, { onDelete: \"cascade\" }),\n  languageCode: languageCodeEnum(\"language_code\").notNull(),\n  questionText: text(\"question_text\").notNull(),\n  options: jsonb(\"options\"),\n  correctAnswer: jsonb(\"correct_answer\").notNull(),\n  explanation: text(\"explanation\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const quizQuestionTranslationsRelations = relations(\n  quizQuestionTranslations,\n  ({ one }) => ({\n    quizQuestion: one(quizQuestions, {\n      fields: [quizQuestionTranslations.quizQuestionId],\n      references: [quizQuestions.id],\n    }),\n  })\n);\n\n// Type exports\nexport type QuizQuestionTranslation =\n  typeof quizQuestionTranslations.$inferSelect;\nexport type NewQuizQuestionTranslation =\n  typeof quizQuestionTranslations.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,2BAA2B,IAAA,sPAAO,EAAC,8BAA8B;IAC5E,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,gBAAgB,IAAA,6PAAI,EAAC,oBAClB,OAAO,GACP,UAAU,CAAC,IAAM,2LAAa,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC5D,cAAc,IAAA,mMAAgB,EAAC,iBAAiB,OAAO;IACvD,cAAc,IAAA,6PAAI,EAAC,iBAAiB,OAAO;IAC3C,SAAS,IAAA,+PAAK,EAAC;IACf,eAAe,IAAA,+PAAK,EAAC,kBAAkB,OAAO;IAC9C,aAAa,IAAA,6PAAI,EAAC;IAClB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,oCAAoC,IAAA,8OAAS,EACxD,0BACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,cAAc,IAAI,2LAAa,EAAE;YAC/B,QAAQ;gBAAC,yBAAyB,cAAc;aAAC;YACjD,YAAY;gBAAC,2LAAa,CAAC,EAAE;aAAC;QAChC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 2606, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/quiz-questions.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  jsonb,\n  pgEnum,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courseSections } from \"./course-sections\";\n\n// Question type enum\nexport const questionTypeEnum = pgEnum(\"question_type\", [\n  \"true-false\",\n  \"multiple-choice\",\n]);\n\n// Quiz questions table\nexport const quizQuestions = pgTable(\n  \"quiz_questions\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    sectionId: uuid(\"section_id\")\n      .notNull()\n      .references(() => courseSections.id, { onDelete: \"cascade\" }),\n    questionKey: text(\"question_key\").notNull(),\n    questionType: questionTypeEnum(\"question_type\").notNull(),\n    questionText: text(\"question_text\").notNull(),\n    options: jsonb(\"options\"),\n    correctAnswer: jsonb(\"correct_answer\").notNull(),\n    explanation: text(\"explanation\"),\n    orderIndex: integer(\"order_index\").default(0).notNull(),\n    isPublished: boolean(\"is_published\").default(false).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    sectionKeyUnique: unique(\"quiz_questions_section_key_unique\").on(\n      table.sectionId,\n      table.questionKey\n    ),\n  })\n);\n\n// Relations\nexport const quizQuestionsRelations = relations(\n  quizQuestions,\n  ({ one, many }) => ({\n    section: one(courseSections, {\n      fields: [quizQuestions.sectionId],\n      references: [courseSections.id],\n    }),\n    quizAttempts: many(quizAttempts),\n    quizQuestionTranslations: many(quizQuestionTranslations),\n  })\n);\n\n// Type exports\nexport type QuizQuestion = typeof quizQuestions.$inferSelect;\nexport type NewQuizQuestion = typeof quizQuestions.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { quizAttempts } from \"./quiz-attempts\";\nimport { quizQuestionTranslations } from \"./quiz-question-translations\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAoDA,+DAA+D;AAC/D;AACA;;;;AAnDO,MAAM,mBAAmB,IAAA,+PAAM,EAAC,iBAAiB;IACtD;IACA;CACD;AAGM,MAAM,gBAAgB,IAAA,sPAAO,EAClC,kBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6LAAc,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC7D,aAAa,IAAA,6PAAI,EAAC,gBAAgB,OAAO;IACzC,cAAc,iBAAiB,iBAAiB,OAAO;IACvD,cAAc,IAAA,6PAAI,EAAC,iBAAiB,OAAO;IAC3C,SAAS,IAAA,+PAAK,EAAC;IACf,eAAe,IAAA,+PAAK,EAAC,kBAAkB,OAAO;IAC9C,aAAa,IAAA,6PAAI,EAAC;IAClB,YAAY,IAAA,mQAAO,EAAC,eAAe,OAAO,CAAC,GAAG,OAAO;IACrD,aAAa,IAAA,mQAAO,EAAC,gBAAgB,OAAO,CAAC,OAAO,OAAO;IAC3D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,kBAAkB,IAAA,oQAAM,EAAC,qCAAqC,EAAE,CAC9D,MAAM,SAAS,EACf,MAAM,WAAW;IAErB,CAAC;AAII,MAAM,yBAAyB,IAAA,8OAAS,EAC7C,eACA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QAClB,SAAS,IAAI,6LAAc,EAAE;YAC3B,QAAQ;gBAAC,cAAc,SAAS;aAAC;YACjC,YAAY;gBAAC,6LAAc,CAAC,EAAE;aAAC;QACjC;QACA,cAAc,KAAK,yLAAY;QAC/B,0BAA0B,KAAK,qNAAwB;IACzD,CAAC","debugId":null}},
    {"offset": {"line": 2671, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/quiz-attempts.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  jsonb,\n  boolean,\n  timestamp,\n  integer,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { quizQuestions } from \"./quiz-questions\";\n\n// Interaction type enum\nexport const interactionTypeEnum = pgEnum(\"interaction_type\", [\n  \"view\",\n  \"click\",\n  \"expand\",\n  \"collapse\",\n  \"download\",\n  \"share\",\n]);\n\n// Quiz attempts table\nexport const quizAttempts = pgTable(\"quiz_attempts\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: text(\"user_id\").notNull(),\n  quizQuestionId: uuid(\"quiz_question_id\")\n    .notNull()\n    .references(() => quizQuestions.id, { onDelete: \"cascade\" }),\n  userAnswer: jsonb(\"user_answer\").notNull(),\n  isCorrect: boolean(\"is_correct\").notNull(),\n  attemptedAt: timestamp(\"attempted_at\").defaultNow().notNull(),\n  timeSpentSeconds: integer(\"time_spent_seconds\").default(0).notNull(),\n});\n\n// Relations\nexport const quizAttemptsRelations = relations(quizAttempts, ({ one }) => ({\n  quizQuestion: one(quizQuestions, {\n    fields: [quizAttempts.quizQuestionId],\n    references: [quizQuestions.id],\n  }),\n}));\n\n// Type exports\nexport type QuizAttempt = typeof quizAttempts.$inferSelect;\nexport type NewQuizAttempt = typeof quizAttempts.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;AAGO,MAAM,sBAAsB,IAAA,+PAAM,EAAC,oBAAoB;IAC5D;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,eAAe,IAAA,sPAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WAAW,OAAO;IAC/B,gBAAgB,IAAA,6PAAI,EAAC,oBAClB,OAAO,GACP,UAAU,CAAC,IAAM,2LAAa,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC5D,YAAY,IAAA,+PAAK,EAAC,eAAe,OAAO;IACxC,WAAW,IAAA,mQAAO,EAAC,cAAc,OAAO;IACxC,aAAa,IAAA,uQAAS,EAAC,gBAAgB,UAAU,GAAG,OAAO;IAC3D,kBAAkB,IAAA,mQAAO,EAAC,sBAAsB,OAAO,CAAC,GAAG,OAAO;AACpE;AAGO,MAAM,wBAAwB,IAAA,8OAAS,EAAC,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,cAAc,IAAI,2LAAa,EAAE;YAC/B,QAAQ;gBAAC,aAAa,cAAc;aAAC;YACrC,YAAY;gBAAC,2LAAa,CAAC,EAAE;aAAC;QAChC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 2725, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/content-interactions.ts"],"sourcesContent":["import { pgTable, uuid, text, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { contentBlocks } from \"./content-blocks\";\nimport { interactionTypeEnum } from \"./quiz-attempts\";\n\n// Content interactions table\nexport const contentInteractions = pgTable(\"content_interactions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: text(\"user_id\").notNull(),\n  contentBlockId: uuid(\"content_block_id\")\n    .notNull()\n    .references(() => contentBlocks.id, { onDelete: \"cascade\" }),\n  interactionType: interactionTypeEnum(\"interaction_type\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  interactedAt: timestamp(\"interacted_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const contentInteractionsRelations = relations(\n  contentInteractions,\n  ({ one }) => ({\n    contentBlock: one(contentBlocks, {\n      fields: [contentInteractions.contentBlockId],\n      references: [contentBlocks.id],\n    }),\n  })\n);\n\n// Type exports\nexport type ContentInteraction = typeof contentInteractions.$inferSelect;\nexport type NewContentInteraction = typeof contentInteractions.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,sBAAsB,IAAA,sPAAO,EAAC,wBAAwB;IACjE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WAAW,OAAO;IAC/B,gBAAgB,IAAA,6PAAI,EAAC,oBAClB,OAAO,GACP,UAAU,CAAC,IAAM,2LAAa,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC5D,iBAAiB,IAAA,gMAAmB,EAAC,oBAAoB,OAAO;IAChE,UAAU,IAAA,+PAAK,EAAC;IAChB,cAAc,IAAA,uQAAS,EAAC,iBAAiB,UAAU,GAAG,OAAO;AAC/D;AAGO,MAAM,+BAA+B,IAAA,8OAAS,EACnD,qBACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,cAAc,IAAI,2LAAa,EAAE;YAC/B,QAAQ;gBAAC,oBAAoB,cAAc;aAAC;YAC5C,YAAY;gBAAC,2LAAa,CAAC,EAAE;aAAC;QAChC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 2767, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/content-block-translations.ts"],"sourcesContent":["import { pgTable, uuid, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { contentBlocks } from \"./content-blocks\";\nimport { languageCodeEnum } from \"./course-translations\";\n\n// Content block translations table\nexport const contentBlockTranslations = pgTable(\"content_block_translations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  contentBlockId: uuid(\"content_block_id\")\n    .notNull()\n    .references(() => contentBlocks.id, { onDelete: \"cascade\" }),\n  languageCode: languageCodeEnum(\"language_code\").notNull(),\n  content: jsonb(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const contentBlockTranslationsRelations = relations(\n  contentBlockTranslations,\n  ({ one }) => ({\n    contentBlock: one(contentBlocks, {\n      fields: [contentBlockTranslations.contentBlockId],\n      references: [contentBlocks.id],\n    }),\n  })\n);\n\n// Type exports\nexport type ContentBlockTranslation =\n  typeof contentBlockTranslations.$inferSelect;\nexport type NewContentBlockTranslation =\n  typeof contentBlockTranslations.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,2BAA2B,IAAA,sPAAO,EAAC,8BAA8B;IAC5E,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,gBAAgB,IAAA,6PAAI,EAAC,oBAClB,OAAO,GACP,UAAU,CAAC,IAAM,2LAAa,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC5D,cAAc,IAAA,mMAAgB,EAAC,iBAAiB,OAAO;IACvD,SAAS,IAAA,+PAAK,EAAC,WAAW,OAAO;IACjC,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,oCAAoC,IAAA,8OAAS,EACxD,0BACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,cAAc,IAAI,2LAAa,EAAE;YAC/B,QAAQ;gBAAC,yBAAyB,cAAc;aAAC;YACjD,YAAY;gBAAC,2LAAa,CAAC,EAAE;aAAC;QAChC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 2808, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/content-blocks.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  integer,\n  jsonb,\n  pgEnum,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courseSections } from \"./course-sections\";\n\n// Content block type enum\nexport const contentBlockTypeEnum = pgEnum(\"content_block_type\", [\n  \"hero\",\n  \"text\",\n  \"card\",\n  \"image\",\n  \"table\",\n  \"list\",\n  \"grid\",\n  \"callout\",\n  \"quote\",\n  \"divider\",\n  \"video\",\n  \"audio\",\n]);\n\n// Content blocks table\nexport const contentBlocks = pgTable(\n  \"content_blocks\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    sectionId: uuid(\"section_id\")\n      .notNull()\n      .references(() => courseSections.id, { onDelete: \"cascade\" }),\n    blockType: contentBlockTypeEnum(\"block_type\").notNull(),\n    orderIndex: integer(\"order_index\").notNull(),\n    content: jsonb(\"content\").notNull(),\n    metadata: jsonb(\"metadata\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    sectionOrderUnique: unique(\"content_blocks_section_order_unique\").on(\n      table.sectionId,\n      table.orderIndex\n    ),\n  })\n);\n\n// Relations\nexport const contentBlocksRelations = relations(\n  contentBlocks,\n  ({ one, many }) => ({\n    section: one(courseSections, {\n      fields: [contentBlocks.sectionId],\n      references: [courseSections.id],\n    }),\n    contentInteractions: many(contentInteractions),\n    contentBlockTranslations: many(contentBlockTranslations),\n  })\n);\n\n// Type exports\nexport type ContentBlock = typeof contentBlocks.$inferSelect;\nexport type NewContentBlock = typeof contentBlocks.$inferInsert;\nexport type ContentBlockType = (typeof contentBlockTypeEnum.enumValues)[number];\n\n// Import other tables for relations (circular import handling)\nimport { contentInteractions } from \"./content-interactions\";\nimport { contentBlockTranslations } from \"./content-block-translations\";\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AA2DA,+DAA+D;AAC/D;AACA;;;;AA1DO,MAAM,uBAAuB,IAAA,+PAAM,EAAC,sBAAsB;IAC/D;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAGM,MAAM,gBAAgB,IAAA,sPAAO,EAClC,kBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6LAAc,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC7D,WAAW,qBAAqB,cAAc,OAAO;IACrD,YAAY,IAAA,mQAAO,EAAC,eAAe,OAAO;IAC1C,SAAS,IAAA,+PAAK,EAAC,WAAW,OAAO;IACjC,UAAU,IAAA,+PAAK,EAAC;IAChB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,oBAAoB,IAAA,oQAAM,EAAC,uCAAuC,EAAE,CAClE,MAAM,SAAS,EACf,MAAM,UAAU;IAEpB,CAAC;AAII,MAAM,yBAAyB,IAAA,8OAAS,EAC7C,eACA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QAClB,SAAS,IAAI,6LAAc,EAAE;YAC3B,QAAQ;gBAAC,cAAc,SAAS;aAAC;YACjC,YAAY;gBAAC,6LAAc,CAAC,EAAE;aAAC;QACjC;QACA,qBAAqB,KAAK,uMAAmB;QAC7C,0BAA0B,KAAK,qNAAwB;IACzD,CAAC","debugId":null}},
    {"offset": {"line": 2877, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/user-progress.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courses } from \"./courses\";\nimport { courseSections } from \"./course-sections\";\n\n// User progress table\nexport const userProgress = pgTable(\n  \"user_progress\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    userId: text(\"user_id\").notNull(),\n    courseId: uuid(\"course_id\")\n      .notNull()\n      .references(() => courses.id, { onDelete: \"cascade\" }),\n    sectionId: uuid(\"section_id\")\n      .notNull()\n      .references(() => courseSections.id, { onDelete: \"cascade\" }),\n    isCompleted: boolean(\"is_completed\").default(false).notNull(),\n    completionPercentage: integer(\"completion_percentage\").default(0).notNull(),\n    timeSpentSeconds: integer(\"time_spent_seconds\").default(0).notNull(),\n    lastAccessedAt: timestamp(\"last_accessed_at\").defaultNow().notNull(),\n    completedAt: timestamp(\"completed_at\"),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    userSectionUnique: unique(\"user_progress_user_section_unique\").on(\n      table.userId,\n      table.sectionId\n    ),\n  })\n);\n\n// Relations\nexport const userProgressRelations = relations(userProgress, ({ one }) => ({\n  course: one(courses, {\n    fields: [userProgress.courseId],\n    references: [courses.id],\n  }),\n  section: one(courseSections, {\n    fields: [userProgress.sectionId],\n    references: [courseSections.id],\n  }),\n}));\n\n// Type exports\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type NewUserProgress = typeof userProgress.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;;;;;AAGO,MAAM,eAAe,IAAA,sPAAO,EACjC,iBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,6PAAI,EAAC,WAAW,OAAO;IAC/B,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IACtD,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6LAAc,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC7D,aAAa,IAAA,mQAAO,EAAC,gBAAgB,OAAO,CAAC,OAAO,OAAO;IAC3D,sBAAsB,IAAA,mQAAO,EAAC,yBAAyB,OAAO,CAAC,GAAG,OAAO;IACzE,kBAAkB,IAAA,mQAAO,EAAC,sBAAsB,OAAO,CAAC,GAAG,OAAO;IAClE,gBAAgB,IAAA,uQAAS,EAAC,oBAAoB,UAAU,GAAG,OAAO;IAClE,aAAa,IAAA,uQAAS,EAAC;IACvB,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,mBAAmB,IAAA,oQAAM,EAAC,qCAAqC,EAAE,CAC/D,MAAM,MAAM,EACZ,MAAM,SAAS;IAEnB,CAAC;AAII,MAAM,wBAAwB,IAAA,8OAAS,EAAC,cAAc,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACzE,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,aAAa,QAAQ;aAAC;YAC/B,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,SAAS,IAAI,6LAAc,EAAE;YAC3B,QAAQ;gBAAC,aAAa,SAAS;aAAC;YAChC,YAAY;gBAAC,6LAAc,CAAC,EAAE;aAAC;QACjC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 2938, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/section-translations.ts"],"sourcesContent":["import { pgTable, uuid, text, timestamp } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courseSections } from \"./course-sections\";\nimport { languageCodeEnum } from \"./course-translations\";\n\n// Section translations table\nexport const sectionTranslations = pgTable(\"section_translations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  sectionId: uuid(\"section_id\")\n    .notNull()\n    .references(() => courseSections.id, { onDelete: \"cascade\" }),\n  languageCode: languageCodeEnum(\"language_code\").notNull(),\n  title: text(\"title\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const sectionTranslationsRelations = relations(\n  sectionTranslations,\n  ({ one }) => ({\n    section: one(courseSections, {\n      fields: [sectionTranslations.sectionId],\n      references: [courseSections.id],\n    }),\n  })\n);\n\n// Type exports\nexport type SectionTranslation = typeof sectionTranslations.$inferSelect;\nexport type NewSectionTranslation = typeof sectionTranslations.$inferInsert;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAGO,MAAM,sBAAsB,IAAA,sPAAO,EAAC,wBAAwB;IACjE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,WAAW,IAAA,6PAAI,EAAC,cACb,OAAO,GACP,UAAU,CAAC,IAAM,6LAAc,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IAC7D,cAAc,IAAA,mMAAgB,EAAC,iBAAiB,OAAO;IACvD,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,+BAA+B,IAAA,8OAAS,EACnD,qBACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,SAAS,IAAI,6LAAc,EAAE;YAC3B,QAAQ;gBAAC,oBAAoB,SAAS;aAAC;YACvC,YAAY;gBAAC,6LAAc,CAAC,EAAE;aAAC;QACjC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 2979, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/course-sections.ts"],"sourcesContent":["import {\n  pgTable,\n  uuid,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  unique,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { courses } from \"./courses\";\n\n// Course sections table\nexport const courseSections = pgTable(\n  \"course_sections\",\n  {\n    id: uuid(\"id\").primaryKey().defaultRandom(),\n    courseId: uuid(\"course_id\")\n      .notNull()\n      .references(() => courses.id, { onDelete: \"cascade\" }),\n    sectionKey: text(\"section_key\").notNull(),\n    title: text(\"title\").notNull(),\n    orderIndex: integer(\"order_index\").notNull(),\n    iconName: text(\"icon_name\"),\n    isPublished: boolean(\"is_published\").default(false).notNull(),\n    createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n    updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  },\n  table => ({\n    courseSectionUnique: unique(\"course_sections_course_section_unique\").on(\n      table.courseId,\n      table.sectionKey\n    ),\n    courseOrderUnique: unique(\"course_sections_course_order_unique\").on(\n      table.courseId,\n      table.orderIndex\n    ),\n  })\n);\n\n// Relations\nexport const courseSectionsRelations = relations(\n  courseSections,\n  ({ one, many }) => ({\n    course: one(courses, {\n      fields: [courseSections.courseId],\n      references: [courses.id],\n    }),\n    contentBlocks: many(contentBlocks),\n    quizQuestions: many(quizQuestions),\n    userProgress: many(userProgress),\n    sectionTranslations: many(sectionTranslations),\n  })\n);\n\n// Type exports\nexport type CourseSection = typeof courseSections.$inferSelect;\nexport type NewCourseSection = typeof courseSections.$inferInsert;\n\n// Import other tables for relations (circular import handling)\nimport { contentBlocks } from \"./content-blocks\";\nimport { quizQuestions } from \"./quiz-questions\";\nimport { userProgress } from \"./user-progress\";\nimport { sectionTranslations } from \"./section-translations\";\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAiDA,+DAA+D;AAC/D;AACA;AACA;AACA;;;;AAlDO,MAAM,iBAAiB,IAAA,sPAAO,EACnC,mBACA;IACE,IAAI,IAAA,6PAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,UAAU,IAAA,6PAAI,EAAC,aACZ,OAAO,GACP,UAAU,CAAC,IAAM,2KAAO,CAAC,EAAE,EAAE;QAAE,UAAU;IAAU;IACtD,YAAY,IAAA,6PAAI,EAAC,eAAe,OAAO;IACvC,OAAO,IAAA,6PAAI,EAAC,SAAS,OAAO;IAC5B,YAAY,IAAA,mQAAO,EAAC,eAAe,OAAO;IAC1C,UAAU,IAAA,6PAAI,EAAC;IACf,aAAa,IAAA,mQAAO,EAAC,gBAAgB,OAAO,CAAC,OAAO,OAAO;IAC3D,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,uQAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD,GACA,CAAA,QAAS,CAAC;QACR,qBAAqB,IAAA,oQAAM,EAAC,yCAAyC,EAAE,CACrE,MAAM,QAAQ,EACd,MAAM,UAAU;QAElB,mBAAmB,IAAA,oQAAM,EAAC,uCAAuC,EAAE,CACjE,MAAM,QAAQ,EACd,MAAM,UAAU;IAEpB,CAAC;AAII,MAAM,0BAA0B,IAAA,8OAAS,EAC9C,gBACA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QAClB,QAAQ,IAAI,2KAAO,EAAE;YACnB,QAAQ;gBAAC,eAAe,QAAQ;aAAC;YACjC,YAAY;gBAAC,2KAAO,CAAC,EAAE;aAAC;QAC1B;QACA,eAAe,KAAK,2LAAa;QACjC,eAAe,KAAK,2LAAa;QACjC,cAAc,KAAK,yLAAY;QAC/B,qBAAqB,KAAK,uMAAmB;IAC/C,CAAC","debugId":null}},
    {"offset": {"line": 3040, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/schema/index.ts"],"sourcesContent":["// Safety Training Schema Index\n// This file exports all safety training-related tables while preserving existing Supabase auth tables\n\n// Core Safety Training Tables (existing)\nexport * from \"./profiles\";\nexport * from \"./plants\";\nexport * from \"./courses\";\nexport * from \"./enrollments\";\nexport * from \"./progress\";\nexport * from \"./activity-events\";\nexport * from \"./question-events\";\nexport * from \"./admin-roles\";\nexport * from \"./audit-log\";\n\n// New Safety Business Tables (CRM-focused for safety operations)\nexport * from \"./territories\";\nexport * from \"./user-profiles\";\nexport * from \"./accounts\";\nexport * from \"./branches\";\nexport * from \"./contacts\";\nexport * from \"./activity-logs\";\nexport * from \"./opportunities\";\nexport * from \"./sales-facts\";\nexport * from \"./products\";\nexport * from \"./projects\";\n\n// LMS Content Tables (new)\nexport * from \"./course-sections\";\nexport * from \"./content-blocks\";\nexport * from \"./quiz-questions\";\nexport * from \"./course-translations\";\nexport * from \"./section-translations\";\nexport * from \"./content-block-translations\";\nexport * from \"./quiz-question-translations\";\nexport * from \"./user-progress\";\nexport * from \"./quiz-attempts\";\nexport * from \"./content-interactions\";\n\n// Relations for type-safe joins\n// Relations are defined in individual schema files\n\n// Re-export any existing tables that might be needed\n// Note: We don't modify existing Supabase auth tables (users, sessions, etc.)\n"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,sGAAsG;AAEtG,yCAAyC;;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gTAEA,gCAAgC;CAChC,mDAAmD;CAEnD,qDAAqD;CACrD,8EAA8E","debugId":null}},
    {"offset": {"line": 3303, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema/index\";\n\n/**\n * Safety Training Database Connection Setup\n *\n * This connects to the existing Supabase Safety database using Drizzle ORM\n * while preserving all existing Supabase auth tables and safety training tables.\n *\n * Environment Variables Required:\n * - DATABASE_URL: PostgreSQL connection string from Supabase Safety project\n * - NEXT_PUBLIC_SUPABASE_URL: Supabase project URL\n * - NEXT_PUBLIC_SUPABASE_ANON_KEY: Supabase anonymous key\n */\nconst connectionString = process.env.DATABASE_URL!;\n\nif (!connectionString) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\n// Validate that we're connecting to the Safety database\nif (!connectionString.includes(\"radbukphijxenmgiljtu\")) {\n  console.warn(\n    \"Warning: DATABASE_URL does not point to the Safety database (radbukphijxenmgiljtu)\"\n  );\n}\n\nconst client = postgres(connectionString, {\n  // Connection pool settings for better performance\n  max: 20,\n  idle_timeout: 20,\n  connect_timeout: 10,\n  // Enable SSL for Supabase\n  ssl: \"require\",\n});\n\nexport const db = drizzle(client, {\n  schema,\n  // Enable logging in development\n  logger: process.env.NODE_ENV === \"development\",\n});\n\n// Export schema for use in other parts of the application\nexport * from \"./schema\";\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;AAEA;;;;;;;;;;CAUC,GACD,MAAM,mBAAmB,QAAQ,GAAG,CAAC,YAAY;AAEjD,IAAI,CAAC,kBAAkB;IACrB,MAAM,IAAI,MAAM;AAClB;AAEA,wDAAwD;AACxD,IAAI,CAAC,iBAAiB,QAAQ,CAAC,yBAAyB;IACtD,QAAQ,IAAI,CACV;AAEJ;AAEA,MAAM,SAAS,IAAA,0MAAQ,EAAC,kBAAkB;IACxC,kDAAkD;IAClD,KAAK;IACL,cAAc;IACd,iBAAiB;IACjB,0BAA0B;IAC1B,KAAK;AACP;AAEO,MAAM,KAAK,IAAA,2PAAO,EAAC,QAAQ;IAChC,QAAA;IACA,gCAAgC;IAChC,QAAQ,oDAAyB;AACnC","debugId":null}},
    {"offset": {"line": 3350, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/queries/course-sections.ts"],"sourcesContent":["import { eq, and, desc, asc, sql } from \"drizzle-orm\";\nimport { db } from \"../index\";\nimport {\n  courseSections,\n  courses,\n  contentBlocks,\n  quizQuestions,\n  CourseSection,\n  NewCourseSection,\n} from \"../schema\";\n\n/**\n * Course Section Query Operations\n * Handles database queries for course sections with proper access control\n */\n\n// =============================================================================\n// BASIC COURSE SECTION QUERIES\n// =============================================================================\n\n/**\n * Get course section by ID\n */\nexport const getCourseSectionById = async (\n  sectionId: string\n): Promise<CourseSection | null> => {\n  const result = await db\n    .select()\n    .from(courseSections)\n    .where(eq(courseSections.id, sectionId))\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get course section by course ID and section key\n */\nexport const getCourseSectionByKey = async (\n  courseId: string,\n  sectionKey: string\n): Promise<CourseSection | null> => {\n  const result = await db\n    .select()\n    .from(courseSections)\n    .where(\n      and(\n        eq(courseSections.courseId, courseId),\n        eq(courseSections.sectionKey, sectionKey)\n      )\n    )\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get all sections for a course\n */\nexport const getCourseSectionsByCourseId = async (\n  courseId: string,\n  options: {\n    includeUnpublished?: boolean;\n    sortBy?: \"orderIndex\" | \"title\" | \"createdAt\";\n    sortOrder?: \"asc\" | \"desc\";\n  } = {}\n): Promise<CourseSection[]> => {\n  const {\n    includeUnpublished = false,\n    sortBy = \"orderIndex\",\n    sortOrder = \"asc\",\n  } = options;\n\n  let whereClause = eq(courseSections.courseId, courseId);\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(courseSections.isPublished, true));\n  }\n\n  const orderBy =\n    sortOrder === \"desc\"\n      ? desc(courseSections[sortBy])\n      : asc(courseSections[sortBy]);\n\n  const result = await db\n    .select()\n    .from(courseSections)\n    .where(whereClause)\n    .orderBy(orderBy);\n\n  return result;\n};\n\n/**\n * Get course sections with content blocks and quiz questions\n */\nexport const getCourseSectionWithContent = async (\n  sectionId: string\n): Promise<{\n  section: CourseSection;\n  contentBlocks: any[];\n  quizQuestions: any[];\n} | null> => {\n  const section = await getCourseSectionById(sectionId);\n  if (!section) return null;\n\n  // Get content blocks\n  const blocks = await db\n    .select()\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId))\n    .orderBy(asc(contentBlocks.orderIndex));\n\n  // Get quiz questions\n  const questions = await db\n    .select()\n    .from(quizQuestions)\n    .where(eq(quizQuestions.sectionId, sectionId))\n    .orderBy(asc(quizQuestions.orderIndex));\n\n  return {\n    section,\n    contentBlocks: blocks,\n    quizQuestions: questions,\n  };\n};\n\n// =============================================================================\n// COURSE SECTION CREATION AND UPDATES\n// =============================================================================\n\n/**\n * Create a new course section\n */\nexport const createCourseSection = async (\n  sectionData: NewCourseSection\n): Promise<CourseSection> => {\n  const result = await db\n    .insert(courseSections)\n    .values(sectionData)\n    .returning();\n\n  return result[0];\n};\n\n/**\n * Update course section\n */\nexport const updateCourseSection = async (\n  sectionId: string,\n  updates: Partial<CourseSection>\n): Promise<CourseSection | null> => {\n  const result = await db\n    .update(courseSections)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(eq(courseSections.id, sectionId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Delete course section\n */\nexport const deleteCourseSection = async (\n  sectionId: string\n): Promise<boolean> => {\n  const result = await db\n    .delete(courseSections)\n    .where(eq(courseSections.id, sectionId))\n    .returning();\n\n  return result.length > 0;\n};\n\n// =============================================================================\n// COURSE SECTION ORDERING OPERATIONS\n// =============================================================================\n\n/**\n * Update section order\n */\nexport const updateSectionOrder = async (\n  sectionId: string,\n  newOrderIndex: number\n): Promise<CourseSection | null> => {\n  const result = await db\n    .update(courseSections)\n    .set({\n      orderIndex: newOrderIndex,\n      updatedAt: new Date(),\n    })\n    .where(eq(courseSections.id, sectionId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Reorder multiple sections\n */\nexport const reorderSections = async (\n  courseId: string,\n  sectionOrders: Array<{ sectionId: string; orderIndex: number }>\n): Promise<CourseSection[]> => {\n  const results: CourseSection[] = [];\n\n  for (const order of sectionOrders) {\n    const result = await updateSectionOrder(order.sectionId, order.orderIndex);\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  return results;\n};\n\n/**\n * Get next available order index for a course\n */\nexport const getNextSectionOrderIndex = async (\n  courseId: string\n): Promise<number> => {\n  const result = await db\n    .select({ maxOrder: sql<number>`max(${courseSections.orderIndex})` })\n    .from(courseSections)\n    .where(eq(courseSections.courseId, courseId));\n\n  return (result[0]?.maxOrder || 0) + 1;\n};\n\n// =============================================================================\n// COURSE SECTION VALIDATION QUERIES\n// =============================================================================\n\n/**\n * Check if section key is unique within a course\n */\nexport const isSectionKeyUnique = async (\n  courseId: string,\n  sectionKey: string,\n  excludeSectionId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(courseSections.courseId, courseId),\n    eq(courseSections.sectionKey, sectionKey)\n  );\n\n  if (excludeSectionId) {\n    whereClause = and(\n      whereClause,\n      sql`${courseSections.id} != ${excludeSectionId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: courseSections.id })\n    .from(courseSections)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n/**\n * Check if order index is unique within a course\n */\nexport const isOrderIndexUnique = async (\n  courseId: string,\n  orderIndex: number,\n  excludeSectionId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(courseSections.courseId, courseId),\n    eq(courseSections.orderIndex, orderIndex)\n  );\n\n  if (excludeSectionId) {\n    whereClause = and(\n      whereClause,\n      sql`${courseSections.id} != ${excludeSectionId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: courseSections.id })\n    .from(courseSections)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n// =============================================================================\n// COURSE SECTION STATISTICS QUERIES\n// =============================================================================\n\n/**\n * Get section statistics\n */\nexport const getSectionStatistics = async (\n  sectionId: string\n): Promise<{\n  contentBlocksCount: number;\n  quizQuestionsCount: number;\n  publishedContentBlocks: number;\n  publishedQuizQuestions: number;\n} | null> => {\n  const section = await getCourseSectionById(sectionId);\n  if (!section) return null;\n\n  // Count content blocks\n  const contentBlocksResult = await db\n    .select({\n      total: sql<number>`count(*)`,\n      published: sql<number>`count(*) filter (where ${contentBlocks.sectionId} = ${sectionId})`,\n    })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId));\n\n  // Count quiz questions\n  const quizQuestionsResult = await db\n    .select({\n      total: sql<number>`count(*)`,\n      published: sql<number>`count(*) filter (where ${quizQuestions.isPublished} = true)`,\n    })\n    .from(quizQuestions)\n    .where(eq(quizQuestions.sectionId, sectionId));\n\n  return {\n    contentBlocksCount: contentBlocksResult[0]?.total || 0,\n    quizQuestionsCount: quizQuestionsResult[0]?.total || 0,\n    publishedContentBlocks: contentBlocksResult[0]?.published || 0,\n    publishedQuizQuestions: quizQuestionsResult[0]?.published || 0,\n  };\n};\n\n// =============================================================================\n// COURSE SECTION SEARCH QUERIES\n// =============================================================================\n\n/**\n * Search course sections\n */\nexport const searchCourseSections = async (\n  courseId: string,\n  searchTerm: string,\n  options: {\n    includeUnpublished?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<CourseSection[]> => {\n  const { includeUnpublished = false, limit = 20, offset = 0 } = options;\n\n  let whereClause = and(\n    eq(courseSections.courseId, courseId),\n    sql`${courseSections.title} ilike ${`%${searchTerm}%`}`\n  );\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(courseSections.isPublished, true));\n  }\n\n  const result = await db\n    .select()\n    .from(courseSections)\n    .where(whereClause)\n    .orderBy(asc(courseSections.orderIndex))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// COURSE SECTION ACCESS CONTROL QUERIES\n// =============================================================================\n\n/**\n * Get sections accessible to user based on role and course access\n */\nexport const getAccessibleCourseSections = async (\n  courseId: string,\n  userRole: string,\n  options: {\n    includeUnpublished?: boolean;\n  } = {}\n): Promise<CourseSection[]> => {\n  const { includeUnpublished = false } = options;\n\n  // Safety admins can access all sections\n  if (userRole === \"safety_admin\") {\n    return getCourseSectionsByCourseId(courseId, { includeUnpublished: true });\n  }\n\n  // Other roles can only access published sections unless explicitly allowed\n  return getCourseSectionsByCourseId(courseId, { includeUnpublished });\n};\n\n/**\n * Check if user can access a specific section\n */\nexport const canUserAccessSection = async (\n  sectionId: string,\n  userRole: string\n): Promise<boolean> => {\n  const section = await getCourseSectionById(sectionId);\n  if (!section) return false;\n\n  // Safety admins can access all sections\n  if (userRole === \"safety_admin\") return true;\n\n  // Other roles can only access published sections\n  return section.isPublished;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3538, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/queries/content-blocks.ts"],"sourcesContent":["import { eq, and, desc, asc, sql } from \"drizzle-orm\";\nimport { db } from \"../index\";\nimport {\n  contentBlocks,\n  courseSections,\n  ContentBlock,\n  NewContentBlock,\n  ContentBlockType,\n} from \"../schema\";\n\n/**\n * Content Block Query Operations\n * Handles database queries for content blocks with proper access control\n */\n\n// =============================================================================\n// BASIC CONTENT BLOCK QUERIES\n// =============================================================================\n\n/**\n * Get content block by ID\n */\nexport const getContentBlockById = async (\n  blockId: string\n): Promise<ContentBlock | null> => {\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(eq(contentBlocks.id, blockId))\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get all content blocks for a section\n */\nexport const getContentBlocksBySectionId = async (\n  sectionId: string,\n  options: {\n    blockType?: ContentBlockType;\n    sortBy?: \"orderIndex\" | \"blockType\" | \"createdAt\";\n    sortOrder?: \"asc\" | \"desc\";\n  } = {}\n): Promise<ContentBlock[]> => {\n  const { blockType, sortBy = \"orderIndex\", sortOrder = \"asc\" } = options;\n\n  let whereClause = eq(contentBlocks.sectionId, sectionId);\n\n  if (blockType) {\n    whereClause = and(whereClause, eq(contentBlocks.blockType, blockType));\n  }\n\n  const orderBy =\n    sortOrder === \"desc\"\n      ? desc(contentBlocks[sortBy])\n      : asc(contentBlocks[sortBy]);\n\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(whereClause)\n    .orderBy(orderBy);\n\n  return result;\n};\n\n/**\n * Get content blocks by type across all sections\n */\nexport const getContentBlocksByType = async (\n  blockType: ContentBlockType,\n  options: {\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<ContentBlock[]> => {\n  const { limit = 20, offset = 0 } = options;\n\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(eq(contentBlocks.blockType, blockType))\n    .orderBy(asc(contentBlocks.createdAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// CONTENT BLOCK CREATION AND UPDATES\n// =============================================================================\n\n/**\n * Create a new content block\n */\nexport const createContentBlock = async (\n  blockData: NewContentBlock\n): Promise<ContentBlock> => {\n  const result = await db.insert(contentBlocks).values(blockData).returning();\n\n  return result[0];\n};\n\n/**\n * Update content block\n */\nexport const updateContentBlock = async (\n  blockId: string,\n  updates: Partial<ContentBlock>\n): Promise<ContentBlock | null> => {\n  const result = await db\n    .update(contentBlocks)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(eq(contentBlocks.id, blockId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Delete content block\n */\nexport const deleteContentBlock = async (blockId: string): Promise<boolean> => {\n  const result = await db\n    .delete(contentBlocks)\n    .where(eq(contentBlocks.id, blockId))\n    .returning();\n\n  return result.length > 0;\n};\n\n// =============================================================================\n// CONTENT BLOCK ORDERING OPERATIONS\n// =============================================================================\n\n/**\n * Update content block order\n */\nexport const updateContentBlockOrder = async (\n  blockId: string,\n  newOrderIndex: number\n): Promise<ContentBlock | null> => {\n  const result = await db\n    .update(contentBlocks)\n    .set({\n      orderIndex: newOrderIndex,\n      updatedAt: new Date(),\n    })\n    .where(eq(contentBlocks.id, blockId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Reorder multiple content blocks\n */\nexport const reorderContentBlocks = async (\n  sectionId: string,\n  blockOrders: Array<{ blockId: string; orderIndex: number }>\n): Promise<ContentBlock[]> => {\n  const results: ContentBlock[] = [];\n\n  for (const order of blockOrders) {\n    const result = await updateContentBlockOrder(\n      order.blockId,\n      order.orderIndex\n    );\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  return results;\n};\n\n/**\n * Get next available order index for a section\n */\nexport const getNextContentBlockOrderIndex = async (\n  sectionId: string\n): Promise<number> => {\n  const result = await db\n    .select({ maxOrder: sql<number>`max(${contentBlocks.orderIndex})` })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId));\n\n  return (result[0]?.maxOrder || 0) + 1;\n};\n\n// =============================================================================\n// CONTENT BLOCK VALIDATION QUERIES\n// =============================================================================\n\n/**\n * Check if order index is unique within a section\n */\nexport const isContentBlockOrderIndexUnique = async (\n  sectionId: string,\n  orderIndex: number,\n  excludeBlockId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(contentBlocks.sectionId, sectionId),\n    eq(contentBlocks.orderIndex, orderIndex)\n  );\n\n  if (excludeBlockId) {\n    whereClause = and(\n      whereClause,\n      sql`${contentBlocks.id} != ${excludeBlockId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: contentBlocks.id })\n    .from(contentBlocks)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n/**\n * Validate content block content based on block type\n */\nexport const validateContentBlockContent = async (\n  blockType: ContentBlockType,\n  content: Record<string, unknown>\n): Promise<{ isValid: boolean; errors: string[] }> => {\n  const errors: string[] = [];\n\n  switch (blockType) {\n    case \"hero\":\n      if (!content.title) errors.push(\"Hero blocks require a title\");\n      break;\n\n    case \"text\":\n      if (!content.content && !content.text) {\n        errors.push(\"Text blocks require content or text\");\n      }\n      break;\n\n    case \"image\":\n      if (!content.image?.url) {\n        errors.push(\"Image blocks require an image URL\");\n      }\n      break;\n\n    case \"table\":\n      if (!content.table?.headers || !content.table?.rows) {\n        errors.push(\"Table blocks require headers and rows\");\n      }\n      break;\n\n    case \"list\":\n      if (!content.list?.items || !Array.isArray(content.list.items)) {\n        errors.push(\"List blocks require items array\");\n      }\n      break;\n\n    case \"callout\":\n      if (!content.callout?.type || !content.callout?.content) {\n        errors.push(\"Callout blocks require type and content\");\n      }\n      break;\n\n    case \"quote\":\n      if (!content.quote?.text) {\n        errors.push(\"Quote blocks require text\");\n      }\n      break;\n\n    case \"video\":\n      if (!content.video?.url) {\n        errors.push(\"Video blocks require a video URL\");\n      }\n      break;\n\n    case \"audio\":\n      if (!content.audio?.url) {\n        errors.push(\"Audio blocks require an audio URL\");\n      }\n      break;\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n// =============================================================================\n// CONTENT BLOCK STATISTICS QUERIES\n// =============================================================================\n\n/**\n * Get content block statistics for a section\n */\nexport const getContentBlockStatistics = async (\n  sectionId: string\n): Promise<{\n  totalBlocks: number;\n  blocksByType: Record<ContentBlockType, number>;\n  blocksWithMetadata: number;\n  blocksWithoutMetadata: number;\n} | null> => {\n  // Get total count\n  const totalResult = await db\n    .select({ count: sql<number>`count(*)` })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId));\n\n  // Get count by type\n  const typeResult = await db\n    .select({\n      blockType: contentBlocks.blockType,\n      count: sql<number>`count(*)`,\n    })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId))\n    .groupBy(contentBlocks.blockType);\n\n  // Get blocks with/without metadata\n  const metadataResult = await db\n    .select({\n      withMetadata: sql<number>`count(*) filter (where ${contentBlocks.metadata} is not null)`,\n      withoutMetadata: sql<number>`count(*) filter (where ${contentBlocks.metadata} is null)`,\n    })\n    .from(contentBlocks)\n    .where(eq(contentBlocks.sectionId, sectionId));\n\n  const blocksByType = typeResult.reduce(\n    (acc, row) => {\n      acc[row.blockType] = row.count;\n      return acc;\n    },\n    {} as Record<ContentBlockType, number>\n  );\n\n  return {\n    totalBlocks: totalResult[0]?.count || 0,\n    blocksByType,\n    blocksWithMetadata: metadataResult[0]?.withMetadata || 0,\n    blocksWithoutMetadata: metadataResult[0]?.withoutMetadata || 0,\n  };\n};\n\n// =============================================================================\n// CONTENT BLOCK SEARCH QUERIES\n// =============================================================================\n\n/**\n * Search content blocks by content\n */\nexport const searchContentBlocks = async (\n  sectionId: string,\n  searchTerm: string,\n  options: {\n    blockType?: ContentBlockType;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<ContentBlock[]> => {\n  const { blockType, limit = 20, offset = 0 } = options;\n\n  let whereClause = and(\n    eq(contentBlocks.sectionId, sectionId),\n    sql`${contentBlocks.content}::text ilike ${`%${searchTerm}%`}`\n  );\n\n  if (blockType) {\n    whereClause = and(whereClause, eq(contentBlocks.blockType, blockType));\n  }\n\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(whereClause)\n    .orderBy(asc(contentBlocks.orderIndex))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n/**\n * Search content blocks across all sections\n */\nexport const searchAllContentBlocks = async (\n  searchTerm: string,\n  options: {\n    blockType?: ContentBlockType;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<ContentBlock[]> => {\n  const { blockType, limit = 20, offset = 0 } = options;\n\n  let whereClause = sql`${contentBlocks.content}::text ilike ${`%${searchTerm}%`}`;\n\n  if (blockType) {\n    whereClause = and(whereClause, eq(contentBlocks.blockType, blockType));\n  }\n\n  const result = await db\n    .select()\n    .from(contentBlocks)\n    .where(whereClause)\n    .orderBy(asc(contentBlocks.createdAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// CONTENT BLOCK ACCESS CONTROL QUERIES\n// =============================================================================\n\n/**\n * Get content blocks accessible to user based on role and section access\n */\nexport const getAccessibleContentBlocks = async (\n  sectionId: string,\n  userRole: string,\n  options: {\n    blockType?: ContentBlockType;\n  } = {}\n): Promise<ContentBlock[]> => {\n  // All roles can access content blocks if they have section access\n  // Access control is handled at the section level\n  return getContentBlocksBySectionId(sectionId, options);\n};\n\n/**\n * Check if user can access a specific content block\n */\nexport const canUserAccessContentBlock = async (\n  blockId: string,\n  userRole: string\n): Promise<boolean> => {\n  const block = await getContentBlockById(blockId);\n  if (!block) return false;\n\n  // Access control is handled at the section level\n  // If user can access the section, they can access the content blocks\n  return true;\n};\n\n// =============================================================================\n// CONTENT BLOCK BULK OPERATIONS\n// =============================================================================\n\n/**\n * Bulk create content blocks\n */\nexport const bulkCreateContentBlocks = async (\n  blocksData: NewContentBlock[]\n): Promise<ContentBlock[]> => {\n  const result = await db.insert(contentBlocks).values(blocksData).returning();\n\n  return result;\n};\n\n/**\n * Bulk update content blocks\n */\nexport const bulkUpdateContentBlocks = async (\n  updates: Array<{ id: string; updates: Partial<ContentBlock> }>\n): Promise<ContentBlock[]> => {\n  const results: ContentBlock[] = [];\n\n  for (const update of updates) {\n    const result = await updateContentBlock(update.id, update.updates);\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  return results;\n};\n\n/**\n * Bulk delete content blocks\n */\nexport const bulkDeleteContentBlocks = async (\n  blockIds: string[]\n): Promise<number> => {\n  const result = await db\n    .delete(contentBlocks)\n    .where(sql`${contentBlocks.id} = any(${blockIds})`)\n    .returning();\n\n  return result.length;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3784, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/queries/quiz-questions.ts"],"sourcesContent":["import { eq, and, desc, asc, sql } from \"drizzle-orm\";\nimport { db } from \"../index\";\nimport {\n  quizQuestions,\n  quizAttempts,\n  courseSections,\n  QuizQuestion,\n  NewQuizQuestion,\n  QuestionType,\n} from \"../schema\";\n\n/**\n * Quiz Question Query Operations\n * Handles database queries for quiz questions with proper access control\n */\n\n// =============================================================================\n// BASIC QUIZ QUESTION QUERIES\n// =============================================================================\n\n/**\n * Get quiz question by ID\n */\nexport const getQuizQuestionById = async (\n  questionId: string\n): Promise<QuizQuestion | null> => {\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(eq(quizQuestions.id, questionId))\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get quiz question by section ID and question key\n */\nexport const getQuizQuestionByKey = async (\n  sectionId: string,\n  questionKey: string\n): Promise<QuizQuestion | null> => {\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(\n      and(\n        eq(quizQuestions.sectionId, sectionId),\n        eq(quizQuestions.questionKey, questionKey)\n      )\n    )\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get all quiz questions for a section\n */\nexport const getQuizQuestionsBySectionId = async (\n  sectionId: string,\n  options: {\n    questionType?: QuestionType;\n    includeUnpublished?: boolean;\n    sortBy?: \"orderIndex\" | \"questionKey\" | \"createdAt\";\n    sortOrder?: \"asc\" | \"desc\";\n  } = {}\n): Promise<QuizQuestion[]> => {\n  const {\n    questionType,\n    includeUnpublished = false,\n    sortBy = \"orderIndex\",\n    sortOrder = \"asc\",\n  } = options;\n\n  let whereClause = eq(quizQuestions.sectionId, sectionId);\n\n  if (questionType) {\n    whereClause = and(\n      whereClause,\n      eq(quizQuestions.questionType, questionType)\n    );\n  }\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(quizQuestions.isPublished, true));\n  }\n\n  const orderBy =\n    sortOrder === \"desc\"\n      ? desc(quizQuestions[sortBy])\n      : asc(quizQuestions[sortBy]);\n\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(whereClause)\n    .orderBy(orderBy);\n\n  return result;\n};\n\n/**\n * Get quiz questions by type across all sections\n */\nexport const getQuizQuestionsByType = async (\n  questionType: QuestionType,\n  options: {\n    includeUnpublished?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<QuizQuestion[]> => {\n  const { includeUnpublished = false, limit = 20, offset = 0 } = options;\n\n  let whereClause = eq(quizQuestions.questionType, questionType);\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(quizQuestions.isPublished, true));\n  }\n\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(whereClause)\n    .orderBy(asc(quizQuestions.createdAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// QUIZ QUESTION CREATION AND UPDATES\n// =============================================================================\n\n/**\n * Create a new quiz question\n */\nexport const createQuizQuestion = async (\n  questionData: NewQuizQuestion\n): Promise<QuizQuestion> => {\n  const result = await db\n    .insert(quizQuestions)\n    .values(questionData)\n    .returning();\n\n  return result[0];\n};\n\n/**\n * Update quiz question\n */\nexport const updateQuizQuestion = async (\n  questionId: string,\n  updates: Partial<QuizQuestion>\n): Promise<QuizQuestion | null> => {\n  const result = await db\n    .update(quizQuestions)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(eq(quizQuestions.id, questionId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Delete quiz question\n */\nexport const deleteQuizQuestion = async (\n  questionId: string\n): Promise<boolean> => {\n  const result = await db\n    .delete(quizQuestions)\n    .where(eq(quizQuestions.id, questionId))\n    .returning();\n\n  return result.length > 0;\n};\n\n// =============================================================================\n// QUIZ QUESTION ORDERING OPERATIONS\n// =============================================================================\n\n/**\n * Update quiz question order\n */\nexport const updateQuizQuestionOrder = async (\n  questionId: string,\n  newOrderIndex: number\n): Promise<QuizQuestion | null> => {\n  const result = await db\n    .update(quizQuestions)\n    .set({\n      orderIndex: newOrderIndex,\n      updatedAt: new Date(),\n    })\n    .where(eq(quizQuestions.id, questionId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Reorder multiple quiz questions\n */\nexport const reorderQuizQuestions = async (\n  sectionId: string,\n  questionOrders: Array<{ questionId: string; orderIndex: number }>\n): Promise<QuizQuestion[]> => {\n  const results: QuizQuestion[] = [];\n\n  for (const order of questionOrders) {\n    const result = await updateQuizQuestionOrder(\n      order.questionId,\n      order.orderIndex\n    );\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  return results;\n};\n\n/**\n * Get next available order index for a section\n */\nexport const getNextQuizQuestionOrderIndex = async (\n  sectionId: string\n): Promise<number> => {\n  const result = await db\n    .select({ maxOrder: sql<number>`max(${quizQuestions.orderIndex})` })\n    .from(quizQuestions)\n    .where(eq(quizQuestions.sectionId, sectionId));\n\n  return (result[0]?.maxOrder || 0) + 1;\n};\n\n// =============================================================================\n// QUIZ QUESTION VALIDATION QUERIES\n// =============================================================================\n\n/**\n * Check if question key is unique within a section\n */\nexport const isQuestionKeyUnique = async (\n  sectionId: string,\n  questionKey: string,\n  excludeQuestionId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(quizQuestions.sectionId, sectionId),\n    eq(quizQuestions.questionKey, questionKey)\n  );\n\n  if (excludeQuestionId) {\n    whereClause = and(\n      whereClause,\n      sql`${quizQuestions.id} != ${excludeQuestionId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: quizQuestions.id })\n    .from(quizQuestions)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n/**\n * Check if order index is unique within a section\n */\nexport const isQuizQuestionOrderIndexUnique = async (\n  sectionId: string,\n  orderIndex: number,\n  excludeQuestionId?: string\n): Promise<boolean> => {\n  let whereClause = and(\n    eq(quizQuestions.sectionId, sectionId),\n    eq(quizQuestions.orderIndex, orderIndex)\n  );\n\n  if (excludeQuestionId) {\n    whereClause = and(\n      whereClause,\n      sql`${quizQuestions.id} != ${excludeQuestionId}`\n    );\n  }\n\n  const result = await db\n    .select({ id: quizQuestions.id })\n    .from(quizQuestions)\n    .where(whereClause)\n    .limit(1);\n\n  return result.length === 0;\n};\n\n/**\n * Validate quiz question content based on question type\n */\nexport const validateQuizQuestionContent = async (\n  questionType: QuestionType,\n  questionText: string,\n  options?: Record<string, string>,\n  correctAnswer?: unknown\n): Promise<{ isValid: boolean; errors: string[] }> => {\n  const errors: string[] = [];\n\n  if (!questionText || questionText.trim().length === 0) {\n    errors.push(\"Question text is required\");\n  }\n\n  switch (questionType) {\n    case \"true-false\":\n      if (typeof correctAnswer !== \"boolean\") {\n        errors.push(\"True/false questions require a boolean correct answer\");\n      }\n      break;\n\n    case \"multiple-choice\":\n      if (!options || Object.keys(options).length === 0) {\n        errors.push(\"Multiple choice questions require options\");\n      }\n      if (\n        typeof correctAnswer !== \"string\" ||\n        !options ||\n        !(correctAnswer in options)\n      ) {\n        errors.push(\"Correct answer must be one of the provided options\");\n      }\n      break;\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n// =============================================================================\n// QUIZ ATTEMPT QUERIES\n// =============================================================================\n\n/**\n * Create quiz attempt\n */\nexport const createQuizAttempt = async (attemptData: {\n  userId: string;\n  quizQuestionId: string;\n  userAnswer: unknown;\n  isCorrect: boolean;\n  timeSpentSeconds: number;\n}): Promise<any> => {\n  const result = await db\n    .insert(quizAttempts)\n    .values({\n      ...attemptData,\n      attemptedAt: new Date(),\n    })\n    .returning();\n\n  return result[0];\n};\n\n/**\n * Get quiz attempts for a user\n */\nexport const getQuizAttemptsByUser = async (\n  userId: string,\n  options: {\n    quizQuestionId?: string;\n    isCorrect?: boolean;\n    dateFrom?: Date;\n    dateTo?: Date;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<any[]> => {\n  const {\n    quizQuestionId,\n    isCorrect,\n    dateFrom,\n    dateTo,\n    limit = 20,\n    offset = 0,\n  } = options;\n\n  let whereClause = eq(quizAttempts.userId, userId);\n\n  if (quizQuestionId) {\n    whereClause = and(\n      whereClause,\n      eq(quizAttempts.quizQuestionId, quizQuestionId)\n    );\n  }\n\n  if (isCorrect !== undefined) {\n    whereClause = and(whereClause, eq(quizAttempts.isCorrect, isCorrect));\n  }\n\n  if (dateFrom) {\n    whereClause = and(\n      whereClause,\n      sql`${quizAttempts.attemptedAt} >= ${dateFrom}`\n    );\n  }\n\n  if (dateTo) {\n    whereClause = and(\n      whereClause,\n      sql`${quizAttempts.attemptedAt} <= ${dateTo}`\n    );\n  }\n\n  const result = await db\n    .select()\n    .from(quizAttempts)\n    .where(whereClause)\n    .orderBy(desc(quizAttempts.attemptedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n/**\n * Get quiz attempts for a question\n */\nexport const getQuizAttemptsByQuestion = async (\n  quizQuestionId: string,\n  options: {\n    userId?: string;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<any[]> => {\n  const { userId, limit = 20, offset = 0 } = options;\n\n  let whereClause = eq(quizAttempts.quizQuestionId, quizQuestionId);\n\n  if (userId) {\n    whereClause = and(whereClause, eq(quizAttempts.userId, userId));\n  }\n\n  const result = await db\n    .select()\n    .from(quizAttempts)\n    .where(whereClause)\n    .orderBy(desc(quizAttempts.attemptedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// QUIZ QUESTION STATISTICS QUERIES\n// =============================================================================\n\n/**\n * Get quiz question statistics\n */\nexport const getQuizQuestionStatistics = async (\n  questionId: string\n): Promise<{\n  totalAttempts: number;\n  correctAttempts: number;\n  incorrectAttempts: number;\n  averageTimeSpent: number;\n  successRate: number;\n  lastAttempted?: Date;\n} | null> => {\n  const question = await getQuizQuestionById(questionId);\n  if (!question) return null;\n\n  const attempts = await getQuizAttemptsByQuestion(questionId);\n\n  const totalAttempts = attempts.length;\n  const correctAttempts = attempts.filter(a => a.isCorrect).length;\n  const incorrectAttempts = totalAttempts - correctAttempts;\n  const averageTimeSpent =\n    totalAttempts > 0\n      ? attempts.reduce((sum, a) => sum + a.timeSpentSeconds, 0) / totalAttempts\n      : 0;\n  const successRate =\n    totalAttempts > 0 ? (correctAttempts / totalAttempts) * 100 : 0;\n  const lastAttempted =\n    attempts.length > 0\n      ? attempts.sort(\n          (a, b) => b.attemptedAt.getTime() - a.attemptedAt.getTime()\n        )[0].attemptedAt\n      : undefined;\n\n  return {\n    totalAttempts,\n    correctAttempts,\n    incorrectAttempts,\n    averageTimeSpent,\n    successRate,\n    lastAttempted,\n  };\n};\n\n/**\n * Get section quiz statistics\n */\nexport const getSectionQuizStatistics = async (\n  sectionId: string\n): Promise<{\n  totalQuestions: number;\n  publishedQuestions: number;\n  totalAttempts: number;\n  averageSuccessRate: number;\n  questionsByType: Record<QuestionType, number>;\n} | null> => {\n  // Get questions in section\n  const questions = await getQuizQuestionsBySectionId(sectionId, {\n    includeUnpublished: true,\n  });\n\n  if (questions.length === 0) {\n    return {\n      totalQuestions: 0,\n      publishedQuestions: 0,\n      totalAttempts: 0,\n      averageSuccessRate: 0,\n      questionsByType: { \"true-false\": 0, \"multiple-choice\": 0 },\n    };\n  }\n\n  const publishedQuestions = questions.filter(q => q.isPublished).length;\n\n  // Get attempts for all questions\n  const questionIds = questions.map(q => q.id);\n  const attempts = await db\n    .select()\n    .from(quizAttempts)\n    .where(sql`${quizAttempts.quizQuestionId} = any(${questionIds})`);\n\n  const totalAttempts = attempts.length;\n  const correctAttempts = attempts.filter(a => a.isCorrect).length;\n  const averageSuccessRate =\n    totalAttempts > 0 ? (correctAttempts / totalAttempts) * 100 : 0;\n\n  const questionsByType = questions.reduce(\n    (acc, q) => {\n      acc[q.questionType] = (acc[q.questionType] || 0) + 1;\n      return acc;\n    },\n    {} as Record<QuestionType, number>\n  );\n\n  return {\n    totalQuestions: questions.length,\n    publishedQuestions,\n    totalAttempts,\n    averageSuccessRate,\n    questionsByType,\n  };\n};\n\n// =============================================================================\n// QUIZ QUESTION SEARCH QUERIES\n// =============================================================================\n\n/**\n * Search quiz questions by text\n */\nexport const searchQuizQuestions = async (\n  sectionId: string,\n  searchTerm: string,\n  options: {\n    questionType?: QuestionType;\n    includeUnpublished?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<QuizQuestion[]> => {\n  const {\n    questionType,\n    includeUnpublished = false,\n    limit = 20,\n    offset = 0,\n  } = options;\n\n  let whereClause = and(\n    eq(quizQuestions.sectionId, sectionId),\n    sql`${quizQuestions.questionText} ilike ${`%${searchTerm}%`}`\n  );\n\n  if (questionType) {\n    whereClause = and(\n      whereClause,\n      eq(quizQuestions.questionType, questionType)\n    );\n  }\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(quizQuestions.isPublished, true));\n  }\n\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(whereClause)\n    .orderBy(asc(quizQuestions.orderIndex))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n/**\n * Search quiz questions across all sections\n */\nexport const searchAllQuizQuestions = async (\n  searchTerm: string,\n  options: {\n    questionType?: QuestionType;\n    includeUnpublished?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<QuizQuestion[]> => {\n  const {\n    questionType,\n    includeUnpublished = false,\n    limit = 20,\n    offset = 0,\n  } = options;\n\n  let whereClause = sql`${quizQuestions.questionText} ilike ${`%${searchTerm}%`}`;\n\n  if (questionType) {\n    whereClause = and(\n      whereClause,\n      eq(quizQuestions.questionType, questionType)\n    );\n  }\n\n  if (!includeUnpublished) {\n    whereClause = and(whereClause, eq(quizQuestions.isPublished, true));\n  }\n\n  const result = await db\n    .select()\n    .from(quizQuestions)\n    .where(whereClause)\n    .orderBy(asc(quizQuestions.createdAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// QUIZ QUESTION ACCESS CONTROL QUERIES\n// =============================================================================\n\n/**\n * Get quiz questions accessible to user based on role and section access\n */\nexport const getAccessibleQuizQuestions = async (\n  sectionId: string,\n  userRole: string,\n  options: {\n    questionType?: QuestionType;\n  } = {}\n): Promise<QuizQuestion[]> => {\n  // All roles can access published quiz questions if they have section access\n  // Access control is handled at the section level\n  return getQuizQuestionsBySectionId(sectionId, {\n    ...options,\n    includeUnpublished: userRole === \"safety_admin\",\n  });\n};\n\n/**\n * Check if user can access a specific quiz question\n */\nexport const canUserAccessQuizQuestion = async (\n  questionId: string,\n  userRole: string\n): Promise<boolean> => {\n  const question = await getQuizQuestionById(questionId);\n  if (!question) return false;\n\n  // Safety admins can access all questions\n  if (userRole === \"safety_admin\") return true;\n\n  // Other roles can only access published questions\n  return question.isPublished;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4086, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/db/queries/user-progress.ts"],"sourcesContent":["import { eq, and, desc, asc, sql, gte, lte } from \"drizzle-orm\";\nimport { db } from \"../index\";\nimport {\n  userProgress,\n  courses,\n  courseSections,\n  UserProgress,\n  NewUserProgress,\n} from \"../schema\";\n\n/**\n * User Progress Query Operations\n * Handles database queries for user progress tracking with proper access control\n */\n\n// =============================================================================\n// BASIC USER PROGRESS QUERIES\n// =============================================================================\n\n/**\n * Get user progress by ID\n */\nexport const getUserProgressById = async (\n  progressId: string\n): Promise<UserProgress | null> => {\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(eq(userProgress.id, progressId))\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get user progress by user ID and section ID\n */\nexport const getUserProgressByUserAndSection = async (\n  userId: string,\n  sectionId: string\n): Promise<UserProgress | null> => {\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(\n      and(\n        eq(userProgress.userId, userId),\n        eq(userProgress.sectionId, sectionId)\n      )\n    )\n    .limit(1);\n\n  return result[0] || null;\n};\n\n/**\n * Get all progress records for a user\n */\nexport const getUserProgressByUser = async (\n  userId: string,\n  options: {\n    courseId?: string;\n    sectionId?: string;\n    isCompleted?: boolean;\n    completionPercentageMin?: number;\n    completionPercentageMax?: number;\n    dateFrom?: Date;\n    dateTo?: Date;\n    sortBy?: \"lastAccessedAt\" | \"completedAt\" | \"createdAt\";\n    sortOrder?: \"asc\" | \"desc\";\n  } = {}\n): Promise<UserProgress[]> => {\n  const {\n    courseId,\n    sectionId,\n    isCompleted,\n    completionPercentageMin,\n    completionPercentageMax,\n    dateFrom,\n    dateTo,\n    sortBy = \"lastAccessedAt\",\n    sortOrder = \"desc\",\n  } = options;\n\n  let whereClause = eq(userProgress.userId, userId);\n\n  if (courseId) {\n    whereClause = and(whereClause, eq(userProgress.courseId, courseId));\n  }\n\n  if (sectionId) {\n    whereClause = and(whereClause, eq(userProgress.sectionId, sectionId));\n  }\n\n  if (isCompleted !== undefined) {\n    whereClause = and(whereClause, eq(userProgress.isCompleted, isCompleted));\n  }\n\n  if (completionPercentageMin !== undefined) {\n    whereClause = and(\n      whereClause,\n      gte(userProgress.completionPercentage, completionPercentageMin)\n    );\n  }\n\n  if (completionPercentageMax !== undefined) {\n    whereClause = and(\n      whereClause,\n      lte(userProgress.completionPercentage, completionPercentageMax)\n    );\n  }\n\n  if (dateFrom) {\n    whereClause = and(whereClause, gte(userProgress.lastAccessedAt, dateFrom));\n  }\n\n  if (dateTo) {\n    whereClause = and(whereClause, lte(userProgress.lastAccessedAt, dateTo));\n  }\n\n  const orderBy =\n    sortOrder === \"desc\"\n      ? desc(userProgress[sortBy])\n      : asc(userProgress[sortBy]);\n\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(whereClause)\n    .orderBy(orderBy);\n\n  return result;\n};\n\n/**\n * Get all progress records for a course\n */\nexport const getUserProgressByCourse = async (\n  courseId: string,\n  options: {\n    userId?: string;\n    isCompleted?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<UserProgress[]> => {\n  const { userId, isCompleted, limit = 20, offset = 0 } = options;\n\n  let whereClause = eq(userProgress.courseId, courseId);\n\n  if (userId) {\n    whereClause = and(whereClause, eq(userProgress.userId, userId));\n  }\n\n  if (isCompleted !== undefined) {\n    whereClause = and(whereClause, eq(userProgress.isCompleted, isCompleted));\n  }\n\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(whereClause)\n    .orderBy(desc(userProgress.lastAccessedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n/**\n * Get all progress records for a section\n */\nexport const getUserProgressBySection = async (\n  sectionId: string,\n  options: {\n    userId?: string;\n    isCompleted?: boolean;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<UserProgress[]> => {\n  const { userId, isCompleted, limit = 20, offset = 0 } = options;\n\n  let whereClause = eq(userProgress.sectionId, sectionId);\n\n  if (userId) {\n    whereClause = and(whereClause, eq(userProgress.userId, userId));\n  }\n\n  if (isCompleted !== undefined) {\n    whereClause = and(whereClause, eq(userProgress.isCompleted, isCompleted));\n  }\n\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(whereClause)\n    .orderBy(desc(userProgress.lastAccessedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// USER PROGRESS CREATION AND UPDATES\n// =============================================================================\n\n/**\n * Create or update user progress\n */\nexport const upsertUserProgress = async (\n  progressData: NewUserProgress\n): Promise<UserProgress> => {\n  const result = await db\n    .insert(userProgress)\n    .values(progressData)\n    .onConflictDoUpdate({\n      target: [userProgress.userId, userProgress.sectionId],\n      set: {\n        isCompleted: progressData.isCompleted,\n        completionPercentage: progressData.completionPercentage,\n        timeSpentSeconds: progressData.timeSpentSeconds,\n        lastAccessedAt: progressData.lastAccessedAt,\n        completedAt: progressData.completedAt,\n        updatedAt: new Date(),\n      },\n    })\n    .returning();\n\n  return result[0];\n};\n\n/**\n * Update user progress\n */\nexport const updateUserProgress = async (\n  progressId: string,\n  updates: Partial<UserProgress>\n): Promise<UserProgress | null> => {\n  const result = await db\n    .update(userProgress)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(eq(userProgress.id, progressId))\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Update user progress by user and section\n */\nexport const updateUserProgressByUserAndSection = async (\n  userId: string,\n  sectionId: string,\n  updates: Partial<UserProgress>\n): Promise<UserProgress | null> => {\n  const result = await db\n    .update(userProgress)\n    .set({\n      ...updates,\n      updatedAt: new Date(),\n    })\n    .where(\n      and(\n        eq(userProgress.userId, userId),\n        eq(userProgress.sectionId, sectionId)\n      )\n    )\n    .returning();\n\n  return result[0] || null;\n};\n\n/**\n * Delete user progress\n */\nexport const deleteUserProgress = async (\n  progressId: string\n): Promise<boolean> => {\n  const result = await db\n    .delete(userProgress)\n    .where(eq(userProgress.id, progressId))\n    .returning();\n\n  return result.length > 0;\n};\n\n// =============================================================================\n// COURSE COMPLETION STATUS QUERIES\n// =============================================================================\n\n/**\n * Calculate course completion status for a user\n */\nexport const calculateCourseCompletionStatus = async (\n  userId: string,\n  courseId: string\n): Promise<{\n  courseId: string;\n  userId: string;\n  totalSections: number;\n  completedSections: number;\n  completionPercentage: number;\n  timeSpentSeconds: number;\n  lastAccessedAt: Date;\n  completedAt?: Date;\n} | null> => {\n  // Get all sections for the course\n  const sections = await db\n    .select()\n    .from(courseSections)\n    .where(eq(courseSections.courseId, courseId));\n\n  if (sections.length === 0) return null;\n\n  // Get user progress for this course\n  const progressRecords = await getUserProgressByUser(userId, { courseId });\n\n  const completedSections = progressRecords.filter(p => p.isCompleted).length;\n  const completionPercentage = Math.round(\n    (completedSections / sections.length) * 100\n  );\n  const timeSpentSeconds = progressRecords.reduce(\n    (sum, p) => sum + p.timeSpentSeconds,\n    0\n  );\n\n  const lastAccessedAt =\n    progressRecords.length > 0\n      ? progressRecords.reduce(\n          (latest, p) =>\n            p.lastAccessedAt > latest ? p.lastAccessedAt : latest,\n          progressRecords[0].lastAccessedAt\n        )\n      : new Date();\n\n  const completedAt =\n    completedSections === sections.length && sections.length > 0\n      ? progressRecords.reduce(\n          (latest, p) =>\n            p.completedAt && p.completedAt > latest ? p.completedAt : latest,\n          progressRecords[0].completedAt || new Date(0)\n        )\n      : undefined;\n\n  return {\n    courseId,\n    userId,\n    totalSections: sections.length,\n    completedSections,\n    completionPercentage,\n    timeSpentSeconds,\n    lastAccessedAt,\n    completedAt:\n      completedAt && completedAt.getTime() > 0 ? completedAt : undefined,\n  };\n};\n\n/**\n * Get course completion status for multiple users\n */\nexport const getCourseCompletionStatusForUsers = async (\n  courseId: string,\n  userIds: string[]\n): Promise<\n  Array<{\n    userId: string;\n    courseId: string;\n    totalSections: number;\n    completedSections: number;\n    completionPercentage: number;\n    timeSpentSeconds: number;\n    lastAccessedAt: Date;\n    completedAt?: Date;\n  }>\n> => {\n  const results = [];\n\n  for (const userId of userIds) {\n    const status = await calculateCourseCompletionStatus(userId, courseId);\n    if (status) {\n      results.push(status);\n    }\n  }\n\n  return results;\n};\n\n// =============================================================================\n// USER PROGRESS ANALYTICS QUERIES\n// =============================================================================\n\n/**\n * Get user progress analytics\n */\nexport const getUserProgressAnalytics = async (\n  userId: string\n): Promise<{\n  userId: string;\n  totalCourses: number;\n  completedCourses: number;\n  inProgressCourses: number;\n  totalTimeSpent: number;\n  averageCompletionRate: number;\n  lastActivity?: Date;\n  coursesByStatus: {\n    completed: string[];\n    inProgress: string[];\n    notStarted: string[];\n  };\n} | null> => {\n  // Get all courses\n  const allCourses = await db\n    .select()\n    .from(courses)\n    .where(eq(courses.isPublished, true));\n\n  if (allCourses.length === 0) {\n    return {\n      userId,\n      totalCourses: 0,\n      completedCourses: 0,\n      inProgressCourses: 0,\n      totalTimeSpent: 0,\n      averageCompletionRate: 0,\n      coursesByStatus: {\n        completed: [],\n        inProgress: [],\n        notStarted: [],\n      },\n    };\n  }\n\n  // Get user progress for all courses\n  const userProgressRecords = await getUserProgressByUser(userId);\n\n  const totalCourses = allCourses.length;\n  let completedCourses = 0;\n  let inProgressCourses = 0;\n  const totalTimeSpent = userProgressRecords.reduce(\n    (sum, p) => sum + p.timeSpentSeconds,\n    0\n  );\n\n  const coursesByStatus = {\n    completed: [] as string[],\n    inProgress: [] as string[],\n    notStarted: [] as string[],\n  };\n\n  // Analyze each course\n  for (const course of allCourses) {\n    const courseProgress = userProgressRecords.filter(\n      p => p.courseId === course.id\n    );\n    const completedSections = courseProgress.filter(p => p.isCompleted).length;\n    const totalSections = courseProgress.length;\n\n    if (totalSections === 0) {\n      coursesByStatus.notStarted.push(course.id);\n    } else if (completedSections === totalSections && totalSections > 0) {\n      completedCourses++;\n      coursesByStatus.completed.push(course.id);\n    } else {\n      inProgressCourses++;\n      coursesByStatus.inProgress.push(course.id);\n    }\n  }\n\n  const averageCompletionRate =\n    totalCourses > 0 ? (completedCourses / totalCourses) * 100 : 0;\n\n  const lastActivity =\n    userProgressRecords.length > 0\n      ? userProgressRecords.reduce(\n          (latest, p) =>\n            p.lastAccessedAt > latest ? p.lastAccessedAt : latest,\n          userProgressRecords[0].lastAccessedAt\n        )\n      : undefined;\n\n  return {\n    userId,\n    totalCourses,\n    completedCourses,\n    inProgressCourses,\n    totalTimeSpent,\n    averageCompletionRate,\n    lastActivity,\n    coursesByStatus,\n  };\n};\n\n// =============================================================================\n// USER PROGRESS STATISTICS QUERIES\n// =============================================================================\n\n/**\n * Get course progress statistics\n */\nexport const getCourseProgressStatistics = async (\n  courseId: string\n): Promise<{\n  totalUsers: number;\n  completedUsers: number;\n  inProgressUsers: number;\n  averageCompletionRate: number;\n  averageTimeSpent: number;\n  lastActivity?: Date;\n} | null> => {\n  const course = await db\n    .select()\n    .from(courses)\n    .where(eq(courses.id, courseId))\n    .limit(1);\n\n  if (!course[0]) return null;\n\n  // Get all progress records for this course\n  const progressRecords = await getUserProgressByCourse(courseId);\n\n  if (progressRecords.length === 0) {\n    return {\n      totalUsers: 0,\n      completedUsers: 0,\n      inProgressUsers: 0,\n      averageCompletionRate: 0,\n      averageTimeSpent: 0,\n    };\n  }\n\n  // Group by user\n  const userProgressMap = new Map<string, UserProgress[]>();\n  progressRecords.forEach(p => {\n    const existing = userProgressMap.get(p.userId) || [];\n    existing.push(p);\n    userProgressMap.set(p.userId, existing);\n  });\n\n  const totalUsers = userProgressMap.size;\n  let completedUsers = 0;\n  let inProgressUsers = 0;\n  let totalTimeSpent = 0;\n\n  // Get total sections for the course\n  const sections = await db\n    .select()\n    .from(courseSections)\n    .where(eq(courseSections.courseId, courseId));\n\n  const totalSections = sections.length;\n\n  // Analyze each user's progress\n  for (const [userId, userProgress] of userProgressMap) {\n    const completedSections = userProgress.filter(p => p.isCompleted).length;\n    const userTimeSpent = userProgress.reduce(\n      (sum, p) => sum + p.timeSpentSeconds,\n      0\n    );\n    totalTimeSpent += userTimeSpent;\n\n    if (completedSections === totalSections && totalSections > 0) {\n      completedUsers++;\n    } else if (completedSections > 0) {\n      inProgressUsers++;\n    }\n  }\n\n  const averageCompletionRate =\n    totalUsers > 0 ? (completedUsers / totalUsers) * 100 : 0;\n  const averageTimeSpent = totalUsers > 0 ? totalTimeSpent / totalUsers : 0;\n\n  const lastActivity =\n    progressRecords.length > 0\n      ? progressRecords.reduce(\n          (latest, p) =>\n            p.lastAccessedAt > latest ? p.lastAccessedAt : latest,\n          progressRecords[0].lastAccessedAt\n        )\n      : undefined;\n\n  return {\n    totalUsers,\n    completedUsers,\n    inProgressUsers,\n    averageCompletionRate,\n    averageTimeSpent,\n    lastActivity,\n  };\n};\n\n// =============================================================================\n// USER PROGRESS SEARCH QUERIES\n// =============================================================================\n\n/**\n * Search user progress records\n */\nexport const searchUserProgress = async (\n  searchTerm: string,\n  options: {\n    userId?: string;\n    courseId?: string;\n    limit?: number;\n    offset?: number;\n  } = {}\n): Promise<UserProgress[]> => {\n  const { userId, courseId, limit = 20, offset = 0 } = options;\n\n  let whereClause = sql`${userProgress.userId} ilike ${`%${searchTerm}%`}`;\n\n  if (userId) {\n    whereClause = and(whereClause, eq(userProgress.userId, userId));\n  }\n\n  if (courseId) {\n    whereClause = and(whereClause, eq(userProgress.courseId, courseId));\n  }\n\n  const result = await db\n    .select()\n    .from(userProgress)\n    .where(whereClause)\n    .orderBy(desc(userProgress.lastAccessedAt))\n    .limit(limit)\n    .offset(offset);\n\n  return result;\n};\n\n// =============================================================================\n// USER PROGRESS ACCESS CONTROL QUERIES\n// =============================================================================\n\n/**\n * Get user progress accessible to user based on role and ownership\n */\nexport const getAccessibleUserProgress = async (\n  userId: string,\n  userRole: string,\n  options: {\n    courseId?: string;\n    sectionId?: string;\n  } = {}\n): Promise<UserProgress[]> => {\n  // Users can always access their own progress\n  if (userRole === \"employee\" || userRole === \"hr_admin\") {\n    return getUserProgressByUser(userId, options);\n  }\n\n  // Safety admins can access all progress\n  if (userRole === \"safety_admin\") {\n    return getUserProgressByUser(userId, options);\n  }\n\n  // Plant managers can access progress in their plant\n  if (userRole === \"plant_manager\") {\n    return getUserProgressByUser(userId, options);\n  }\n\n  // Default: users can only access their own progress\n  return getUserProgressByUser(userId, options);\n};\n\n/**\n * Check if user can access a specific progress record\n */\nexport const canUserAccessProgress = async (\n  progressId: string,\n  userId: string,\n  userRole: string\n): Promise<boolean> => {\n  const progress = await getUserProgressById(progressId);\n  if (!progress) return false;\n\n  // Users can always access their own progress\n  if (progress.userId === userId) return true;\n\n  // Safety admins can access all progress\n  if (userRole === \"safety_admin\") return true;\n\n  // Plant managers can access progress in their plant\n  if (userRole === \"plant_manager\") return true;\n\n  // HR admins can view progress in their plant\n  if (userRole === \"hr_admin\") return true;\n\n  return false;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4413, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/mappers/course-section-mappers.ts"],"sourcesContent":["import { CourseSection, NewCourseSection } from \"../db/schema/course-sections\";\nimport { ContentBlock } from \"../db/schema/content-blocks\";\nimport { QuizQuestion } from \"../db/schema/quiz-questions\";\nimport {\n  CourseSection as CourseSectionSchema,\n  CreateCourseSectionRequest,\n  UpdateCourseSectionRequest,\n  SectionWithContentResponse,\n} from \"@specchem/contracts\";\n\n/**\n * Course Section Data Mappers\n * Handles transformation between course section database entities and API responses\n */\n\n// =============================================================================\n// COURSE SECTION DATABASE → API RESPONSE MAPPERS\n// =============================================================================\n\n/**\n * Maps course section database entity to API response\n */\nexport const mapCourseSectionToApiResponse = (\n  section: CourseSection\n): CourseSectionSchema => ({\n  id: section.id,\n  courseId: section.courseId,\n  sectionKey: section.sectionKey,\n  title: section.title,\n  orderIndex: section.orderIndex,\n  iconName: section.iconName,\n  isPublished: section.isPublished,\n  createdAt: section.createdAt.toISOString(),\n  updatedAt: section.updatedAt.toISOString(),\n});\n\n/**\n * Maps multiple course sections to API responses\n */\nexport const mapCourseSectionsToApiResponses = (\n  sections: CourseSection[]\n): CourseSectionSchema[] => sections.map(mapCourseSectionToApiResponse);\n\n// =============================================================================\n// API REQUEST → COURSE SECTION DATABASE MAPPERS\n// =============================================================================\n\n/**\n * Maps create course section API request to database entity\n */\nexport const mapCreateCourseSectionRequestToDb = (\n  request: CreateCourseSectionRequest,\n  courseId: string\n): NewCourseSection => ({\n  courseId,\n  sectionKey: request.sectionKey,\n  title: request.title,\n  orderIndex: request.orderIndex,\n  iconName: request.iconName,\n  isPublished: request.isPublished,\n});\n\n/**\n * Maps update course section API request to database entity\n */\nexport const mapUpdateCourseSectionRequestToDb = (\n  request: UpdateCourseSectionRequest,\n  existingSection: CourseSection\n): Partial<CourseSection> => ({\n  ...existingSection,\n  sectionKey: request.sectionKey ?? existingSection.sectionKey,\n  title: request.title ?? existingSection.title,\n  orderIndex: request.orderIndex ?? existingSection.orderIndex,\n  iconName: request.iconName ?? existingSection.iconName,\n  isPublished: request.isPublished ?? existingSection.isPublished,\n  updatedAt: new Date(),\n});\n\n// =============================================================================\n// SECTION WITH CONTENT MAPPERS\n// =============================================================================\n\n/**\n * Maps section with content blocks and quiz questions to API response\n */\nexport const mapSectionWithContentToApiResponse = (\n  section: CourseSection,\n  contentBlocks: ContentBlock[],\n  quizQuestions: QuizQuestion[]\n): SectionWithContentResponse[\"data\"] => ({\n  section: mapCourseSectionToApiResponse(section),\n  contentBlocks: contentBlocks.map(mapContentBlockToApiResponse),\n  quizQuestions: quizQuestions.map(mapQuizQuestionToApiResponse),\n});\n\n// =============================================================================\n// HELPER MAPPERS FOR CONTENT BLOCKS AND QUIZ QUESTIONS\n// =============================================================================\n\n/**\n * Maps content block to API response (simplified for this context)\n */\nconst mapContentBlockToApiResponse = (block: ContentBlock) => ({\n  id: block.id,\n  sectionId: block.sectionId,\n  blockType: block.blockType,\n  orderIndex: block.orderIndex,\n  content: block.content,\n  metadata: block.metadata,\n  createdAt: block.createdAt.toISOString(),\n  updatedAt: block.updatedAt.toISOString(),\n});\n\n/**\n * Maps quiz question to API response (simplified for this context)\n */\nconst mapQuizQuestionToApiResponse = (question: QuizQuestion) => ({\n  id: question.id,\n  sectionId: question.sectionId,\n  questionKey: question.questionKey,\n  questionType: question.questionType,\n  questionText: question.questionText,\n  options: question.options,\n  correctAnswer: question.correctAnswer,\n  explanation: question.explanation,\n  orderIndex: question.orderIndex,\n  isPublished: question.isPublished,\n  createdAt: question.createdAt.toISOString(),\n  updatedAt: question.updatedAt.toISOString(),\n});\n\n// =============================================================================\n// SECTION ORDERING MAPPERS\n// =============================================================================\n\n/**\n * Section ordering result\n */\nexport interface SectionOrderingResult {\n  sections: CourseSectionSchema[];\n  reordered: boolean;\n  conflicts: Array<{\n    sectionId: string;\n    sectionKey: string;\n    conflict: string;\n  }>;\n}\n\n/**\n * Validates and applies section ordering\n */\nexport const validateAndApplySectionOrdering = (\n  sections: CourseSection[],\n  newOrder: Array<{ sectionId: string; orderIndex: number }>\n): SectionOrderingResult => {\n  const sectionMap = new Map(sections.map(s => [s.id, s]));\n  const conflicts: Array<{\n    sectionId: string;\n    sectionKey: string;\n    conflict: string;\n  }> = [];\n  const reorderedSections: CourseSection[] = [];\n\n  // Check for conflicts\n  const usedIndices = new Set<number>();\n  for (const orderItem of newOrder) {\n    const section = sectionMap.get(orderItem.sectionId);\n    if (!section) {\n      conflicts.push({\n        sectionId: orderItem.sectionId,\n        sectionKey: \"\",\n        conflict: \"Section not found\",\n      });\n      continue;\n    }\n\n    if (usedIndices.has(orderItem.orderIndex)) {\n      conflicts.push({\n        sectionId: orderItem.sectionId,\n        sectionKey: section.sectionKey,\n        conflict: \"Duplicate order index\",\n      });\n    } else {\n      usedIndices.add(orderItem.orderIndex);\n      reorderedSections.push({\n        ...section,\n        orderIndex: orderItem.orderIndex,\n        updatedAt: new Date(),\n      });\n    }\n  }\n\n  return {\n    sections: mapCourseSectionsToApiResponses(reorderedSections),\n    reordered: conflicts.length === 0,\n    conflicts,\n  };\n};\n\n// =============================================================================\n// SECTION ACCESS VALIDATION MAPPERS\n// =============================================================================\n\n/**\n * Section access validation result\n */\nexport interface SectionAccessResult {\n  hasAccess: boolean;\n  section?: CourseSectionSchema;\n  reason?: string;\n  permissions?: {\n    canView: boolean;\n    canEdit: boolean;\n    canDelete: boolean;\n    canManageContent: boolean;\n  };\n}\n\n/**\n * Validates section access based on user role and course access\n */\nexport const validateSectionAccess = (\n  section: CourseSection,\n  userRole: string,\n  courseAccess: boolean\n): SectionAccessResult => {\n  if (!courseAccess) {\n    return {\n      hasAccess: false,\n      reason: \"User does not have access to the course\",\n    };\n  }\n\n  // Safety admins can access all sections\n  if (userRole === \"safety_admin\") {\n    return {\n      hasAccess: true,\n      section: mapCourseSectionToApiResponse(section),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: true,\n        canManageContent: true,\n      },\n    };\n  }\n\n  // Plant managers can access sections in their plant\n  if (userRole === \"plant_manager\") {\n    return {\n      hasAccess: true,\n      section: mapCourseSectionToApiResponse(section),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: true,\n        canManageContent: true,\n      },\n    };\n  }\n\n  // Safety instructors can manage sections in their plant\n  if (userRole === \"safety_instructor\") {\n    return {\n      hasAccess: true,\n      section: mapCourseSectionToApiResponse(section),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: false,\n        canManageContent: true,\n      },\n    };\n  }\n\n  // HR admins can view sections and manage content in their plant\n  if (userRole === \"hr_admin\") {\n    return {\n      hasAccess: true,\n      section: mapCourseSectionToApiResponse(section),\n      permissions: {\n        canView: true,\n        canEdit: false,\n        canDelete: false,\n        canManageContent: true,\n      },\n    };\n  }\n\n  // Employees can view published sections\n  if (userRole === \"employee\") {\n    return {\n      hasAccess: section.isPublished,\n      section: section.isPublished\n        ? mapCourseSectionToApiResponse(section)\n        : undefined,\n      permissions: {\n        canView: section.isPublished,\n        canEdit: false,\n        canDelete: false,\n        canManageContent: false,\n      },\n    };\n  }\n\n  return {\n    hasAccess: false,\n    reason: \"User does not have access to this section\",\n  };\n};\n\n// =============================================================================\n// TYPE EXPORTS\n// =============================================================================\n\nexport type { SectionOrderingResult, SectionAccessResult };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4615, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/mappers/content-block-mappers.ts"],"sourcesContent":["import { ContentBlock, NewContentBlock } from \"../db/schema/content-blocks\";\nimport { CourseSection } from \"../db/schema/course-sections\";\nimport {\n  ContentBlock as ContentBlockSchema,\n  CreateContentBlockRequest,\n  UpdateContentBlockRequest,\n  ContentBlockType,\n} from \"@specchem/contracts\";\n\n/**\n * Content Block Data Mappers\n * Handles transformation between content block database entities and API responses\n */\n\n// =============================================================================\n// CONTENT BLOCK DATABASE → API RESPONSE MAPPERS\n// =============================================================================\n\n/**\n * Maps content block database entity to API response\n */\nexport const mapContentBlockToApiResponse = (\n  block: ContentBlock\n): ContentBlockSchema => ({\n  id: block.id,\n  sectionId: block.sectionId,\n  blockType: block.blockType as ContentBlockType,\n  orderIndex: block.orderIndex,\n  content: block.content,\n  metadata: block.metadata,\n  createdAt: block.createdAt.toISOString(),\n  updatedAt: block.updatedAt.toISOString(),\n});\n\n/**\n * Maps multiple content blocks to API responses\n */\nexport const mapContentBlocksToApiResponses = (\n  blocks: ContentBlock[]\n): ContentBlockSchema[] => blocks.map(mapContentBlockToApiResponse);\n\n// =============================================================================\n// API REQUEST → CONTENT BLOCK DATABASE MAPPERS\n// =============================================================================\n\n/**\n * Maps create content block API request to database entity\n */\nexport const mapCreateContentBlockRequestToDb = (\n  request: CreateContentBlockRequest,\n  sectionId: string\n): NewContentBlock => ({\n  sectionId,\n  blockType: request.blockType,\n  orderIndex: request.orderIndex,\n  content: request.content,\n  metadata: request.metadata,\n});\n\n/**\n * Maps update content block API request to database entity\n */\nexport const mapUpdateContentBlockRequestToDb = (\n  request: UpdateContentBlockRequest,\n  existingBlock: ContentBlock\n): Partial<ContentBlock> => ({\n  ...existingBlock,\n  blockType: request.blockType ?? existingBlock.blockType,\n  orderIndex: request.orderIndex ?? existingBlock.orderIndex,\n  content: request.content ?? existingBlock.content,\n  metadata: request.metadata ?? existingBlock.metadata,\n  updatedAt: new Date(),\n});\n\n// =============================================================================\n// CONTENT BLOCK TYPE-SPECIFIC MAPPERS\n// =============================================================================\n\n/**\n * Content block type-specific content structure\n */\nexport interface ContentBlockContent {\n  title?: string;\n  subtitle?: string;\n  content?: string;\n  text?: string;\n  image?: {\n    url: string;\n    alt: string;\n    caption?: string;\n  };\n  table?: {\n    headers: string[];\n    rows: string[][];\n  };\n  list?: {\n    type: \"ordered\" | \"unordered\";\n    items: string[];\n  };\n  grid?: {\n    columns: number;\n    items: Array<{\n      title: string;\n      content: string;\n      image?: string;\n    }>;\n  };\n  callout?: {\n    type: \"info\" | \"warning\" | \"success\" | \"error\";\n    title: string;\n    content: string;\n  };\n  quote?: {\n    text: string;\n    author?: string;\n    source?: string;\n  };\n  video?: {\n    url: string;\n    title: string;\n    duration?: number;\n    thumbnail?: string;\n  };\n  audio?: {\n    url: string;\n    title: string;\n    duration?: number;\n  };\n}\n\n/**\n * Validates content block content based on block type\n */\nexport const validateContentBlockContent = (\n  blockType: ContentBlockType,\n  content: Record<string, unknown>\n): { isValid: boolean; errors: string[] } => {\n  const errors: string[] = [];\n\n  switch (blockType) {\n    case \"hero\":\n      if (!content.title) errors.push(\"Hero blocks require a title\");\n      break;\n\n    case \"text\":\n      if (!content.content && !content.text) {\n        errors.push(\"Text blocks require content or text\");\n      }\n      break;\n\n    case \"image\":\n      if (!content.image?.url) {\n        errors.push(\"Image blocks require an image URL\");\n      }\n      break;\n\n    case \"table\":\n      if (!content.table?.headers || !content.table?.rows) {\n        errors.push(\"Table blocks require headers and rows\");\n      }\n      break;\n\n    case \"list\":\n      if (!content.list?.items || !Array.isArray(content.list.items)) {\n        errors.push(\"List blocks require items array\");\n      }\n      break;\n\n    case \"callout\":\n      if (!content.callout?.type || !content.callout?.content) {\n        errors.push(\"Callout blocks require type and content\");\n      }\n      break;\n\n    case \"quote\":\n      if (!content.quote?.text) {\n        errors.push(\"Quote blocks require text\");\n      }\n      break;\n\n    case \"video\":\n      if (!content.video?.url) {\n        errors.push(\"Video blocks require a video URL\");\n      }\n      break;\n\n    case \"audio\":\n      if (!content.audio?.url) {\n        errors.push(\"Audio blocks require an audio URL\");\n      }\n      break;\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n\n/**\n * Normalizes content block content based on block type\n */\nexport const normalizeContentBlockContent = (\n  blockType: ContentBlockType,\n  content: Record<string, unknown>\n): Record<string, unknown> => {\n  const normalized = { ...content };\n\n  switch (blockType) {\n    case \"hero\":\n      // Ensure hero has required fields\n      if (!normalized.title) normalized.title = \"\";\n      if (!normalized.subtitle) normalized.subtitle = \"\";\n      break;\n\n    case \"text\":\n      // Normalize text content\n      if (normalized.text && !normalized.content) {\n        normalized.content = normalized.text;\n      }\n      break;\n\n    case \"image\":\n      // Ensure image has required structure\n      if (typeof normalized.image === \"string\") {\n        normalized.image = {\n          url: normalized.image,\n          alt: \"\",\n        };\n      }\n      break;\n\n    case \"table\":\n      // Ensure table has proper structure\n      if (!normalized.table) {\n        normalized.table = {\n          headers: [],\n          rows: [],\n        };\n      }\n      break;\n\n    case \"list\":\n      // Ensure list has proper structure\n      if (!normalized.list) {\n        normalized.list = {\n          type: \"unordered\",\n          items: [],\n        };\n      }\n      break;\n\n    case \"callout\":\n      // Ensure callout has proper structure\n      if (!normalized.callout) {\n        normalized.callout = {\n          type: \"info\",\n          title: \"\",\n          content: \"\",\n        };\n      }\n      break;\n\n    case \"quote\":\n      // Ensure quote has proper structure\n      if (!normalized.quote) {\n        normalized.quote = {\n          text: \"\",\n        };\n      }\n      break;\n\n    case \"video\":\n      // Ensure video has proper structure\n      if (!normalized.video) {\n        normalized.video = {\n          url: \"\",\n          title: \"\",\n        };\n      }\n      break;\n\n    case \"audio\":\n      // Ensure audio has proper structure\n      if (!normalized.audio) {\n        normalized.audio = {\n          url: \"\",\n          title: \"\",\n        };\n      }\n      break;\n  }\n\n  return normalized;\n};\n\n// =============================================================================\n// CONTENT BLOCK ORDERING MAPPERS\n// =============================================================================\n\n/**\n * Content block ordering result\n */\nexport interface ContentBlockOrderingResult {\n  blocks: ContentBlockSchema[];\n  reordered: boolean;\n  conflicts: Array<{\n    blockId: string;\n    conflict: string;\n  }>;\n}\n\n/**\n * Validates and applies content block ordering\n */\nexport const validateAndApplyContentBlockOrdering = (\n  blocks: ContentBlock[],\n  newOrder: Array<{ blockId: string; orderIndex: number }>\n): ContentBlockOrderingResult => {\n  const blockMap = new Map(blocks.map(b => [b.id, b]));\n  const conflicts: Array<{ blockId: string; conflict: string }> = [];\n  const reorderedBlocks: ContentBlock[] = [];\n\n  // Check for conflicts\n  const usedIndices = new Set<number>();\n  for (const orderItem of newOrder) {\n    const block = blockMap.get(orderItem.blockId);\n    if (!block) {\n      conflicts.push({\n        blockId: orderItem.blockId,\n        conflict: \"Content block not found\",\n      });\n      continue;\n    }\n\n    if (usedIndices.has(orderItem.orderIndex)) {\n      conflicts.push({\n        blockId: orderItem.blockId,\n        conflict: \"Duplicate order index\",\n      });\n    } else {\n      usedIndices.add(orderItem.orderIndex);\n      reorderedBlocks.push({\n        ...block,\n        orderIndex: orderItem.orderIndex,\n        updatedAt: new Date(),\n      });\n    }\n  }\n\n  return {\n    blocks: mapContentBlocksToApiResponses(reorderedBlocks),\n    reordered: conflicts.length === 0,\n    conflicts,\n  };\n};\n\n// =============================================================================\n// CONTENT BLOCK ACCESS VALIDATION MAPPERS\n// =============================================================================\n\n/**\n * Content block access validation result\n */\nexport interface ContentBlockAccessResult {\n  hasAccess: boolean;\n  block?: ContentBlockSchema;\n  reason?: string;\n  permissions?: {\n    canView: boolean;\n    canEdit: boolean;\n    canDelete: boolean;\n  };\n}\n\n/**\n * Validates content block access based on user role and section access\n */\nexport const validateContentBlockAccess = (\n  block: ContentBlock,\n  userRole: string,\n  sectionAccess: boolean\n): ContentBlockAccessResult => {\n  if (!sectionAccess) {\n    return {\n      hasAccess: false,\n      reason: \"User does not have access to the section\",\n    };\n  }\n\n  // Safety admins can access all content blocks\n  if (userRole === \"safety_admin\") {\n    return {\n      hasAccess: true,\n      block: mapContentBlockToApiResponse(block),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: true,\n      },\n    };\n  }\n\n  // Plant managers can access content blocks in their plant\n  if (userRole === \"plant_manager\") {\n    return {\n      hasAccess: true,\n      block: mapContentBlockToApiResponse(block),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: true,\n      },\n    };\n  }\n\n  // Safety instructors can manage content blocks in their plant\n  if (userRole === \"safety_instructor\") {\n    return {\n      hasAccess: true,\n      block: mapContentBlockToApiResponse(block),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: false,\n      },\n    };\n  }\n\n  // HR admins can view content blocks in their plant\n  if (userRole === \"hr_admin\") {\n    return {\n      hasAccess: true,\n      block: mapContentBlockToApiResponse(block),\n      permissions: {\n        canView: true,\n        canEdit: false,\n        canDelete: false,\n      },\n    };\n  }\n\n  // Employees can view content blocks (access controlled by section)\n  if (userRole === \"employee\") {\n    return {\n      hasAccess: true,\n      block: mapContentBlockToApiResponse(block),\n      permissions: {\n        canView: true,\n        canEdit: false,\n        canDelete: false,\n      },\n    };\n  }\n\n  return {\n    hasAccess: false,\n    reason: \"User does not have access to this content block\",\n  };\n};\n\n// =============================================================================\n// CONTENT BLOCK FILTERING MAPPERS\n// =============================================================================\n\n/**\n * Content block filtering criteria\n */\nexport interface ContentBlockFilterCriteria {\n  blockType?: ContentBlockType;\n  sectionId?: string;\n  hasContent?: boolean;\n  hasMetadata?: boolean;\n}\n\n/**\n * Maps filtering criteria to database query filters\n */\nexport const mapContentBlockFilterCriteriaToDbFilters = (\n  criteria: ContentBlockFilterCriteria\n): any => {\n  const where: any = {};\n\n  if (criteria.blockType) {\n    where.blockType = criteria.blockType;\n  }\n\n  if (criteria.sectionId) {\n    where.sectionId = criteria.sectionId;\n  }\n\n  if (criteria.hasContent !== undefined) {\n    if (criteria.hasContent) {\n      where.content = { not: null };\n    } else {\n      where.content = null;\n    }\n  }\n\n  if (criteria.hasMetadata !== undefined) {\n    if (criteria.hasMetadata) {\n      where.metadata = { not: null };\n    } else {\n      where.metadata = null;\n    }\n  }\n\n  return where;\n};\n\n// =============================================================================\n// TYPE EXPORTS\n// =============================================================================\n\nexport type {\n  ContentBlockContent,\n  ContentBlockOrderingResult,\n  ContentBlockAccessResult,\n  ContentBlockFilterCriteria,\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 4937, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/mappers/quiz-question-mappers.ts"],"sourcesContent":["import { QuizQuestion, NewQuizQuestion } from \"../db/schema/quiz-questions\";\nimport { QuizAttempt } from \"../db/schema/quiz-attempts\";\nimport {\n  QuizQuestion as QuizQuestionSchema,\n  CreateQuizQuestionRequest,\n  UpdateQuizQuestionRequest,\n  SubmitQuizAnswerRequest,\n  QuizAttempt as QuizAttemptSchema,\n  QuestionType,\n} from \"@specchem/contracts\";\n\n/**\n * Quiz Question Data Mappers\n * Handles transformation between quiz question database entities and API responses\n */\n\n// =============================================================================\n// QUIZ QUESTION DATABASE → API RESPONSE MAPPERS\n// =============================================================================\n\n/**\n * Maps quiz question database entity to API response\n */\nexport const mapQuizQuestionToApiResponse = (\n  question: QuizQuestion\n): QuizQuestionSchema => ({\n  id: question.id,\n  sectionId: question.sectionId,\n  questionKey: question.questionKey,\n  questionType: question.questionType as QuestionType,\n  questionText: question.questionText,\n  options: question.options,\n  correctAnswer: question.correctAnswer,\n  explanation: question.explanation,\n  orderIndex: question.orderIndex,\n  isPublished: question.isPublished,\n  createdAt: question.createdAt.toISOString(),\n  updatedAt: question.updatedAt.toISOString(),\n});\n\n/**\n * Maps multiple quiz questions to API responses\n */\nexport const mapQuizQuestionsToApiResponses = (\n  questions: QuizQuestion[]\n): QuizQuestionSchema[] => questions.map(mapQuizQuestionToApiResponse);\n\n// =============================================================================\n// API REQUEST → QUIZ QUESTION DATABASE MAPPERS\n// =============================================================================\n\n/**\n * Maps create quiz question API request to database entity\n */\nexport const mapCreateQuizQuestionRequestToDb = (\n  request: CreateQuizQuestionRequest,\n  sectionId: string\n): NewQuizQuestion => ({\n  sectionId,\n  questionKey: request.questionKey,\n  questionType: request.questionType,\n  questionText: request.questionText,\n  options: request.options,\n  correctAnswer: request.correctAnswer,\n  explanation: request.explanation,\n  orderIndex: request.orderIndex,\n  isPublished: request.isPublished,\n});\n\n/**\n * Maps update quiz question API request to database entity\n */\nexport const mapUpdateQuizQuestionRequestToDb = (\n  request: UpdateQuizQuestionRequest,\n  existingQuestion: QuizQuestion\n): Partial<QuizQuestion> => ({\n  ...existingQuestion,\n  questionKey: request.questionKey ?? existingQuestion.questionKey,\n  questionType: request.questionType ?? existingQuestion.questionType,\n  questionText: request.questionText ?? existingQuestion.questionText,\n  options: request.options ?? existingQuestion.options,\n  correctAnswer: request.correctAnswer ?? existingQuestion.correctAnswer,\n  explanation: request.explanation ?? existingQuestion.explanation,\n  orderIndex: request.orderIndex ?? existingQuestion.orderIndex,\n  isPublished: request.isPublished ?? existingQuestion.isPublished,\n  updatedAt: new Date(),\n});\n\n// =============================================================================\n// QUIZ ANSWER VALIDATION MAPPERS\n// =============================================================================\n\n/**\n * Quiz answer validation result\n */\nexport interface QuizAnswerValidationResult {\n  isValid: boolean;\n  isCorrect: boolean;\n  errors: string[];\n  explanation?: string;\n}\n\n/**\n * Validates quiz answer based on question type and correct answer\n */\nexport const validateQuizAnswer = (\n  question: QuizQuestion,\n  userAnswer: string | boolean | number\n): QuizAnswerValidationResult => {\n  const errors: string[] = [];\n\n  // Validate answer format based on question type\n  switch (question.questionType) {\n    case \"true-false\":\n      if (typeof userAnswer !== \"boolean\") {\n        errors.push(\"True/false questions require a boolean answer\");\n      }\n      break;\n\n    case \"multiple-choice\":\n      if (typeof userAnswer !== \"string\") {\n        errors.push(\"Multiple choice questions require a string answer\");\n      } else if (question.options && !(userAnswer in question.options)) {\n        errors.push(\"Answer must be one of the provided options\");\n      }\n      break;\n  }\n\n  if (errors.length > 0) {\n    return {\n      isValid: false,\n      isCorrect: false,\n      errors,\n    };\n  }\n\n  // Check if answer is correct\n  const isCorrect = userAnswer === question.correctAnswer;\n\n  return {\n    isValid: true,\n    isCorrect,\n    errors: [],\n    explanation: question.explanation,\n  };\n};\n\n/**\n * Maps quiz answer submission to quiz attempt\n */\nexport const mapQuizAnswerSubmissionToAttempt = (\n  request: SubmitQuizAnswerRequest,\n  userId: string,\n  isCorrect: boolean\n): Partial<QuizAttempt> => ({\n  userId,\n  quizQuestionId: request.quizQuestionId,\n  userAnswer: request.userAnswer,\n  isCorrect,\n  timeSpentSeconds: request.timeSpentSeconds,\n  attemptedAt: new Date(),\n});\n\n// =============================================================================\n// QUIZ ATTEMPT MAPPERS\n// =============================================================================\n\n/**\n * Maps quiz attempt database entity to API response\n */\nexport const mapQuizAttemptToApiResponse = (\n  attempt: QuizAttempt\n): QuizAttemptSchema => ({\n  id: attempt.id,\n  userId: attempt.userId,\n  quizQuestionId: attempt.quizQuestionId,\n  userAnswer: attempt.userAnswer,\n  isCorrect: attempt.isCorrect,\n  attemptedAt: attempt.attemptedAt.toISOString(),\n  timeSpentSeconds: attempt.timeSpentSeconds,\n});\n\n/**\n * Maps multiple quiz attempts to API responses\n */\nexport const mapQuizAttemptsToApiResponses = (\n  attempts: QuizAttempt[]\n): QuizAttemptSchema[] => attempts.map(mapQuizAttemptToApiResponse);\n\n// =============================================================================\n// QUIZ QUESTION ORDERING MAPPERS\n// =============================================================================\n\n/**\n * Quiz question ordering result\n */\nexport interface QuizQuestionOrderingResult {\n  questions: QuizQuestionSchema[];\n  reordered: boolean;\n  conflicts: Array<{\n    questionId: string;\n    questionKey: string;\n    conflict: string;\n  }>;\n}\n\n/**\n * Validates and applies quiz question ordering\n */\nexport const validateAndApplyQuizQuestionOrdering = (\n  questions: QuizQuestion[],\n  newOrder: Array<{ questionId: string; orderIndex: number }>\n): QuizQuestionOrderingResult => {\n  const questionMap = new Map(questions.map(q => [q.id, q]));\n  const conflicts: Array<{\n    questionId: string;\n    questionKey: string;\n    conflict: string;\n  }> = [];\n  const reorderedQuestions: QuizQuestion[] = [];\n\n  // Check for conflicts\n  const usedIndices = new Set<number>();\n  for (const orderItem of newOrder) {\n    const question = questionMap.get(orderItem.questionId);\n    if (!question) {\n      conflicts.push({\n        questionId: orderItem.questionId,\n        questionKey: \"\",\n        conflict: \"Quiz question not found\",\n      });\n      continue;\n    }\n\n    if (usedIndices.has(orderItem.orderIndex)) {\n      conflicts.push({\n        questionId: orderItem.questionId,\n        questionKey: question.questionKey,\n        conflict: \"Duplicate order index\",\n      });\n    } else {\n      usedIndices.add(orderItem.orderIndex);\n      reorderedQuestions.push({\n        ...question,\n        orderIndex: orderItem.orderIndex,\n        updatedAt: new Date(),\n      });\n    }\n  }\n\n  return {\n    questions: mapQuizQuestionsToApiResponses(reorderedQuestions),\n    reordered: conflicts.length === 0,\n    conflicts,\n  };\n};\n\n// =============================================================================\n// QUIZ QUESTION ACCESS VALIDATION MAPPERS\n// =============================================================================\n\n/**\n * Quiz question access validation result\n */\nexport interface QuizQuestionAccessResult {\n  hasAccess: boolean;\n  question?: QuizQuestionSchema;\n  reason?: string;\n  permissions?: {\n    canView: boolean;\n    canEdit: boolean;\n    canDelete: boolean;\n    canSubmitAnswer: boolean;\n  };\n}\n\n/**\n * Validates quiz question access based on user role and section access\n */\nexport const validateQuizQuestionAccess = (\n  question: QuizQuestion,\n  userRole: string,\n  sectionAccess: boolean\n): QuizQuestionAccessResult => {\n  if (!sectionAccess) {\n    return {\n      hasAccess: false,\n      reason: \"User does not have access to the section\",\n    };\n  }\n\n  // Safety admins can access all quiz questions\n  if (userRole === \"safety_admin\") {\n    return {\n      hasAccess: true,\n      question: mapQuizQuestionToApiResponse(question),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: true,\n        canSubmitAnswer: true,\n      },\n    };\n  }\n\n  // Plant managers can access quiz questions in their plant\n  if (userRole === \"plant_manager\") {\n    return {\n      hasAccess: true,\n      question: mapQuizQuestionToApiResponse(question),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: true,\n        canSubmitAnswer: true,\n      },\n    };\n  }\n\n  // Safety instructors can manage quiz questions in their plant\n  if (userRole === \"safety_instructor\") {\n    return {\n      hasAccess: true,\n      question: mapQuizQuestionToApiResponse(question),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: false,\n        canSubmitAnswer: true,\n      },\n    };\n  }\n\n  // HR admins can view quiz questions in their plant\n  if (userRole === \"hr_admin\") {\n    return {\n      hasAccess: true,\n      question: mapQuizQuestionToApiResponse(question),\n      permissions: {\n        canView: true,\n        canEdit: false,\n        canDelete: false,\n        canSubmitAnswer: true,\n      },\n    };\n  }\n\n  // Employees can view and answer published quiz questions\n  if (userRole === \"employee\") {\n    return {\n      hasAccess: question.isPublished,\n      question: question.isPublished\n        ? mapQuizQuestionToApiResponse(question)\n        : undefined,\n      permissions: {\n        canView: question.isPublished,\n        canEdit: false,\n        canDelete: false,\n        canSubmitAnswer: question.isPublished,\n      },\n    };\n  }\n\n  return {\n    hasAccess: false,\n    reason: \"User does not have access to this quiz question\",\n  };\n};\n\n// =============================================================================\n// QUIZ STATISTICS MAPPERS\n// =============================================================================\n\n/**\n * Quiz question statistics\n */\nexport interface QuizQuestionStatistics {\n  question: QuizQuestionSchema;\n  totalAttempts: number;\n  correctAttempts: number;\n  incorrectAttempts: number;\n  averageTimeSpent: number;\n  successRate: number;\n  lastAttempted?: string;\n}\n\n/**\n * Maps quiz question to statistics response\n */\nexport const mapQuizQuestionToStatistics = (\n  question: QuizQuestion,\n  attempts: QuizAttempt[]\n): QuizQuestionStatistics => {\n  const totalAttempts = attempts.length;\n  const correctAttempts = attempts.filter(a => a.isCorrect).length;\n  const incorrectAttempts = totalAttempts - correctAttempts;\n  const averageTimeSpent =\n    totalAttempts > 0\n      ? attempts.reduce((sum, a) => sum + a.timeSpentSeconds, 0) / totalAttempts\n      : 0;\n  const successRate =\n    totalAttempts > 0 ? (correctAttempts / totalAttempts) * 100 : 0;\n  const lastAttempted =\n    attempts.length > 0\n      ? attempts\n          .sort((a, b) => b.attemptedAt.getTime() - a.attemptedAt.getTime())[0]\n          .attemptedAt.toISOString()\n      : undefined;\n\n  return {\n    question: mapQuizQuestionToApiResponse(question),\n    totalAttempts,\n    correctAttempts,\n    incorrectAttempts,\n    averageTimeSpent,\n    successRate,\n    lastAttempted,\n  };\n};\n\n// =============================================================================\n// QUIZ QUESTION FILTERING MAPPERS\n// =============================================================================\n\n/**\n * Quiz question filtering criteria\n */\nexport interface QuizQuestionFilterCriteria {\n  questionType?: QuestionType;\n  sectionId?: string;\n  isPublished?: boolean;\n  hasOptions?: boolean;\n  hasExplanation?: boolean;\n}\n\n/**\n * Maps filtering criteria to database query filters\n */\nexport const mapQuizQuestionFilterCriteriaToDbFilters = (\n  criteria: QuizQuestionFilterCriteria\n): any => {\n  const where: any = {};\n\n  if (criteria.questionType) {\n    where.questionType = criteria.questionType;\n  }\n\n  if (criteria.sectionId) {\n    where.sectionId = criteria.sectionId;\n  }\n\n  if (criteria.isPublished !== undefined) {\n    where.isPublished = criteria.isPublished;\n  }\n\n  if (criteria.hasOptions !== undefined) {\n    if (criteria.hasOptions) {\n      where.options = { not: null };\n    } else {\n      where.options = null;\n    }\n  }\n\n  if (criteria.hasExplanation !== undefined) {\n    if (criteria.hasExplanation) {\n      where.explanation = { not: null };\n    } else {\n      where.explanation = null;\n    }\n  }\n\n  return where;\n};\n\n// =============================================================================\n// TYPE EXPORTS\n// =============================================================================\n\nexport type {\n  QuizAnswerValidationResult,\n  QuizQuestionOrderingResult,\n  QuizQuestionAccessResult,\n  QuizQuestionStatistics,\n  QuizQuestionFilterCriteria,\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5221, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/mappers/user-progress-mappers.ts"],"sourcesContent":["import { UserProgress, NewUserProgress } from \"../db/schema/user-progress\";\nimport { CourseSection } from \"../db/schema/course-sections\";\nimport { Course } from \"../db/schema/courses\";\nimport {\n  UserProgress as UserProgressSchema,\n  UpdateUserProgressRequest,\n  CourseCompletionStatusResponse,\n} from \"@specchem/contracts\";\n\n/**\n * User Progress Data Mappers\n * Handles transformation between user progress database entities and API responses\n */\n\n// =============================================================================\n// USER PROGRESS DATABASE → API RESPONSE MAPPERS\n// =============================================================================\n\n/**\n * Maps user progress database entity to API response\n */\nexport const mapUserProgressToApiResponse = (\n  progress: UserProgress\n): UserProgressSchema => ({\n  id: progress.id,\n  userId: progress.userId,\n  courseId: progress.courseId,\n  sectionId: progress.sectionId,\n  isCompleted: progress.isCompleted,\n  completionPercentage: progress.completionPercentage,\n  timeSpentSeconds: progress.timeSpentSeconds,\n  lastAccessedAt: progress.lastAccessedAt.toISOString(),\n  completedAt: progress.completedAt?.toISOString(),\n  createdAt: progress.createdAt.toISOString(),\n  updatedAt: progress.updatedAt.toISOString(),\n});\n\n/**\n * Maps multiple user progress records to API responses\n */\nexport const mapUserProgressToApiResponses = (\n  progressRecords: UserProgress[]\n): UserProgressSchema[] => progressRecords.map(mapUserProgressToApiResponse);\n\n// =============================================================================\n// API REQUEST → USER PROGRESS DATABASE MAPPERS\n// =============================================================================\n\n/**\n * Maps update user progress API request to database entity\n */\nexport const mapUpdateUserProgressRequestToDb = (\n  request: UpdateUserProgressRequest,\n  userId: string,\n  existingProgress?: UserProgress\n): Partial<UserProgress> => {\n  const now = new Date();\n\n  return {\n    ...existingProgress,\n    userId,\n    courseId: request.courseId,\n    sectionId: request.sectionId,\n    isCompleted: request.isCompleted ?? existingProgress?.isCompleted ?? false,\n    completionPercentage:\n      request.completionPercentage ??\n      existingProgress?.completionPercentage ??\n      0,\n    timeSpentSeconds:\n      request.timeSpentSeconds ?? existingProgress?.timeSpentSeconds ?? 0,\n    lastAccessedAt: now,\n    completedAt: request.isCompleted ? now : existingProgress?.completedAt,\n    updatedAt: now,\n  };\n};\n\n/**\n * Creates new user progress record\n */\nexport const mapCreateUserProgressRequestToDb = (\n  request: UpdateUserProgressRequest,\n  userId: string\n): NewUserProgress => {\n  const now = new Date();\n\n  return {\n    userId,\n    courseId: request.courseId,\n    sectionId: request.sectionId,\n    isCompleted: request.isCompleted ?? false,\n    completionPercentage: request.completionPercentage ?? 0,\n    timeSpentSeconds: request.timeSpentSeconds ?? 0,\n    lastAccessedAt: now,\n    completedAt: request.isCompleted ? now : undefined,\n  };\n};\n\n// =============================================================================\n// COURSE COMPLETION STATUS MAPPERS\n// =============================================================================\n\n/**\n * Course completion status data\n */\nexport interface CourseCompletionStatusData {\n  courseId: string;\n  userId: string;\n  totalSections: number;\n  completedSections: number;\n  completionPercentage: number;\n  timeSpentSeconds: number;\n  lastAccessedAt: Date;\n  completedAt?: Date;\n}\n\n/**\n * Maps course completion status to API response\n */\nexport const mapCourseCompletionStatusToApiResponse = (\n  status: CourseCompletionStatusData\n): CourseCompletionStatusResponse[\"data\"] => ({\n  courseId: status.courseId,\n  userId: status.userId,\n  totalSections: status.totalSections,\n  completedSections: status.completedSections,\n  completionPercentage: status.completionPercentage,\n  timeSpentSeconds: status.timeSpentSeconds,\n  lastAccessedAt: status.lastAccessedAt.toISOString(),\n  completedAt: status.completedAt?.toISOString(),\n});\n\n/**\n * Calculates course completion status from progress records\n */\nexport const calculateCourseCompletionStatus = (\n  progressRecords: UserProgress[],\n  courseId: string,\n  userId: string,\n  totalSections: number\n): CourseCompletionStatusData => {\n  const courseProgress = progressRecords.filter(\n    p => p.courseId === courseId && p.userId === userId\n  );\n\n  const completedSections = courseProgress.filter(p => p.isCompleted).length;\n  const completionPercentage =\n    totalSections > 0\n      ? Math.round((completedSections / totalSections) * 100)\n      : 0;\n  const timeSpentSeconds = courseProgress.reduce(\n    (sum, p) => sum + p.timeSpentSeconds,\n    0\n  );\n\n  const lastAccessedAt =\n    courseProgress.length > 0\n      ? courseProgress.reduce(\n          (latest, p) =>\n            p.lastAccessedAt > latest ? p.lastAccessedAt : latest,\n          courseProgress[0].lastAccessedAt\n        )\n      : new Date();\n\n  const completedAt =\n    completedSections === totalSections && totalSections > 0\n      ? courseProgress.reduce(\n          (latest, p) =>\n            p.completedAt && p.completedAt > latest ? p.completedAt : latest,\n          courseProgress[0].completedAt || new Date(0)\n        )\n      : undefined;\n\n  return {\n    courseId,\n    userId,\n    totalSections,\n    completedSections,\n    completionPercentage,\n    timeSpentSeconds,\n    lastAccessedAt,\n    completedAt:\n      completedAt && completedAt.getTime() > 0 ? completedAt : undefined,\n  };\n};\n\n// =============================================================================\n// PROGRESS TRACKING MAPPERS\n// =============================================================================\n\n/**\n * Progress tracking event data\n */\nexport interface ProgressTrackingEvent {\n  userId: string;\n  courseId: string;\n  sectionId: string;\n  eventType: \"started\" | \"progressed\" | \"completed\" | \"paused\" | \"resumed\";\n  completionPercentage: number;\n  timeSpentSeconds: number;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Maps progress tracking event to user progress update\n */\nexport const mapProgressTrackingEventToProgressUpdate = (\n  event: ProgressTrackingEvent,\n  existingProgress?: UserProgress\n): Partial<UserProgress> => {\n  const now = new Date();\n  const isCompleted =\n    event.eventType === \"completed\" || event.completionPercentage >= 100;\n\n  return {\n    ...existingProgress,\n    userId: event.userId,\n    courseId: event.courseId,\n    sectionId: event.sectionId,\n    isCompleted,\n    completionPercentage: Math.min(event.completionPercentage, 100),\n    timeSpentSeconds: event.timeSpentSeconds,\n    lastAccessedAt: now,\n    completedAt: isCompleted ? now : existingProgress?.completedAt,\n    updatedAt: now,\n  };\n};\n\n// =============================================================================\n// PROGRESS ANALYTICS MAPPERS\n// =============================================================================\n\n/**\n * User progress analytics data\n */\nexport interface UserProgressAnalytics {\n  userId: string;\n  totalCourses: number;\n  completedCourses: number;\n  inProgressCourses: number;\n  totalTimeSpent: number;\n  averageCompletionRate: number;\n  lastActivity?: string;\n  coursesByStatus: {\n    completed: string[];\n    inProgress: string[];\n    notStarted: string[];\n  };\n}\n\n/**\n * Maps user progress records to analytics data\n */\nexport const mapUserProgressToAnalytics = (\n  progressRecords: UserProgress[],\n  userId: string,\n  allCourses: Course[]\n): UserProgressAnalytics => {\n  const userProgress = progressRecords.filter(p => p.userId === userId);\n\n  // Group progress by course\n  const courseProgressMap = new Map<string, UserProgress[]>();\n  userProgress.forEach(p => {\n    const existing = courseProgressMap.get(p.courseId) || [];\n    existing.push(p);\n    courseProgressMap.set(p.courseId, existing);\n  });\n\n  const totalCourses = allCourses.length;\n  let completedCourses = 0;\n  let inProgressCourses = 0;\n  const totalTimeSpent = userProgress.reduce(\n    (sum, p) => sum + p.timeSpentSeconds,\n    0\n  );\n\n  const coursesByStatus = {\n    completed: [] as string[],\n    inProgress: [] as string[],\n    notStarted: [] as string[],\n  };\n\n  // Analyze each course\n  allCourses.forEach(course => {\n    const courseProgress = courseProgressMap.get(course.id) || [];\n    const completedSections = courseProgress.filter(p => p.isCompleted).length;\n    const totalSections = courseProgress.length;\n\n    if (totalSections === 0) {\n      coursesByStatus.notStarted.push(course.id);\n    } else if (completedSections === totalSections && totalSections > 0) {\n      completedCourses++;\n      coursesByStatus.completed.push(course.id);\n    } else {\n      inProgressCourses++;\n      coursesByStatus.inProgress.push(course.id);\n    }\n  });\n\n  const averageCompletionRate =\n    totalCourses > 0 ? (completedCourses / totalCourses) * 100 : 0;\n\n  const lastActivity =\n    userProgress.length > 0\n      ? userProgress\n          .reduce(\n            (latest, p) =>\n              p.lastAccessedAt > latest ? p.lastAccessedAt : latest,\n            userProgress[0].lastAccessedAt\n          )\n          .toISOString()\n      : undefined;\n\n  return {\n    userId,\n    totalCourses,\n    completedCourses,\n    inProgressCourses,\n    totalTimeSpent,\n    averageCompletionRate,\n    lastActivity,\n    coursesByStatus,\n  };\n};\n\n// =============================================================================\n// PROGRESS FILTERING MAPPERS\n// =============================================================================\n\n/**\n * User progress filtering criteria\n */\nexport interface UserProgressFilterCriteria {\n  userId?: string;\n  courseId?: string;\n  sectionId?: string;\n  isCompleted?: boolean;\n  completionPercentageMin?: number;\n  completionPercentageMax?: number;\n  dateFrom?: Date;\n  dateTo?: Date;\n}\n\n/**\n * Maps filtering criteria to database query filters\n */\nexport const mapUserProgressFilterCriteriaToDbFilters = (\n  criteria: UserProgressFilterCriteria\n): any => {\n  const where: any = {};\n\n  if (criteria.userId) {\n    where.userId = criteria.userId;\n  }\n\n  if (criteria.courseId) {\n    where.courseId = criteria.courseId;\n  }\n\n  if (criteria.sectionId) {\n    where.sectionId = criteria.sectionId;\n  }\n\n  if (criteria.isCompleted !== undefined) {\n    where.isCompleted = criteria.isCompleted;\n  }\n\n  if (\n    criteria.completionPercentageMin !== undefined ||\n    criteria.completionPercentageMax !== undefined\n  ) {\n    where.completionPercentage = {};\n    if (criteria.completionPercentageMin !== undefined) {\n      where.completionPercentage.gte = criteria.completionPercentageMin;\n    }\n    if (criteria.completionPercentageMax !== undefined) {\n      where.completionPercentage.lte = criteria.completionPercentageMax;\n    }\n  }\n\n  if (criteria.dateFrom || criteria.dateTo) {\n    where.lastAccessedAt = {};\n    if (criteria.dateFrom) {\n      where.lastAccessedAt.gte = criteria.dateFrom;\n    }\n    if (criteria.dateTo) {\n      where.lastAccessedAt.lte = criteria.dateTo;\n    }\n  }\n\n  return where;\n};\n\n// =============================================================================\n// PROGRESS ACCESS VALIDATION MAPPERS\n// =============================================================================\n\n/**\n * User progress access validation result\n */\nexport interface UserProgressAccessResult {\n  hasAccess: boolean;\n  progress?: UserProgressSchema;\n  reason?: string;\n  permissions?: {\n    canView: boolean;\n    canEdit: boolean;\n    canDelete: boolean;\n  };\n}\n\n/**\n * Validates user progress access based on user role and ownership\n */\nexport const validateUserProgressAccess = (\n  progress: UserProgress,\n  userId: string,\n  userRole: string\n): UserProgressAccessResult => {\n  // Users can always access their own progress\n  if (progress.userId === userId) {\n    return {\n      hasAccess: true,\n      progress: mapUserProgressToApiResponse(progress),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: false,\n      },\n    };\n  }\n\n  // Safety admins can access all progress\n  if (userRole === \"safety_admin\") {\n    return {\n      hasAccess: true,\n      progress: mapUserProgressToApiResponse(progress),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: true,\n      },\n    };\n  }\n\n  // Plant managers can access progress in their plant\n  if (userRole === \"plant_manager\") {\n    return {\n      hasAccess: true,\n      progress: mapUserProgressToApiResponse(progress),\n      permissions: {\n        canView: true,\n        canEdit: true,\n        canDelete: true,\n      },\n    };\n  }\n\n  // HR admins can view progress in their plant\n  if (userRole === \"hr_admin\") {\n    return {\n      hasAccess: true,\n      progress: mapUserProgressToApiResponse(progress),\n      permissions: {\n        canView: true,\n        canEdit: false,\n        canDelete: false,\n      },\n    };\n  }\n\n  return {\n    hasAccess: false,\n    reason: \"User does not have access to this progress record\",\n  };\n};\n\n// =============================================================================\n// TYPE EXPORTS\n// =============================================================================\n\nexport type {\n  CourseCompletionStatusData,\n  ProgressTrackingEvent,\n  UserProgressAnalytics,\n  UserProgressFilterCriteria,\n  UserProgressAccessResult,\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 5467, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/services/lms-content-service.ts"],"sourcesContent":["import { NextRequest } from \"next/server\";\nimport { z } from \"zod\";\nimport {\n  CreateCourseSectionRequest,\n  UpdateCourseSectionRequest,\n  CourseSectionResponse,\n  CourseWithSectionsResponse,\n  SectionWithContentResponse,\n  LmsContentErrorResponse,\n} from \"@specchem/contracts\";\nimport {\n  getCourseSectionById,\n  getCourseSectionByKey,\n  getCourseSectionsByCourseId,\n  getCourseSectionWithContent,\n  createCourseSection,\n  updateCourseSection,\n  deleteCourseSection,\n  reorderSections,\n  getNextSectionOrderIndex,\n  isSectionKeyUnique,\n  isOrderIndexUnique,\n  getSectionStatistics,\n  searchCourseSections,\n  getAccessibleCourseSections,\n  canUserAccessSection,\n} from \"../db/queries/course-sections\";\nimport {\n  getContentBlocksBySectionId,\n  getContentBlocksByType,\n  createContentBlock,\n  updateContentBlock,\n  deleteContentBlock,\n  reorderContentBlocks,\n  getNextContentBlockOrderIndex,\n  isContentBlockOrderIndexUnique,\n  validateContentBlockContent,\n  getContentBlockStatistics,\n  searchContentBlocks,\n  getAccessibleContentBlocks,\n  canUserAccessContentBlock,\n} from \"../db/queries/content-blocks\";\nimport {\n  getQuizQuestionsBySectionId,\n  getQuizQuestionsByType,\n  createQuizQuestion,\n  updateQuizQuestion,\n  deleteQuizQuestion,\n  reorderQuizQuestions,\n  getNextQuizQuestionOrderIndex,\n  isQuestionKeyUnique,\n  isQuizQuestionOrderIndexUnique,\n  validateQuizQuestionContent,\n  getQuizQuestionStatistics,\n  getSectionQuizStatistics,\n  searchQuizQuestions,\n  getAccessibleQuizQuestions,\n  canUserAccessQuizQuestion,\n  createQuizAttempt,\n  getQuizAttemptsByUser,\n  getQuizAttemptsByQuestion,\n} from \"../db/queries/quiz-questions\";\nimport {\n  getUserProgressByUser,\n  getUserProgressByUserAndSection,\n  upsertUserProgress,\n  updateUserProgress,\n  updateUserProgressByUserAndSection,\n  deleteUserProgress,\n  calculateCourseCompletionStatus,\n  getUserProgressAnalytics,\n  getCourseProgressStatistics,\n  searchUserProgress,\n  getAccessibleUserProgress,\n  canUserAccessProgress,\n} from \"../db/queries/user-progress\";\nimport {\n  mapCourseSectionToApiResponse,\n  mapCourseSectionsToApiResponses,\n  mapCreateCourseSectionRequestToDb,\n  mapUpdateCourseSectionRequestToDb,\n  mapSectionWithContentToApiResponse,\n  validateSectionAccess,\n  validateAndApplySectionOrdering,\n} from \"../mappers/course-section-mappers\";\nimport {\n  mapContentBlockToApiResponse,\n  mapContentBlocksToApiResponses,\n  mapCreateContentBlockRequestToDb,\n  mapUpdateContentBlockRequestToDb,\n  validateContentBlockAccess,\n  validateAndApplyContentBlockOrdering,\n} from \"../mappers/content-block-mappers\";\nimport {\n  mapQuizQuestionToApiResponse,\n  mapQuizQuestionsToApiResponses,\n  mapCreateQuizQuestionRequestToDb,\n  mapUpdateQuizQuestionRequestToDb,\n  validateQuizAnswer,\n  mapQuizAnswerSubmissionToAttempt,\n  mapQuizAttemptToApiResponse,\n  mapQuizAttemptsToApiResponses,\n  validateQuizQuestionAccess,\n  validateAndApplyQuizQuestionOrdering,\n} from \"../mappers/quiz-question-mappers\";\nimport {\n  mapUserProgressToApiResponse,\n  mapUserProgressToApiResponses,\n  mapUpdateUserProgressRequestToDb,\n  mapCreateUserProgressRequestToDb,\n  mapCourseCompletionStatusToApiResponse,\n  calculateCourseCompletionStatus as calculateCompletionStatus,\n  mapUserProgressToAnalytics,\n  mapProgressTrackingEventToProgressUpdate,\n  validateUserProgressAccess,\n} from \"../mappers/user-progress-mappers\";\n\n/**\n * LMS Content Service Layer\n * Handles business logic for structured course content, sections, blocks, and quizzes\n */\n\n// =============================================================================\n// COURSE SECTION SERVICES\n// =============================================================================\n\n/**\n * Get course content with sections\n */\nexport const getCourseContentService = async (\n  courseKey: string,\n  languageCode: string = \"en\",\n  includeUnpublished: boolean = false,\n  userRole: string = \"employee\"\n): Promise<CourseWithSectionsResponse | LmsContentErrorResponse> => {\n  try {\n    // Get course by key (would need to implement this query)\n    // const course = await getCourseByKey(courseKey);\n    // if (!course) {\n    //   return {\n    //     success: false,\n    //     error: {\n    //       code: \"COURSE_NOT_FOUND\",\n    //       message: \"Course not found\",\n    //       timestamp: new Date().toISOString(),\n    //     },\n    //     version: \"1.0\",\n    //   };\n    // }\n\n    // Get accessible sections\n    const sections = await getAccessibleCourseSections(courseKey, userRole, {\n      includeUnpublished,\n    });\n\n    return {\n      success: true,\n      data: {\n        course: {\n          id: courseKey, // Would be actual course ID\n          courseKey,\n          title: \"Function-Specific HazMat Training\", // Would be from course\n          description:\n            \"Handling, Packaging, and Shipping DOT-Regulated Materials\",\n          version: \"1.0\",\n          isPublished: true,\n        },\n        sections: mapCourseSectionsToApiResponses(sections),\n      },\n      version: \"1.0\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: \"SYSTEM_ERROR\",\n        message: \"Internal server error\",\n        timestamp: new Date().toISOString(),\n      },\n      version: \"1.0\",\n    };\n  }\n};\n\n/**\n * Get section content with blocks and quiz questions\n */\nexport const getSectionContentService = async (\n  courseKey: string,\n  sectionKey: string,\n  languageCode: string = \"en\",\n  includeUnpublished: boolean = false,\n  userRole: string = \"employee\"\n): Promise<SectionWithContentResponse | LmsContentErrorResponse> => {\n  try {\n    // Get course by key (would need to implement this query)\n    // const course = await getCourseByKey(courseKey);\n    // if (!course) {\n    //   return {\n    //     success: false,\n    //     error: {\n    //       code: \"COURSE_NOT_FOUND\",\n    //       message: \"Course not found\",\n    //       timestamp: new Date().toISOString(),\n    //     },\n    //     version: \"1.0\",\n    //   };\n    // }\n\n    // Get section by key\n    const section = await getCourseSectionByKey(courseKey, sectionKey);\n    if (!section) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: \"Section not found\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Check access\n    const accessResult = validateSectionAccess(section, userRole, true);\n    if (!accessResult.hasAccess) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: accessResult.reason || \"Access denied\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Get section with content\n    const sectionWithContent = await getCourseSectionWithContent(section.id);\n    if (!sectionWithContent) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: \"Section content not found\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    return {\n      success: true,\n      data: mapSectionWithContentToApiResponse(\n        sectionWithContent.section,\n        sectionWithContent.contentBlocks,\n        sectionWithContent.quizQuestions\n      ),\n      version: \"1.0\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: \"SYSTEM_ERROR\",\n        message: \"Internal server error\",\n        timestamp: new Date().toISOString(),\n      },\n      version: \"1.0\",\n    };\n  }\n};\n\n/**\n * Create course section\n */\nexport const createCourseSectionService = async (\n  courseKey: string,\n  request: CreateCourseSectionRequest,\n  userRole: string = \"employee\"\n): Promise<CourseSectionResponse | LmsContentErrorResponse> => {\n  try {\n    // Check permissions\n    if (userRole === \"employee\") {\n      return {\n        success: false,\n        error: {\n          code: \"USER_NOT_AUTHORIZED\",\n          message: \"Insufficient permissions\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Get course by key (would need to implement this query)\n    // const course = await getCourseByKey(courseKey);\n    // if (!course) {\n    //   return {\n    //     success: false,\n    //     error: {\n    //       code: \"COURSE_NOT_FOUND\",\n    //       message: \"Course not found\",\n    //       timestamp: new Date().toISOString(),\n    //     },\n    //     version: \"1.0\",\n    //   };\n    // }\n\n    // Validate section key uniqueness\n    const isKeyUnique = await isSectionKeyUnique(courseKey, request.sectionKey);\n    if (!isKeyUnique) {\n      return {\n        success: false,\n        error: {\n          code: \"VALIDATION_ERROR\",\n          message: \"Section key must be unique within the course\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Get next order index if not provided\n    const orderIndex =\n      request.orderIndex ?? (await getNextSectionOrderIndex(courseKey));\n\n    // Create section\n    const sectionData = mapCreateCourseSectionRequestToDb(request, courseKey);\n    const section = await createCourseSection(sectionData);\n\n    return {\n      success: true,\n      data: mapCourseSectionToApiResponse(section),\n      version: \"1.0\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: \"SYSTEM_ERROR\",\n        message: \"Internal server error\",\n        timestamp: new Date().toISOString(),\n      },\n      version: \"1.0\",\n    };\n  }\n};\n\n/**\n * Update course section\n */\nexport const updateCourseSectionService = async (\n  sectionId: string,\n  request: UpdateCourseSectionRequest,\n  userRole: string = \"employee\"\n): Promise<CourseSectionResponse | LmsContentErrorResponse> => {\n  try {\n    // Get existing section\n    const existingSection = await getCourseSectionById(sectionId);\n    if (!existingSection) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: \"Section not found\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Check access\n    const accessResult = validateSectionAccess(existingSection, userRole, true);\n    if (!accessResult.hasAccess || !accessResult.permissions?.canEdit) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: accessResult.reason || \"Access denied\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Validate section key uniqueness if changing\n    if (\n      request.sectionKey &&\n      request.sectionKey !== existingSection.sectionKey\n    ) {\n      const isKeyUnique = await isSectionKeyUnique(\n        existingSection.courseId,\n        request.sectionKey,\n        sectionId\n      );\n      if (!isKeyUnique) {\n        return {\n          success: false,\n          error: {\n            code: \"VALIDATION_ERROR\",\n            message: \"Section key must be unique within the course\",\n            timestamp: new Date().toISOString(),\n          },\n          version: \"1.0\",\n        };\n      }\n    }\n\n    // Update section\n    const updates = mapUpdateCourseSectionRequestToDb(request, existingSection);\n    const updatedSection = await updateCourseSection(sectionId, updates);\n\n    if (!updatedSection) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: \"Failed to update section\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    return {\n      success: true,\n      data: mapCourseSectionToApiResponse(updatedSection),\n      version: \"1.0\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: \"SYSTEM_ERROR\",\n        message: \"Internal server error\",\n        timestamp: new Date().toISOString(),\n      },\n      version: \"1.0\",\n    };\n  }\n};\n\n/**\n * Delete course section\n */\nexport const deleteCourseSectionService = async (\n  sectionId: string,\n  userRole: string = \"employee\"\n): Promise<\n  { success: true; message: string; version: \"1.0\" } | LmsContentErrorResponse\n> => {\n  try {\n    // Get existing section\n    const existingSection = await getCourseSectionById(sectionId);\n    if (!existingSection) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: \"Section not found\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Check access\n    const accessResult = validateSectionAccess(existingSection, userRole, true);\n    if (!accessResult.hasAccess || !accessResult.permissions?.canDelete) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: accessResult.reason || \"Access denied\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Delete section\n    const deleted = await deleteCourseSection(sectionId);\n    if (!deleted) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: \"Failed to delete section\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    return {\n      success: true,\n      message: \"Section deleted successfully\",\n      version: \"1.0\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: \"SYSTEM_ERROR\",\n        message: \"Internal server error\",\n        timestamp: new Date().toISOString(),\n      },\n      version: \"1.0\",\n    };\n  }\n};\n\n// =============================================================================\n// CONTENT BLOCK SERVICES\n// =============================================================================\n\n/**\n * Create content block\n */\nexport const createContentBlockService = async (\n  sectionId: string,\n  request: any, // CreateContentBlockRequest\n  userRole: string = \"employee\"\n): Promise<any> => {\n  try {\n    // Check permissions\n    if (userRole === \"employee\") {\n      return {\n        success: false,\n        error: {\n          code: \"USER_NOT_AUTHORIZED\",\n          message: \"Insufficient permissions\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Get section\n    const section = await getCourseSectionById(sectionId);\n    if (!section) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: \"Section not found\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Check access\n    const accessResult = validateSectionAccess(section, userRole, true);\n    if (!accessResult.hasAccess || !accessResult.permissions?.canEdit) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_SECTION_NOT_FOUND\",\n          message: accessResult.reason || \"Access denied\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Validate content\n    const validation = await validateContentBlockContent(\n      request.blockType,\n      request.content\n    );\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: {\n          code: \"VALIDATION_ERROR\",\n          message: validation.errors.join(\", \"),\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Get next order index if not provided\n    const orderIndex =\n      request.orderIndex ?? (await getNextContentBlockOrderIndex(sectionId));\n\n    // Create content block\n    const blockData = mapCreateContentBlockRequestToDb(request, sectionId);\n    const block = await createContentBlock(blockData);\n\n    return {\n      success: true,\n      data: mapContentBlockToApiResponse(block),\n      version: \"1.0\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: \"SYSTEM_ERROR\",\n        message: \"Internal server error\",\n        timestamp: new Date().toISOString(),\n      },\n      version: \"1.0\",\n    };\n  }\n};\n\n// =============================================================================\n// QUIZ QUESTION SERVICES\n// =============================================================================\n\n/**\n * Submit quiz answer\n */\nexport const submitQuizAnswerService = async (\n  quizQuestionId: string,\n  request: any, // SubmitQuizAnswerRequest\n  userId: string,\n  userRole: string = \"employee\"\n): Promise<any> => {\n  try {\n    // Get quiz question\n    const question = await getQuizQuestionById(quizQuestionId);\n    if (!question) {\n      return {\n        success: false,\n        error: {\n          code: \"QUIZ_QUESTION_NOT_FOUND\",\n          message: \"Quiz question not found\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Check access\n    const accessResult = validateQuizQuestionAccess(question, userRole, true);\n    if (!accessResult.hasAccess || !accessResult.permissions?.canSubmitAnswer) {\n      return {\n        success: false,\n        error: {\n          code: \"QUIZ_QUESTION_NOT_FOUND\",\n          message: accessResult.reason || \"Access denied\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Validate answer\n    const validation = validateQuizAnswer(question, request.userAnswer);\n    if (!validation.isValid) {\n      return {\n        success: false,\n        error: {\n          code: \"INVALID_QUIZ_ANSWER\",\n          message: validation.errors.join(\", \"),\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Create quiz attempt\n    const attemptData = mapQuizAnswerSubmissionToAttempt(\n      request,\n      userId,\n      validation.isCorrect\n    );\n    const attempt = await createQuizAttempt(attemptData);\n\n    return {\n      success: true,\n      data: mapQuizAttemptToApiResponse(attempt),\n      version: \"1.0\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: \"SYSTEM_ERROR\",\n        message: \"Internal server error\",\n        timestamp: new Date().toISOString(),\n      },\n      version: \"1.0\",\n    };\n  }\n};\n\n// =============================================================================\n// USER PROGRESS SERVICES\n// =============================================================================\n\n/**\n * Update user progress\n */\nexport const updateUserProgressService = async (\n  userId: string,\n  request: any, // UpdateUserProgressRequest\n  userRole: string = \"employee\"\n): Promise<any> => {\n  try {\n    // Check permissions\n    if (userRole === \"employee\") {\n      return {\n        success: false,\n        error: {\n          code: \"USER_NOT_AUTHORIZED\",\n          message: \"Insufficient permissions\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Get existing progress or create new\n    const existingProgress = await getUserProgressByUserAndSection(\n      userId,\n      request.sectionId\n    );\n\n    let progress;\n    if (existingProgress) {\n      const updates = mapUpdateUserProgressRequestToDb(\n        request,\n        userId,\n        existingProgress\n      );\n      progress = await updateUserProgressByUserAndSection(\n        userId,\n        request.sectionId,\n        updates\n      );\n    } else {\n      const newProgress = mapCreateUserProgressRequestToDb(request, userId);\n      progress = await upsertUserProgress(newProgress);\n    }\n\n    if (!progress) {\n      return {\n        success: false,\n        error: {\n          code: \"PROGRESS_UPDATE_FAILED\",\n          message: \"Failed to update progress\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    return {\n      success: true,\n      data: mapUserProgressToApiResponse(progress),\n      version: \"1.0\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: \"SYSTEM_ERROR\",\n        message: \"Internal server error\",\n        timestamp: new Date().toISOString(),\n      },\n      version: \"1.0\",\n    };\n  }\n};\n\n/**\n * Get course completion status\n */\nexport const getCourseCompletionStatusService = async (\n  userId: string,\n  courseId: string,\n  userRole: string = \"employee\"\n): Promise<any> => {\n  try {\n    // Check access\n    const canAccess = await canUserAccessProgress(\"\", userId, userRole);\n    if (!canAccess) {\n      return {\n        success: false,\n        error: {\n          code: \"USER_NOT_AUTHORIZED\",\n          message: \"Access denied\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    // Calculate completion status\n    const status = await calculateCourseCompletionStatus(userId, courseId);\n    if (!status) {\n      return {\n        success: false,\n        error: {\n          code: \"COURSE_NOT_FOUND\",\n          message: \"Course not found\",\n          timestamp: new Date().toISOString(),\n        },\n        version: \"1.0\",\n      };\n    }\n\n    return {\n      success: true,\n      data: mapCourseCompletionStatusToApiResponse(status),\n      version: \"1.0\",\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: {\n        code: \"SYSTEM_ERROR\",\n        message: \"Internal server error\",\n        timestamp: new Date().toISOString(),\n      },\n      version: \"1.0\",\n    };\n  }\n};\n\n// =============================================================================\n// LMS CONTENT SERVICE OBJECT\n// =============================================================================\n\n/**\n * Main LMS Content Service Object\n * Provides a unified interface for all LMS content operations\n */\nexport const lmsContentService = {\n  // Course Section Services\n  getCourseSections: async (options: any) => {\n    // Simple implementation for now\n    return {\n      success: true,\n      data: [],\n      pagination: {\n        page: 1,\n        limit: 20,\n        total: 0,\n        totalPages: 0,\n        hasNext: false,\n        hasPrev: false,\n      },\n    };\n  },\n\n  createCourseSection: async (data: any) => {\n    return createCourseSectionService(\"\", data);\n  },\n\n  updateCourseSection: async (id: string, data: any) => {\n    return updateCourseSectionService(id, data);\n  },\n\n  deleteCourseSection: async (id: string) => {\n    return deleteCourseSectionService(id);\n  },\n\n  // Content Block Services\n  getContentBlocks: async (options: any) => {\n    // Simple implementation for now\n    return {\n      success: true,\n      data: [],\n      pagination: {\n        page: 1,\n        limit: 20,\n        total: 0,\n        totalPages: 0,\n        hasNext: false,\n        hasPrev: false,\n      },\n    };\n  },\n\n  createContentBlock: async (data: any) => {\n    return createContentBlockService(\"\", data);\n  },\n\n  updateContentBlock: async (id: string, data: any) => {\n    // Implementation needed\n    return {\n      success: true,\n      data: {},\n    };\n  },\n\n  deleteContentBlock: async (id: string) => {\n    // Implementation needed\n    return {\n      success: true,\n      message: \"Content block deleted\",\n    };\n  },\n\n  // Quiz Question Services\n  getQuizQuestions: async (options: any) => {\n    // Simple implementation for now\n    return {\n      success: true,\n      data: [],\n      pagination: {\n        page: 1,\n        limit: 20,\n        total: 0,\n        totalPages: 0,\n        hasNext: false,\n        hasPrev: false,\n      },\n    };\n  },\n\n  createQuizQuestion: async (data: any) => {\n    // Implementation needed\n    return {\n      success: true,\n      data: {},\n    };\n  },\n\n  updateQuizQuestion: async (id: string, data: any) => {\n    // Implementation needed\n    return {\n      success: true,\n      data: {},\n    };\n  },\n\n  deleteQuizQuestion: async (id: string) => {\n    // Implementation needed\n    return {\n      success: true,\n      message: \"Quiz question deleted\",\n    };\n  },\n\n  // User Progress Services\n  getUserProgress: async (options: any) => {\n    // Simple implementation for now\n    return {\n      success: true,\n      data: [],\n      pagination: {\n        page: 1,\n        limit: 20,\n        total: 0,\n        totalPages: 0,\n        hasNext: false,\n        hasPrev: false,\n      },\n    };\n  },\n\n  createUserProgress: async (data: any) => {\n    return updateUserProgressService(\"\", data);\n  },\n\n  updateUserProgress: async (id: string, data: any) => {\n    return updateUserProgressService(\"\", data);\n  },\n\n  deleteUserProgress: async (id: string) => {\n    // Implementation needed\n    return {\n      success: true,\n      message: \"User progress deleted\",\n    };\n  },\n\n  // Course Content Services\n  getCourseContent: getCourseContentService,\n  getSectionContent: getSectionContentService,\n\n  // Quiz Answer Services\n  submitQuizAnswer: submitQuizAnswerService,\n\n  // Course Completion Services\n  getCourseCompletionStatus: getCourseCompletionStatusService,\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 6186, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/app/api/quiz-questions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createServerSupabaseClient, serverAuth } from \"@/lib/supabase/server\";\nimport {\n  createStrictApiResponse,\n  createStrictApiErrorResponse,\n  CURRENT_API_VERSION,\n  StrictPaginationSchema,\n} from \"@/lib/types/api-contracts\";\nimport { z } from \"zod\";\nimport { lmsContentService } from \"@/lib/services/lms-content-service\";\n\n// Quiz question creation schema\nconst createQuizQuestionSchema = z.object({\n  sectionId: z.string().uuid(\"Invalid section ID\"),\n  questionKey: z\n    .string()\n    .min(1, \"Question key is required\")\n    .max(100, \"Question key too long\"),\n  questionType: z.enum([\"true-false\", \"multiple-choice\"]),\n  questionText: z\n    .string()\n    .min(1, \"Question text is required\")\n    .max(1000, \"Question text too long\"),\n  options: z.record(z.any()).optional(), // JSONB options\n  correctAnswer: z.record(z.any()), // JSONB correct answer\n  explanation: z.string().optional(),\n  orderIndex: z\n    .number()\n    .int()\n    .min(0, \"Order index must be non-negative\")\n    .default(0),\n  isPublished: z.boolean().default(false),\n});\n\n// Quiz question update schema\nconst updateQuizQuestionSchema = createQuizQuestionSchema\n  .partial()\n  .omit({ sectionId: true });\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Check authentication\n    const { user } = await serverAuth.getCurrentUser();\n    if (!user) {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"AUTHENTICATION_ERROR\",\n          \"Authentication required\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 401 }\n      );\n    }\n\n    // Parse query parameters\n    const { searchParams } = request.nextUrl;\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const limit = parseInt(searchParams.get(\"limit\") || \"20\");\n    const sortBy = searchParams.get(\"sortBy\") || \"order_index\";\n    const sortOrder = searchParams.get(\"sortOrder\") || \"asc\";\n    const sectionId = searchParams.get(\"sectionId\");\n\n    // Validate pagination\n    const pagination = StrictPaginationSchema.parse({\n      page,\n      limit,\n      sortBy,\n      sortOrder: sortOrder as \"asc\" | \"desc\",\n    });\n\n    // Get quiz questions\n    const result = await lmsContentService.getQuizQuestions({\n      pagination,\n      sectionId: sectionId || undefined,\n    });\n\n    if (!result.success) {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"SYSTEM_ERROR\",\n          result.error || \"Failed to fetch quiz questions\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 500 }\n      );\n    }\n\n    // Return success response with pagination\n    return NextResponse.json(\n      {\n        success: true,\n        data: result.data || [],\n        version: CURRENT_API_VERSION,\n        pagination: result.pagination,\n        metadata: {\n          timestamp: new Date().toISOString(),\n          requestId: crypto.randomUUID(),\n        },\n      },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(\"Quiz questions GET API error:\", error);\n\n    if (error instanceof Error && error.name === \"ZodError\") {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"VALIDATION_ERROR\",\n          \"Invalid query parameters\",\n          [\n            {\n              message: error.message,\n              code: \"VALIDATION_ERROR\",\n            },\n          ],\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      createStrictApiErrorResponse(\n        \"INTERNAL_ERROR\",\n        \"An unexpected error occurred\",\n        undefined,\n        CURRENT_API_VERSION,\n        {\n          requestId: crypto.randomUUID(),\n          path: request.nextUrl.pathname,\n          method: request.method,\n        }\n      ),\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Check authentication\n    const { user, profile } = await serverAuth.getCurrentUser();\n    if (!user) {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"AUTHENTICATION_ERROR\",\n          \"Authentication required\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 401 }\n      );\n    }\n\n    // Check if user has permission to create quiz questions\n    if (profile?.role !== \"admin\" && profile?.role !== \"manager\") {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"AUTHORIZATION_ERROR\",\n          \"Insufficient permissions to create quiz questions\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 403 }\n      );\n    }\n\n    const body = await request.json();\n\n    // Validate request body\n    const validatedData = createQuizQuestionSchema.parse(body);\n\n    // Create quiz question\n    const result = await lmsContentService.createQuizQuestion(validatedData);\n\n    if (!result.success) {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"SYSTEM_ERROR\",\n          result.error || \"Failed to create quiz question\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 500 }\n      );\n    }\n\n    // Return success response\n    return NextResponse.json(\n      createStrictApiResponse(result.data, CURRENT_API_VERSION, {\n        timestamp: new Date().toISOString(),\n        requestId: crypto.randomUUID(),\n      }),\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Quiz questions POST API error:\", error);\n\n    if (error instanceof Error && error.name === \"ZodError\") {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"VALIDATION_ERROR\",\n          \"Invalid request data\",\n          [\n            {\n              message: error.message,\n              code: \"VALIDATION_ERROR\",\n            },\n          ],\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      createStrictApiErrorResponse(\n        \"INTERNAL_ERROR\",\n        \"An unexpected error occurred\",\n        undefined,\n        CURRENT_API_VERSION,\n        {\n          requestId: crypto.randomUUID(),\n          path: request.nextUrl.pathname,\n          method: request.method,\n        }\n      ),\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}