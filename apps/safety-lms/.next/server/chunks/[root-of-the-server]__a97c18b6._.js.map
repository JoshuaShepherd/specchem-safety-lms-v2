{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient, type CookieOptions } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\nimport { cache } from \"react\";\n\nexport const createClient = cache(async () => {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value, ...options });\n          } catch (error) {\n            // The `cookies().set()` method can only be called from a Server Component or Server Action.\n            // This error can be ignored if you are running tests that don't have a Server Component.\n          }\n        },\n        remove(name: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value: \"\", ...options });\n          } catch (error) {\n            // The `cookies().set()` method can only be called from a Server Component or Server Action.\n            // This error can be ignored if you are running tests that don't have a Server Component.\n          }\n        },\n      },\n    }\n  );\n});\n\n// Legacy export for backward compatibility\nexport const createServerSupabaseClient = createClient;\n\n// Server auth helper for API routes\nexport const serverAuth = {\n  async getCurrentUser() {\n    const supabase = await createClient();\n    const { data: { user }, error } = await supabase.auth.getUser();\n\n    if (error || !user) {\n      return { user: null, profile: null };\n    }\n\n    // Get user profile from profiles table\n    const { data: profile, error: profileError } = await supabase\n      .from(\"profiles\")\n      .select(\"*\")\n      .eq(\"auth_user_id\", user.id)\n      .single();\n\n    if (profileError) {\n      console.error(\"Error fetching user profile:\", profileError);\n      return { user, profile: null };\n    }\n\n    return { user, profile };\n  }\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AACA;AACA;;;;AAEO,MAAM,eAAe,IAAA,+UAAK,EAAC;IAChC,MAAM,cAAc,MAAM,IAAA,2QAAO;IAEjC,OAAO,IAAA,8SAAkB,sUAGvB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C,EAAE,OAAO,OAAO;gBACd,4FAA4F;gBAC5F,yFAAyF;gBAC3F;YACF;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD,EAAE,OAAO,OAAO;gBACd,4FAA4F;gBAC5F,yFAAyF;gBAC3F;YACF;QACF;IACF;AAEJ;AAGO,MAAM,6BAA6B;AAGnC,MAAM,aAAa;IACxB,MAAM;QACJ,MAAM,WAAW,MAAM;QACvB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE7D,IAAI,SAAS,CAAC,MAAM;YAClB,OAAO;gBAAE,MAAM;gBAAM,SAAS;YAAK;QACrC;QAEA,uCAAuC;QACvC,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SAClD,IAAI,CAAC,YACL,MAAM,CAAC,KACP,EAAE,CAAC,gBAAgB,KAAK,EAAE,EAC1B,MAAM;QAET,IAAI,cAAc;YAChB,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO;gBAAE;gBAAM,SAAS;YAAK;QAC/B;QAEA,OAAO;YAAE;YAAM;QAAQ;IACzB;AACF","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/types/branded-types.ts"],"sourcesContent":["import { z } from \"zod\";\n\n// =============================================================================\n// BRANDED TYPES FOR DOMAIN SAFETY\n// =============================================================================\n\n/**\n * Branded types provide compile-time type safety by preventing ID confusion\n * and ensuring type-safe operations across domain boundaries.\n */\n\n// =============================================================================\n// DOMAIN ENTITY BRANDED TYPES\n// =============================================================================\n\n// Core Safety Training Entities\nexport type PlantId = string & { readonly __brand: \"PlantId\" };\nexport type UserId = string & { readonly __brand: \"UserId\" };\nexport type CourseId = string & { readonly __brand: \"CourseId\" };\nexport type EnrollmentId = string & { readonly __brand: \"EnrollmentId\" };\nexport type ProgressId = string & { readonly __brand: \"ProgressId\" };\nexport type ActivityEventId = string & { readonly __brand: \"ActivityEventId\" };\nexport type QuestionEventId = string & { readonly __brand: \"QuestionEventId\" };\nexport type AdminRoleId = string & { readonly __brand: \"AdminRoleId\" };\n\n// Safety Business Entities\nexport type TerritoryId = string & { readonly __brand: \"TerritoryId\" };\nexport type AccountId = string & { readonly __brand: \"AccountId\" };\nexport type BranchId = string & { readonly __brand: \"BranchId\" };\nexport type ContactId = string & { readonly __brand: \"ContactId\" };\nexport type OpportunityId = string & { readonly __brand: \"OpportunityId\" };\nexport type ProductId = string & { readonly __brand: \"ProductId\" };\nexport type ProjectId = string & { readonly __brand: \"ProjectId\" };\nexport type SalesFactId = string & { readonly __brand: \"SalesFactId\" };\nexport type ActivityLogId = string & { readonly __brand: \"ActivityLogId\" };\n\n// Auth Integration\nexport type AuthUserId = string & { readonly __brand: \"AuthUserId\" };\n\n// =============================================================================\n// BRANDED SCHEMAS FOR RUNTIME VALIDATION\n// =============================================================================\n\n// Core Safety Training Schemas\nexport const PlantIdSchema = z.string().uuid().brand<\"PlantId\">();\nexport const UserIdSchema = z.string().uuid().brand<\"UserId\">();\nexport const CourseIdSchema = z.string().uuid().brand<\"CourseId\">();\nexport const EnrollmentIdSchema = z.string().uuid().brand<\"EnrollmentId\">();\nexport const ProgressIdSchema = z.string().uuid().brand<\"ProgressId\">();\nexport const ActivityEventIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"ActivityEventId\">();\nexport const QuestionEventIdSchema = z\n  .string()\n  .uuid()\n  .brand<\"QuestionEventId\">();\nexport const AdminRoleIdSchema = z.string().uuid().brand<\"AdminRoleId\">();\n\n// Safety Business Schemas\nexport const TerritoryIdSchema = z.string().uuid().brand<\"TerritoryId\">();\nexport const AccountIdSchema = z.string().uuid().brand<\"AccountId\">();\nexport const BranchIdSchema = z.string().uuid().brand<\"BranchId\">();\nexport const ContactIdSchema = z.string().uuid().brand<\"ContactId\">();\nexport const OpportunityIdSchema = z.string().uuid().brand<\"OpportunityId\">();\nexport const ProductIdSchema = z.string().uuid().brand<\"ProductId\">();\nexport const ProjectIdSchema = z.string().uuid().brand<\"ProjectId\">();\nexport const SalesFactIdSchema = z.string().uuid().brand<\"SalesFactId\">();\nexport const ActivityLogIdSchema = z.string().uuid().brand<\"ActivityLogId\">();\n\n// Auth Integration Schema\nexport const AuthUserIdSchema = z.string().uuid().brand<\"AuthUserId\">();\n\n// =============================================================================\n// BRANDED ENUM TYPES\n// =============================================================================\n\n// Safety Training Enums\nexport type UserRole =\n  | \"safety_admin\"\n  | \"safety_manager\"\n  | \"safety_coordinator\"\n  | \"safety_instructor\"\n  | \"safety_rep\"\n  | \"plant_manager\"\n  | \"hr_admin\"\n  | \"employee\";\n\nexport type PlantStatus = \"active\" | \"inactive\" | \"suspended\" | \"closed\";\nexport type CourseStatus = \"active\" | \"inactive\" | \"draft\" | \"archived\";\nexport type EnrollmentStatus =\n  | \"enrolled\"\n  | \"in_progress\"\n  | \"completed\"\n  | \"failed\"\n  | \"dropped\"\n  | \"expired\";\nexport type ProgressStatus =\n  | \"not_started\"\n  | \"in_progress\"\n  | \"completed\"\n  | \"failed\";\n\n// Safety Business Enums\nexport type AccountStatus = \"active\" | \"inactive\" | \"suspended\" | \"closed\";\nexport type AccountType =\n  | \"safety_equipment_customer\"\n  | \"training_client\"\n  | \"consulting_client\"\n  | \"maintenance_client\"\n  | \"partner\"\n  | \"vendor\";\n\nexport type OpportunityStatus = \"open\" | \"closed\" | \"on_hold\" | \"cancelled\";\nexport type OpportunityStage =\n  | \"prospecting\"\n  | \"qualification\"\n  | \"proposal\"\n  | \"negotiation\"\n  | \"closed_won\"\n  | \"closed_lost\";\nexport type ProductStatus =\n  | \"active\"\n  | \"inactive\"\n  | \"discontinued\"\n  | \"coming_soon\";\nexport type ProjectStatus =\n  | \"planning\"\n  | \"in_progress\"\n  | \"on_hold\"\n  | \"completed\"\n  | \"cancelled\";\n\n// =============================================================================\n// BRANDED ENUM SCHEMAS\n// =============================================================================\n\n// Safety Training Enum Schemas\nexport const UserRoleSchema = z\n  .enum([\n    \"safety_admin\",\n    \"safety_manager\",\n    \"safety_coordinator\",\n    \"safety_instructor\",\n    \"safety_rep\",\n    \"plant_manager\",\n    \"hr_admin\",\n    \"employee\",\n  ])\n  .brand<\"UserRole\">();\n\nexport const PlantStatusSchema = z\n  .enum([\"active\", \"inactive\", \"suspended\", \"closed\"])\n  .brand<\"PlantStatus\">();\nexport const CourseStatusSchema = z\n  .enum([\"active\", \"inactive\", \"draft\", \"archived\"])\n  .brand<\"CourseStatus\">();\nexport const EnrollmentStatusSchema = z\n  .enum([\n    \"enrolled\",\n    \"in_progress\",\n    \"completed\",\n    \"failed\",\n    \"dropped\",\n    \"expired\",\n  ])\n  .brand<\"EnrollmentStatus\">();\nexport const ProgressStatusSchema = z\n  .enum([\"not_started\", \"in_progress\", \"completed\", \"failed\"])\n  .brand<\"ProgressStatus\">();\n\n// Safety Business Enum Schemas\nexport const AccountStatusSchema = z\n  .enum([\"active\", \"inactive\", \"suspended\", \"closed\"])\n  .brand<\"AccountStatus\">();\nexport const AccountTypeSchema = z\n  .enum([\n    \"safety_equipment_customer\",\n    \"training_client\",\n    \"consulting_client\",\n    \"maintenance_client\",\n    \"partner\",\n    \"vendor\",\n  ])\n  .brand<\"AccountType\">();\n\nexport const OpportunityStatusSchema = z\n  .enum([\"open\", \"closed\", \"on_hold\", \"cancelled\"])\n  .brand<\"OpportunityStatus\">();\nexport const OpportunityStageSchema = z\n  .enum([\n    \"prospecting\",\n    \"qualification\",\n    \"proposal\",\n    \"negotiation\",\n    \"closed_won\",\n    \"closed_lost\",\n  ])\n  .brand<\"OpportunityStage\">();\nexport const ProductStatusSchema = z\n  .enum([\"active\", \"inactive\", \"discontinued\", \"coming_soon\"])\n  .brand<\"ProductStatus\">();\nexport const ProjectStatusSchema = z\n  .enum([\"planning\", \"in_progress\", \"on_hold\", \"completed\", \"cancelled\"])\n  .brand<\"ProjectStatus\">();\n\n// =============================================================================\n// TYPE-SAFE ROLE CHECKING\n// =============================================================================\n\n/**\n * Type-safe role checking functions that provide compile-time guarantees\n * about role-based permissions and operations.\n */\n\nexport const isAdminRole = (role: UserRole): role is \"safety_admin\" =>\n  role === \"safety_admin\";\n\nexport const isManagerRole = (\n  role: UserRole\n): role is \"safety_manager\" | \"safety_admin\" =>\n  role === \"safety_manager\" || role === \"safety_admin\";\n\nexport const isInstructorRole = (\n  role: UserRole\n): role is \"safety_instructor\" | \"safety_coordinator\" =>\n  role === \"safety_instructor\" || role === \"safety_coordinator\";\n\nexport const isPlantManagerRole = (role: UserRole): role is \"plant_manager\" =>\n  role === \"plant_manager\";\n\nexport const isHrAdminRole = (role: UserRole): role is \"hr_admin\" =>\n  role === \"hr_admin\";\n\nexport const isEmployeeRole = (role: UserRole): role is \"employee\" =>\n  role === \"employee\";\n\n// =============================================================================\n// TYPE-SAFE ID CONVERSION UTILITIES\n// =============================================================================\n\n/**\n * Type-safe ID conversion utilities that ensure proper branded type handling\n * while maintaining runtime validation.\n */\n\nexport const createPlantId = (id: string): PlantId => {\n  const validated = PlantIdSchema.parse(id);\n  return validated as unknown as PlantId;\n};\n\nexport const createUserId = (id: string): UserId => {\n  const validated = UserIdSchema.parse(id);\n  return validated as unknown as UserId;\n};\n\nexport const createTerritoryId = (id: string): TerritoryId => {\n  const validated = TerritoryIdSchema.parse(id);\n  return validated as unknown as TerritoryId;\n};\n\nexport const createAccountId = (id: string): AccountId => {\n  const validated = AccountIdSchema.parse(id);\n  return validated as unknown as AccountId;\n};\n\nexport const createContactId = (id: string): ContactId => {\n  const validated = ContactIdSchema.parse(id);\n  return validated as unknown as ContactId;\n};\n\nexport const createOpportunityId = (id: string): OpportunityId => {\n  const validated = OpportunityIdSchema.parse(id);\n  return validated as unknown as OpportunityId;\n};\n\n// =============================================================================\n// TYPE-SAFE ENUM CONVERSION UTILITIES\n// =============================================================================\n\nexport const createUserRole = (role: string): UserRole => {\n  const validated = UserRoleSchema.parse(role);\n  return validated as unknown as UserRole;\n};\n\nexport const createAccountStatus = (status: string): AccountStatus => {\n  const validated = AccountStatusSchema.parse(status);\n  return validated as unknown as AccountStatus;\n};\n\nexport const createAccountType = (type: string): AccountType => {\n  const validated = AccountTypeSchema.parse(type);\n  return validated as unknown as AccountType;\n};\n\nexport const createOpportunityStatus = (status: string): OpportunityStatus => {\n  const validated = OpportunityStatusSchema.parse(status);\n  return validated as unknown as OpportunityStatus;\n};\n\nexport const createOpportunityStage = (stage: string): OpportunityStage => {\n  const validated = OpportunityStageSchema.parse(stage);\n  return validated as unknown as OpportunityStage;\n};\n\n// =============================================================================\n// TYPE-SAFE VALIDATION UTILITIES\n// =============================================================================\n\n/**\n * Type-safe validation utilities that provide both compile-time and runtime\n * type safety for branded types and enums.\n */\n\nexport const isValidPlantId = (id: unknown): id is PlantId => {\n  return PlantIdSchema.safeParse(id).success;\n};\n\nexport const isValidUserId = (id: unknown): id is UserId => {\n  return UserIdSchema.safeParse(id).success;\n};\n\nexport const isValidTerritoryId = (id: unknown): id is TerritoryId => {\n  return TerritoryIdSchema.safeParse(id).success;\n};\n\nexport const isValidAccountId = (id: unknown): id is AccountId => {\n  return AccountIdSchema.safeParse(id).success;\n};\n\nexport const isValidUserRole = (role: unknown): role is UserRole => {\n  return UserRoleSchema.safeParse(role).success;\n};\n\nexport const isValidAccountStatus = (\n  status: unknown\n): status is AccountStatus => {\n  return AccountStatusSchema.safeParse(status).success;\n};\n\n// =============================================================================\n// TYPE-SAFE COMPARISON UTILITIES\n// =============================================================================\n\n/**\n * Type-safe comparison utilities that prevent accidental ID mixing\n * and ensure proper domain entity comparisons.\n */\n\nexport const isSamePlant = (id1: PlantId, id2: PlantId): boolean => id1 === id2;\nexport const isSameUser = (id1: UserId, id2: UserId): boolean => id1 === id2;\nexport const isSameTerritory = (id1: TerritoryId, id2: TerritoryId): boolean =>\n  id1 === id2;\nexport const isSameAccount = (id1: AccountId, id2: AccountId): boolean =>\n  id1 === id2;\nexport const isSameContact = (id1: ContactId, id2: ContactId): boolean =>\n  id1 === id2;\nexport const isSameOpportunity = (\n  id1: OpportunityId,\n  id2: OpportunityId\n): boolean => id1 === id2;\n\n// =============================================================================\n// TYPE-SAFE COLLECTION UTILITIES\n// =============================================================================\n\n/**\n * Type-safe collection utilities for working with arrays of branded types.\n */\n\nexport const filterByPlantId = <T extends { plantId: PlantId }>(\n  items: T[],\n  plantId: PlantId\n): T[] => items.filter(item => isSamePlant(item.plantId, plantId));\n\nexport const filterByUserId = <T extends { userId: UserId }>(\n  items: T[],\n  userId: UserId\n): T[] => items.filter(item => isSameUser(item.userId, userId));\n\nexport const filterByTerritoryId = <T extends { territoryId: TerritoryId }>(\n  items: T[],\n  territoryId: TerritoryId\n): T[] => items.filter(item => isSameTerritory(item.territoryId, territoryId));\n\nexport const filterByAccountId = <T extends { accountId: AccountId }>(\n  items: T[],\n  accountId: AccountId\n): T[] => items.filter(item => isSameAccount(item.accountId, accountId));\n\n// =============================================================================\n// TYPE-SAFE MAPPING UTILITIES\n// =============================================================================\n\n/**\n * Type-safe mapping utilities for transforming between different ID types\n * while maintaining type safety.\n */\n\nexport const mapToPlantIds = (items: { plantId: PlantId }[]): PlantId[] =>\n  items.map(item => item.plantId);\n\nexport const mapToUserIds = (items: { userId: UserId }[]): UserId[] =>\n  items.map(item => item.userId);\n\nexport const mapToTerritoryIds = (\n  items: { territoryId: TerritoryId }[]\n): TerritoryId[] => items.map(item => item.territoryId);\n\nexport const mapToAccountIds = (\n  items: { accountId: AccountId }[]\n): AccountId[] => items.map(item => item.accountId);\n\n// =============================================================================\n// TYPE-SAFE SET UTILITIES\n// =============================================================================\n\n/**\n * Type-safe set utilities for working with unique collections of branded types.\n */\n\nexport const createPlantIdSet = (ids: PlantId[]): Set<PlantId> => new Set(ids);\nexport const createUserIdSet = (ids: UserId[]): Set<UserId> => new Set(ids);\nexport const createTerritoryIdSet = (ids: TerritoryId[]): Set<TerritoryId> =>\n  new Set(ids);\nexport const createAccountIdSet = (ids: AccountId[]): Set<AccountId> =>\n  new Set(ids);\n\nexport const hasPlantId = (set: Set<PlantId>, id: PlantId): boolean =>\n  set.has(id);\nexport const hasUserId = (set: Set<UserId>, id: UserId): boolean => set.has(id);\nexport const hasTerritoryId = (\n  set: Set<TerritoryId>,\n  id: TerritoryId\n): boolean => set.has(id);\nexport const hasAccountId = (set: Set<AccountId>, id: AccountId): boolean =>\n  set.has(id);\n\n// =============================================================================\n// TYPE-SAFE ERROR HANDLING\n// =============================================================================\n\n/**\n * Type-safe error handling for branded type operations.\n */\n\nexport class BrandedTypeError extends Error {\n  constructor(\n    public readonly expectedType: string,\n    public readonly actualValue: unknown,\n    message?: string\n  ) {\n    super(message || `Expected ${expectedType}, got ${typeof actualValue}`);\n    this.name = \"BrandedTypeError\";\n  }\n}\n\nexport const assertPlantId = (id: unknown): PlantId => {\n  if (!isValidPlantId(id)) {\n    throw new BrandedTypeError(\"PlantId\", id);\n  }\n  return id;\n};\n\nexport const assertUserId = (id: unknown): UserId => {\n  if (!isValidUserId(id)) {\n    throw new BrandedTypeError(\"UserId\", id);\n  }\n  return id;\n};\n\nexport const assertTerritoryId = (id: unknown): TerritoryId => {\n  if (!isValidTerritoryId(id)) {\n    throw new BrandedTypeError(\"TerritoryId\", id);\n  }\n  return id;\n};\n\nexport const assertAccountId = (id: unknown): AccountId => {\n  if (!isValidAccountId(id)) {\n    throw new BrandedTypeError(\"AccountId\", id);\n  }\n  return id;\n};\n\n// =============================================================================\n// TYPE-SAFE SERIALIZATION\n// =============================================================================\n\n/**\n * Type-safe serialization utilities for branded types.\n */\n\nexport const serializePlantId = (id: PlantId): string => id as string;\nexport const serializeUserId = (id: UserId): string => id as string;\nexport const serializeTerritoryId = (id: TerritoryId): string => id as string;\nexport const serializeAccountId = (id: AccountId): string => id as string;\nexport const serializeContactId = (id: ContactId): string => id as string;\nexport const serializeOpportunityId = (id: OpportunityId): string =>\n  id as string;\n\nexport const deserializePlantId = (id: string): PlantId => createPlantId(id);\nexport const deserializeUserId = (id: string): UserId => createUserId(id);\nexport const deserializeTerritoryId = (id: string): TerritoryId =>\n  createTerritoryId(id);\nexport const deserializeAccountId = (id: string): AccountId =>\n  createAccountId(id);\nexport const deserializeContactId = (id: string): ContactId =>\n  createContactId(id);\nexport const deserializeOpportunityId = (id: string): OpportunityId =>\n  createOpportunityId(id);\n\n// =============================================================================\n// TYPE-SAFE JSON SERIALIZATION\n// =============================================================================\n\n/**\n * Type-safe JSON serialization for objects containing branded types.\n */\n\nexport const serializeBrandedObject = <T extends Record<string, any>>(\n  obj: T\n): Record<string, any> => {\n  const serialized: Record<string, any> = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (\n      typeof value === \"string\" &&\n      (isValidPlantId(value) ||\n        isValidUserId(value) ||\n        isValidTerritoryId(value) ||\n        isValidAccountId(value))\n    ) {\n      serialized[key] = value as string;\n    } else if (typeof value === \"object\" && value !== null) {\n      serialized[key] = serializeBrandedObject(value);\n    } else {\n      serialized[key] = value;\n    }\n  }\n\n  return serialized;\n};\n\nexport const deserializeBrandedObject = <T extends Record<string, any>>(\n  obj: Record<string, any>,\n  schema: Record<string, (value: string) => any>\n): T => {\n  const deserialized: Record<string, any> = {};\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (typeof value === \"string\" && schema[key]) {\n      deserialized[key] = schema[key](value);\n    } else if (typeof value === \"object\" && value !== null) {\n      deserialized[key] = deserializeBrandedObject(value, schema);\n    } else {\n      deserialized[key] = value;\n    }\n  }\n\n  return deserialized as T;\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 619, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/lib/types/api-contracts.ts"],"sourcesContent":["import { z } from \"zod\";\nimport {\n  UserId,\n  TerritoryId,\n  PlantId,\n  AccountId,\n  ContactId,\n  OpportunityId,\n  UserRole,\n  AccountStatus,\n  AccountType,\n  OpportunityStatus,\n  OpportunityStage,\n  ProductStatus,\n  ProjectStatus,\n  UserIdSchema,\n  TerritoryIdSchema,\n  PlantIdSchema,\n  AccountIdSchema,\n  ContactIdSchema,\n  OpportunityIdSchema,\n  UserRoleSchema,\n  AccountStatusSchema,\n  AccountTypeSchema,\n  OpportunityStatusSchema,\n  OpportunityStageSchema,\n  ProductStatusSchema,\n  ProjectStatusSchema,\n} from \"./branded-types\";\n\n// =============================================================================\n// STRICT API CONTRACTS\n// =============================================================================\n\n/**\n * Strict API contracts ensure compile-time type safety with no additional\n * properties allowed, versioned responses, and comprehensive validation.\n */\n\n// =============================================================================\n// API VERSIONING\n// =============================================================================\n\n/**\n * API version schema\n */\nexport const ApiVersionSchema = z\n  .enum([\"1.0\", \"1.1\", \"2.0\"])\n  .brand<\"ApiVersion\">();\nexport type ApiVersion = z.infer<typeof ApiVersionSchema>;\n\n/**\n * Current API version\n */\nexport const CURRENT_API_VERSION: ApiVersion = \"1.0\" as ApiVersion;\n\n// =============================================================================\n// STRICT ENTITY RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Strict account response schema with no additional properties\n */\nexport const StrictAccountResponseSchema = z\n  .object({\n    id: AccountIdSchema,\n    name: z.string().min(1).max(200),\n    accountNumber: z.string().max(50).optional(),\n    type: AccountTypeSchema,\n    status: AccountStatusSchema,\n    industry: z\n      .enum([\n        \"manufacturing\",\n        \"construction\",\n        \"mining\",\n        \"oil_gas\",\n        \"chemical\",\n        \"healthcare\",\n        \"transportation\",\n        \"utilities\",\n        \"government\",\n        \"education\",\n        \"retail\",\n        \"other\",\n      ])\n      .optional(),\n    website: z.string().url().optional(),\n    phone: z.string().optional(),\n    email: z.string().email().optional(),\n    description: z.string().max(2000).optional(),\n    annualRevenue: z.string().optional(),\n    employeeCount: z\n      .enum([\"1-10\", \"11-50\", \"51-200\", \"201-500\", \"500+\"])\n      .optional(),\n    safetyComplianceLevel: z\n      .enum([\"OSHA Compliant\", \"ISO 45001\", \"Custom\", \"Non-Compliant\"])\n      .optional(),\n    billingAddress: z.string().max(500).optional(),\n    shippingAddress: z.string().max(500).optional(),\n    territoryId: TerritoryIdSchema,\n    ownerId: UserIdSchema,\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    createdBy: UserIdSchema,\n  })\n  .strict(); // No additional properties allowed\n\nexport type StrictAccountResponse = z.infer<typeof StrictAccountResponseSchema>;\n\n/**\n * Strict contact response schema with no additional properties\n */\nexport const StrictContactResponseSchema = z\n  .object({\n    id: ContactIdSchema,\n    accountId: AccountIdSchema,\n    branchId: z.string().uuid().optional(),\n    ownerId: UserIdSchema,\n    firstName: z.string().min(1).max(50),\n    lastName: z.string().min(1).max(50),\n    email: z.string().email(),\n    phone: z.string().optional(),\n    mobile: z.string().optional(),\n    jobTitle: z.string().max(100).optional(),\n    department: z.string().max(100).optional(),\n    role: z\n      .enum([\n        \"decision_maker\",\n        \"influencer\",\n        \"user\",\n        \"evaluator\",\n        \"champion\",\n        \"gatekeeper\",\n        \"other\",\n      ])\n      .default(\"user\"),\n    status: z.enum([\"active\", \"inactive\", \"do_not_contact\"]).default(\"active\"),\n    isPrimary: z.boolean().default(false),\n    safetyCertifications: z.string().max(500).optional(),\n    notes: z.string().max(2000).optional(),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    createdBy: UserIdSchema,\n  })\n  .strict();\n\nexport type StrictContactResponse = z.infer<typeof StrictContactResponseSchema>;\n\n/**\n * Strict opportunity response schema with no additional properties\n */\nexport const StrictOpportunityResponseSchema = z\n  .object({\n    id: OpportunityIdSchema,\n    accountId: AccountIdSchema,\n    contactId: z.string().uuid().optional(),\n    ownerId: UserIdSchema,\n    name: z.string().min(1).max(200),\n    description: z.string().max(2000).optional(),\n    type: z.enum([\n      \"safety_equipment_sale\",\n      \"training_service\",\n      \"consulting_service\",\n      \"maintenance_contract\",\n      \"compliance_assessment\",\n      \"emergency_response_planning\",\n      \"other\",\n    ]),\n    stage: OpportunityStageSchema,\n    status: OpportunityStatusSchema,\n    source: z\n      .enum([\n        \"website\",\n        \"referral\",\n        \"cold_call\",\n        \"trade_show\",\n        \"social_media\",\n        \"advertising\",\n        \"other\",\n      ])\n      .optional(),\n    probability: z.enum([\"10\", \"25\", \"50\", \"75\", \"90\"]).default(\"10\"),\n    amount: z.string().optional(),\n    closeDate: z.string().datetime().optional(),\n    actualCloseDate: z.string().datetime().optional(),\n    lostReason: z.string().max(500).optional(),\n    nextSteps: z.string().max(1000).optional(),\n    safetyRequirements: z.string().max(1000).optional(),\n    complianceNotes: z.string().max(1000).optional(),\n    notes: z.string().max(2000).optional(),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    createdBy: UserIdSchema,\n  })\n  .strict();\n\nexport type StrictOpportunityResponse = z.infer<\n  typeof StrictOpportunityResponseSchema\n>;\n\n/**\n * Strict territory response schema with no additional properties\n */\nexport const StrictTerritoryResponseSchema = z\n  .object({\n    id: TerritoryIdSchema,\n    name: z.string().min(1).max(100),\n    code: z.string().min(1).max(20),\n    description: z.string().max(500).optional(),\n    region: z.string().max(50).optional(),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type StrictTerritoryResponse = z.infer<\n  typeof StrictTerritoryResponseSchema\n>;\n\n/**\n * Strict plant response schema with no additional properties\n */\nexport const StrictPlantResponseSchema = z\n  .object({\n    id: PlantIdSchema,\n    name: z.string().min(1).max(100),\n    isActive: z.boolean(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n  })\n  .strict();\n\nexport type StrictPlantResponse = z.infer<typeof StrictPlantResponseSchema>;\n\n/**\n * Strict user response schema with no additional properties\n */\nexport const StrictUserResponseSchema = z\n  .object({\n    id: UserIdSchema,\n    authUserId: z.string().uuid(),\n    plantId: PlantIdSchema.optional(),\n    territoryId: TerritoryIdSchema.optional(),\n    firstName: z.string().min(1).max(50),\n    lastName: z.string().min(1).max(50),\n    email: z.string().email(),\n    phone: z.string().optional(),\n    jobTitle: z.string().max(100).optional(),\n    department: z.string().max(100).optional(),\n    role: UserRoleSchema,\n    status: z.enum([\"active\", \"inactive\", \"suspended\"]),\n    isActive: z.boolean(),\n    lastLoginAt: z.string().datetime().optional(),\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    createdBy: z.string().uuid().optional(),\n  })\n  .strict();\n\nexport type StrictUserResponse = z.infer<typeof StrictUserResponseSchema>;\n\n// =============================================================================\n// VERSIONED API RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Versioned account response schema\n */\nexport const ApiV1AccountResponseSchema = StrictAccountResponseSchema.extend({\n  version: z.literal(\"1.0\"),\n  metadata: z.object({\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    lastModifiedBy: UserIdSchema.optional(),\n    tags: z.array(z.string()).optional(),\n    customFields: z.record(z.string(), z.unknown()).optional(),\n  }),\n}).strict();\n\nexport type ApiV1AccountResponse = z.infer<typeof ApiV1AccountResponseSchema>;\n\n/**\n * Versioned contact response schema\n */\nexport const ApiV1ContactResponseSchema = StrictContactResponseSchema.extend({\n  version: z.literal(\"1.0\"),\n  metadata: z.object({\n    createdAt: z.string().datetime(),\n    updatedAt: z.string().datetime(),\n    lastModifiedBy: UserIdSchema.optional(),\n    tags: z.array(z.string()).optional(),\n    customFields: z.record(z.string(), z.unknown()).optional(),\n  }),\n}).strict();\n\nexport type ApiV1ContactResponse = z.infer<typeof ApiV1ContactResponseSchema>;\n\n/**\n * Versioned opportunity response schema\n */\nexport const ApiV1OpportunityResponseSchema =\n  StrictOpportunityResponseSchema.extend({\n    version: z.literal(\"1.0\"),\n    metadata: z.object({\n      createdAt: z.string().datetime(),\n      updatedAt: z.string().datetime(),\n      lastModifiedBy: UserIdSchema.optional(),\n      tags: z.array(z.string()).optional(),\n      customFields: z.record(z.string(), z.unknown()).optional(),\n    }),\n  }).strict();\n\nexport type ApiV1OpportunityResponse = z.infer<\n  typeof ApiV1OpportunityResponseSchema\n>;\n\n// =============================================================================\n// STRICT API REQUEST SCHEMAS\n// =============================================================================\n\n/**\n * Strict account creation request schema\n */\nexport const StrictCreateAccountRequestSchema = z\n  .object({\n    name: z.string().min(1).max(200),\n    accountNumber: z.string().max(50).optional(),\n    type: AccountTypeSchema,\n    status: AccountStatusSchema.optional(),\n    industry: z\n      .enum([\n        \"manufacturing\",\n        \"construction\",\n        \"mining\",\n        \"oil_gas\",\n        \"chemical\",\n        \"healthcare\",\n        \"transportation\",\n        \"utilities\",\n        \"government\",\n        \"education\",\n        \"retail\",\n        \"other\",\n      ])\n      .optional(),\n    website: z.string().url().optional(),\n    phone: z.string().optional(),\n    email: z.string().email().optional(),\n    description: z.string().max(2000).optional(),\n    annualRevenue: z.string().optional(),\n    employeeCount: z\n      .enum([\"1-10\", \"11-50\", \"51-200\", \"201-500\", \"500+\"])\n      .optional(),\n    safetyComplianceLevel: z\n      .enum([\"OSHA Compliant\", \"ISO 45001\", \"Custom\", \"Non-Compliant\"])\n      .optional(),\n    billingAddress: z.string().max(500).optional(),\n    shippingAddress: z.string().max(500).optional(),\n    territoryId: TerritoryIdSchema,\n    ownerId: UserIdSchema,\n  })\n  .strict();\n\nexport type StrictCreateAccountRequest = z.infer<\n  typeof StrictCreateAccountRequestSchema\n>;\n\n/**\n * Strict account update request schema\n */\nexport const StrictUpdateAccountRequestSchema =\n  StrictCreateAccountRequestSchema.partial().strict();\n\nexport type StrictUpdateAccountRequest = z.infer<\n  typeof StrictUpdateAccountRequestSchema\n>;\n\n/**\n * Strict contact creation request schema\n */\nexport const StrictCreateContactRequestSchema = z\n  .object({\n    accountId: AccountIdSchema,\n    branchId: z.string().uuid().optional(),\n    ownerId: UserIdSchema,\n    firstName: z.string().min(1).max(50),\n    lastName: z.string().min(1).max(50),\n    email: z.string().email(),\n    phone: z.string().optional(),\n    mobile: z.string().optional(),\n    jobTitle: z.string().max(100).optional(),\n    department: z.string().max(100).optional(),\n    role: z\n      .enum([\n        \"decision_maker\",\n        \"influencer\",\n        \"user\",\n        \"evaluator\",\n        \"champion\",\n        \"gatekeeper\",\n        \"other\",\n      ])\n      .default(\"user\"),\n    status: z.enum([\"active\", \"inactive\", \"do_not_contact\"]).default(\"active\"),\n    isPrimary: z.boolean().default(false),\n    safetyCertifications: z.string().max(500).optional(),\n    notes: z.string().max(2000).optional(),\n  })\n  .strict();\n\nexport type StrictCreateContactRequest = z.infer<\n  typeof StrictCreateContactRequestSchema\n>;\n\n/**\n * Strict contact update request schema\n */\nexport const StrictUpdateContactRequestSchema =\n  StrictCreateContactRequestSchema.partial().strict();\n\nexport type StrictUpdateContactRequest = z.infer<\n  typeof StrictUpdateContactRequestSchema\n>;\n\n/**\n * Strict opportunity creation request schema\n */\nexport const StrictCreateOpportunityRequestSchema = z\n  .object({\n    accountId: AccountIdSchema,\n    contactId: z.string().uuid().optional(),\n    ownerId: UserIdSchema,\n    name: z.string().min(1).max(200),\n    description: z.string().max(2000).optional(),\n    type: z.enum([\n      \"safety_equipment_sale\",\n      \"training_service\",\n      \"consulting_service\",\n      \"maintenance_contract\",\n      \"compliance_assessment\",\n      \"emergency_response_planning\",\n      \"other\",\n    ]),\n    stage: OpportunityStageSchema.optional(),\n    status: OpportunityStatusSchema.optional(),\n    source: z\n      .enum([\n        \"website\",\n        \"referral\",\n        \"cold_call\",\n        \"trade_show\",\n        \"social_media\",\n        \"advertising\",\n        \"other\",\n      ])\n      .optional(),\n    probability: z.enum([\"10\", \"25\", \"50\", \"75\", \"90\"]).default(\"10\"),\n    amount: z.string().optional(),\n    closeDate: z.string().datetime().optional(),\n    nextSteps: z.string().max(1000).optional(),\n    safetyRequirements: z.string().max(1000).optional(),\n    complianceNotes: z.string().max(1000).optional(),\n    notes: z.string().max(2000).optional(),\n  })\n  .strict();\n\nexport type StrictCreateOpportunityRequest = z.infer<\n  typeof StrictCreateOpportunityRequestSchema\n>;\n\n/**\n * Strict opportunity update request schema\n */\nexport const StrictUpdateOpportunityRequestSchema =\n  StrictCreateOpportunityRequestSchema.partial().strict();\n\nexport type StrictUpdateOpportunityRequest = z.infer<\n  typeof StrictUpdateOpportunityRequestSchema\n>;\n\n// =============================================================================\n// STRICT QUERY PARAMETER SCHEMAS\n// =============================================================================\n\n/**\n * Strict pagination schema\n */\nexport const StrictPaginationSchema = z\n  .object({\n    page: z.number().int().min(1).default(1),\n    limit: z.number().int().min(1).max(100).default(20),\n    sortBy: z.string().optional(),\n    sortOrder: z.enum([\"asc\", \"desc\"]).default(\"desc\"),\n  })\n  .strict();\n\nexport type StrictPagination = z.infer<typeof StrictPaginationSchema>;\n\n/**\n * Strict search query schema\n */\nexport const StrictSearchQuerySchema = z\n  .object({\n    query: z.string().min(1).max(200),\n    ...StrictPaginationSchema.shape,\n  })\n  .strict();\n\nexport type StrictSearchQuery = z.infer<typeof StrictSearchQuerySchema>;\n\n/**\n * Strict territory-scoped query schema\n */\nexport const StrictTerritoryScopedQuerySchema = z\n  .object({\n    territoryId: TerritoryIdSchema,\n    ...StrictPaginationSchema.shape,\n  })\n  .strict();\n\nexport type StrictTerritoryScopedQuery = z.infer<\n  typeof StrictTerritoryScopedQuerySchema\n>;\n\n/**\n * Strict plant-scoped query schema\n */\nexport const StrictPlantScopedQuerySchema = z\n  .object({\n    plantId: PlantIdSchema,\n    ...StrictPaginationSchema.shape,\n  })\n  .strict();\n\nexport type StrictPlantScopedQuery = z.infer<\n  typeof StrictPlantScopedQuerySchema\n>;\n\n// =============================================================================\n// STRICT ERROR RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Strict error response schema with branded error codes\n */\nexport const StrictErrorResponseSchema = z\n  .object({\n    success: z.literal(false),\n    error: z.object({\n      code: z.enum([\n        \"VALIDATION_ERROR\",\n        \"BUSINESS_ERROR\",\n        \"SYSTEM_ERROR\",\n        \"AUTHENTICATION_ERROR\",\n        \"AUTHORIZATION_ERROR\",\n        \"NOT_FOUND\",\n        \"DUPLICATE\",\n        \"INVALID_STATE\",\n        \"COMPLIANCE_VIOLATION\",\n        \"RATE_LIMIT_EXCEEDED\",\n        \"SERVICE_UNAVAILABLE\",\n        \"INTERNAL_ERROR\",\n      ]),\n      message: z.string().min(1),\n      details: z\n        .array(\n          z.object({\n            field: z.string().optional(),\n            message: z.string(),\n            code: z.string().optional(),\n          })\n        )\n        .optional(),\n      requestId: z.string().optional(),\n      timestamp: z.string().datetime(),\n      path: z.string().optional(),\n      method: z.string().optional(),\n    }),\n    version: ApiVersionSchema,\n  })\n  .strict();\n\nexport type StrictErrorResponse = z.infer<typeof StrictErrorResponseSchema>;\n\n/**\n * Strict success response schema\n */\nexport const StrictSuccessResponseSchema = z\n  .object({\n    success: z.literal(true),\n    data: z.unknown(),\n    version: ApiVersionSchema,\n    metadata: z\n      .object({\n        timestamp: z.string().datetime(),\n        requestId: z.string().optional(),\n        pagination: StrictPaginationSchema.optional(),\n      })\n      .optional(),\n  })\n  .strict();\n\nexport type StrictSuccessResponse = z.infer<typeof StrictSuccessResponseSchema>;\n\n// =============================================================================\n// STRICT PAGINATED RESPONSE SCHEMAS\n// =============================================================================\n\n/**\n * Strict paginated response schema\n */\nexport const StrictPaginatedResponseSchema = <T extends z.ZodTypeAny>(\n  dataSchema: T\n) =>\n  z\n    .object({\n      success: z.literal(true),\n      data: z.array(dataSchema),\n      pagination: z.object({\n        page: z.number().int().min(1),\n        limit: z.number().int().min(1).max(100),\n        total: z.number().int().min(0),\n        totalPages: z.number().int().min(0),\n        hasNext: z.boolean(),\n        hasPrev: z.boolean(),\n      }),\n      version: ApiVersionSchema,\n      metadata: z\n        .object({\n          timestamp: z.string().datetime(),\n          requestId: z.string().optional(),\n        })\n        .optional(),\n    })\n    .strict();\n\n/**\n * Strict paginated account response schema\n */\nexport const StrictPaginatedAccountResponseSchema =\n  StrictPaginatedResponseSchema(StrictAccountResponseSchema);\nexport type StrictPaginatedAccountResponse = z.infer<\n  typeof StrictPaginatedAccountResponseSchema\n>;\n\n/**\n * Strict paginated contact response schema\n */\nexport const StrictPaginatedContactResponseSchema =\n  StrictPaginatedResponseSchema(StrictContactResponseSchema);\nexport type StrictPaginatedContactResponse = z.infer<\n  typeof StrictPaginatedContactResponseSchema\n>;\n\n/**\n * Strict paginated opportunity response schema\n */\nexport const StrictPaginatedOpportunityResponseSchema =\n  StrictPaginatedResponseSchema(StrictOpportunityResponseSchema);\nexport type StrictPaginatedOpportunityResponse = z.infer<\n  typeof StrictPaginatedOpportunityResponseSchema\n>;\n\n// =============================================================================\n// STRICT API CONTRACT VALIDATION\n// =============================================================================\n\n/**\n * Validates that a response conforms to the strict API contract\n */\nexport const validateStrictApiContract = <T>(\n  response: unknown,\n  schema: z.ZodSchema<T>\n): T => {\n  try {\n    return schema.parse(response);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      throw new Error(\n        `API contract validation failed: ${error.issues.map(e => e.message).join(\", \")}`\n      );\n    }\n    throw error;\n  }\n};\n\n/**\n * Validates that a request conforms to the strict API contract\n */\nexport const validateStrictApiRequest = <T>(\n  request: unknown,\n  schema: z.ZodSchema<T>\n): T => {\n  try {\n    return schema.parse(request);\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      throw new Error(\n        `API request validation failed: ${error.issues.map(e => e.message).join(\", \")}`\n      );\n    }\n    throw error;\n  }\n};\n\n/**\n * Creates a strict API response with proper versioning\n */\nexport const createStrictApiResponse = <T>(\n  data: T,\n  version: ApiVersion = CURRENT_API_VERSION,\n  metadata?: {\n    timestamp?: string;\n    requestId?: string;\n    pagination?: StrictPagination;\n  }\n): StrictSuccessResponse => {\n  return {\n    success: true,\n    data,\n    version,\n    metadata: {\n      timestamp: metadata?.timestamp || new Date().toISOString(),\n      requestId: metadata?.requestId,\n      pagination: metadata?.pagination,\n    },\n  };\n};\n\n/**\n * Creates a strict API error response with proper versioning\n */\nexport const createStrictApiErrorResponse = (\n  code: StrictErrorResponse[\"error\"][\"code\"],\n  message: string,\n  details?: StrictErrorResponse[\"error\"][\"details\"],\n  version: ApiVersion = CURRENT_API_VERSION,\n  metadata?: {\n    requestId?: string;\n    path?: string;\n    method?: string;\n  }\n): StrictErrorResponse => {\n  return {\n    success: false,\n    error: {\n      code,\n      message,\n      details,\n      requestId: metadata?.requestId,\n      timestamp: new Date().toISOString(),\n      path: metadata?.path,\n      method: metadata?.method,\n    },\n    version,\n  };\n};\n\n// =============================================================================\n// STRICT API CONTRACT TESTING\n// =============================================================================\n\n/**\n * Type-safe API contract testing utilities\n */\nexport const createApiContractTest = <T>(\n  schema: z.ZodSchema<T>,\n  testData: T\n): {\n  isValid: boolean;\n  errors: string[];\n  validatedData: T | null;\n} => {\n  try {\n    const validatedData = schema.parse(testData);\n    return {\n      isValid: true,\n      errors: [],\n      validatedData,\n    };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return {\n        isValid: false,\n        errors: error.issues.map(e => e.message),\n        validatedData: null,\n      };\n    }\n    return {\n      isValid: false,\n      errors: [\"Unknown validation error\"],\n      validatedData: null,\n    };\n  }\n};\n\n/**\n * Validates that an API response has no additional properties\n */\nexport const validateNoAdditionalProperties = <T>(\n  response: unknown,\n  schema: z.ZodSchema<T>\n): boolean => {\n  try {\n    const validated = schema.parse(response);\n    const responseKeys = Object.keys(response as object);\n    const schemaKeys = Object.keys(validated as object);\n\n    // Check if response has any keys not in the schema\n    const hasAdditionalProperties = responseKeys.some(\n      key => !schemaKeys.includes(key)\n    );\n\n    return !hasAdditionalProperties;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Validates API contract backward compatibility\n */\nexport const validateApiContractCompatibility = <T>(\n  oldSchema: z.ZodSchema<T>,\n  newSchema: z.ZodSchema<T>,\n  testData: T\n): {\n  isCompatible: boolean;\n  breakingChanges: string[];\n  warnings: string[];\n} => {\n  const breakingChanges: string[] = [];\n  const warnings: string[] = [];\n\n  try {\n    // Validate with old schema\n    const oldResult = oldSchema.parse(testData);\n\n    // Validate with new schema\n    const newResult = newSchema.parse(testData);\n\n    // Check for breaking changes\n    const oldKeys = Object.keys(oldResult as object);\n    const newKeys = Object.keys(newResult as object);\n\n    // Check for removed fields\n    const removedFields = oldKeys.filter(key => !newKeys.includes(key));\n    if (removedFields.length > 0) {\n      breakingChanges.push(`Removed fields: ${removedFields.join(\", \")}`);\n    }\n\n    // Check for type changes\n    for (const key of oldKeys) {\n      if (newKeys.includes(key)) {\n        const oldType = typeof (oldResult as any)[key];\n        const newType = typeof (newResult as any)[key];\n        if (oldType !== newType) {\n          breakingChanges.push(\n            `Type change for field '${key}': ${oldType} -> ${newType}`\n          );\n        }\n      }\n    }\n\n    return {\n      isCompatible: breakingChanges.length === 0,\n      breakingChanges,\n      warnings,\n    };\n  } catch (error) {\n    return {\n      isCompatible: false,\n      breakingChanges: [\"Schema validation failed\"],\n      warnings: [],\n    };\n  }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1221, "column": 0}, "map": {"version":3,"sources":["file:///Users/joshshepherd/Projects/specchem-safety-v2-main/apps/safety-lms/src/app/api/courses/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { createServerSupabaseClient, serverAuth } from \"@/lib/supabase/server\";\nimport {\n  createStrictApiResponse,\n  createStrictApiErrorResponse,\n  CURRENT_API_VERSION,\n  StrictPaginationSchema,\n} from \"@/lib/types/api-contracts\";\nimport { z } from \"zod\";\n\n// Course creation schema\nconst createCourseSchema = z.object({\n  title: z.string().min(1, \"Title is required\").max(200, \"Title too long\"),\n  description: z\n    .string()\n    .min(1, \"Description is required\")\n    .max(2000, \"Description too long\"),\n  duration_minutes: z\n    .number()\n    .int()\n    .min(1, \"Duration must be at least 1 minute\")\n    .max(10080, \"Duration too long\"), // Max 1 week\n  is_active: z.boolean().default(true),\n});\n\n// Course update schema\nconst updateCourseSchema = createCourseSchema.partial();\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Check authentication\n    const { user } = await serverAuth.getCurrentUser();\n    if (!user) {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"AUTHENTICATION_ERROR\",\n          \"Authentication required\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 401 }\n      );\n    }\n\n    // Parse query parameters\n    const { searchParams } = request.nextUrl;\n    const page = parseInt(searchParams.get(\"page\") || \"1\");\n    const limit = parseInt(searchParams.get(\"limit\") || \"20\");\n    const sortBy = searchParams.get(\"sortBy\") || \"created_at\";\n    const sortOrder = searchParams.get(\"sortOrder\") || \"desc\";\n\n    // Validate pagination\n    const pagination = StrictPaginationSchema.parse({\n      page,\n      limit,\n      sortBy,\n      sortOrder: sortOrder as \"asc\" | \"desc\",\n    });\n\n    // Create Supabase client\n    const supabase = await createServerSupabaseClient();\n\n    // Get total count\n    const { count } = await supabase\n      .from(\"courses\")\n      .select(\"*\", { count: \"exact\", head: true });\n\n    // Get courses with pagination\n    const { data: courses, error } = await supabase\n      .from(\"courses\")\n      .select(\"*\")\n      .order(sortBy, { ascending: sortOrder === \"asc\" })\n      .range(\n        (pagination.page - 1) * pagination.limit,\n        pagination.page * pagination.limit - 1\n      );\n\n    if (error) {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"SYSTEM_ERROR\",\n          \"Failed to fetch courses\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 500 }\n      );\n    }\n\n    const total = count || 0;\n    const totalPages = Math.ceil(total / pagination.limit);\n\n    // Return success response with pagination\n    return NextResponse.json({\n      success: true,\n      data: courses || [],\n      version: CURRENT_API_VERSION,\n      pagination: {\n        page: pagination.page,\n        limit: pagination.limit,\n        total,\n        totalPages,\n        hasNext: pagination.page < totalPages,\n        hasPrev: pagination.page > 1,\n      },\n      metadata: {\n        timestamp: new Date().toISOString(),\n        requestId: crypto.randomUUID(),\n      },\n    }, { status: 200 });\n  } catch (error) {\n    console.error(\"Courses GET API error:\", error);\n\n    if (error instanceof Error && error.name === \"ZodError\") {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"VALIDATION_ERROR\",\n          \"Invalid query parameters\",\n          [\n            {\n              message: error.message,\n              code: \"VALIDATION_ERROR\",\n            },\n          ],\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      createStrictApiErrorResponse(\n        \"INTERNAL_ERROR\",\n        \"An unexpected error occurred\",\n        undefined,\n        CURRENT_API_VERSION,\n        {\n          requestId: crypto.randomUUID(),\n          path: request.nextUrl.pathname,\n          method: request.method,\n        }\n      ),\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    // Check authentication\n    const { user, profile } = await serverAuth.getCurrentUser();\n    if (!user) {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"AUTHENTICATION_ERROR\",\n          \"Authentication required\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 401 }\n      );\n    }\n\n    // Check if user has permission to create courses\n    if (profile?.role !== \"admin\" && profile?.role !== \"manager\") {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"AUTHORIZATION_ERROR\",\n          \"Insufficient permissions to create courses\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 403 }\n      );\n    }\n\n    const body = await request.json();\n\n    // Validate request body\n    const validatedData = createCourseSchema.parse(body);\n\n    // Create Supabase client\n    const supabase = await createServerSupabaseClient();\n\n    // Create course\n    const { data: course, error } = await supabase\n      .from(\"courses\")\n      .insert([validatedData])\n      .select()\n      .single();\n\n    if (error) {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"SYSTEM_ERROR\",\n          \"Failed to create course\",\n          undefined,\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 500 }\n      );\n    }\n\n    // Return success response\n    return NextResponse.json(\n      createStrictApiResponse(course, CURRENT_API_VERSION, {\n        timestamp: new Date().toISOString(),\n        requestId: crypto.randomUUID(),\n      }),\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error(\"Courses POST API error:\", error);\n\n    if (error instanceof Error && error.name === \"ZodError\") {\n      return NextResponse.json(\n        createStrictApiErrorResponse(\n          \"VALIDATION_ERROR\",\n          \"Invalid request data\",\n          [\n            {\n              message: error.message,\n              code: \"VALIDATION_ERROR\",\n            },\n          ],\n          CURRENT_API_VERSION,\n          {\n            requestId: crypto.randomUUID(),\n            path: request.nextUrl.pathname,\n            method: request.method,\n          }\n        ),\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      createStrictApiErrorResponse(\n        \"INTERNAL_ERROR\",\n        \"An unexpected error occurred\",\n        undefined,\n        CURRENT_API_VERSION,\n        {\n          requestId: crypto.randomUUID(),\n          path: request.nextUrl.pathname,\n          method: request.method,\n        }\n      ),\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}