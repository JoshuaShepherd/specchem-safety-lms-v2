{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/safety-lms/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient, type CookieOptions } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\nimport { cache } from \"react\";\n\nexport const createClient = cache(async () => {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value;\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value, ...options });\n          } catch (error) {\n            // The `cookies().set()` method can only be called from a Server Component or Server Action.\n            // This error can be ignored if you are running tests that don't have a Server Component.\n          }\n        },\n        remove(name: string, options: CookieOptions) {\n          try {\n            cookieStore.set({ name, value: \"\", ...options });\n          } catch (error) {\n            // The `cookies().set()` method can only be called from a Server Component or Server Action.\n            // This error can be ignored if you are running tests that don't have a Server Component.\n          }\n        },\n      },\n    }\n  );\n});\n\n// Legacy export for backward compatibility\nexport const createServerSupabaseClient = createClient;\n\n// Server auth helper for API routes\nexport const serverAuth = {\n  async getCurrentUser() {\n    const supabase = await createClient();\n    const { data: { user }, error } = await supabase.auth.getUser();\n\n    if (error || !user) {\n      return { user: null, profile: null };\n    }\n\n    // Get user profile from profiles table\n    const { data: profile, error: profileError } = await supabase\n      .from(\"profiles\")\n      .select(\"*\")\n      .eq(\"auth_user_id\", user.id)\n      .single();\n\n    if (profileError) {\n      console.error(\"Error fetching user profile:\", profileError);\n      return { user, profile: null };\n    }\n\n    return { user, profile };\n  }\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;AAAA;AACA;AAAA;AACA;;;;AAEO,MAAM,eAAe,IAAA,6TAAK,EAAC;IAChC,MAAM,cAAc,MAAM,IAAA,qTAAO;IAEjC,OAAO,IAAA,oTAAkB,sUAGvB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM;wBAAO,GAAG,OAAO;oBAAC;gBAC5C,EAAE,OAAO,OAAO;gBACd,4FAA4F;gBAC5F,yFAAyF;gBAC3F;YACF;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,IAAI;oBACF,YAAY,GAAG,CAAC;wBAAE;wBAAM,OAAO;wBAAI,GAAG,OAAO;oBAAC;gBAChD,EAAE,OAAO,OAAO;gBACd,4FAA4F;gBAC5F,yFAAyF;gBAC3F;YACF;QACF;IACF;AAEJ;AAGO,MAAM,6BAA6B;AAGnC,MAAM,aAAa;IACxB,MAAM;QACJ,MAAM,WAAW,MAAM;QACvB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE7D,IAAI,SAAS,CAAC,MAAM;YAClB,OAAO;gBAAE,MAAM;gBAAM,SAAS;YAAK;QACrC;QAEA,uCAAuC;QACvC,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,SAClD,IAAI,CAAC,YACL,MAAM,CAAC,KACP,EAAE,CAAC,gBAAgB,KAAK,EAAE,EAC1B,MAAM;QAET,IAAI,cAAc;YAChB,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO;gBAAE;gBAAM,SAAS;YAAK;QAC/B;QAEA,OAAO;YAAE;YAAM;QAAQ;IACzB;AACF"}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/apps/safety-lms/middleware.ts"],"sourcesContent":["import { NextResponse, type NextRequest } from \"next/server\";\nimport { createClient } from \"@/lib/supabase/server\";\n\nexport async function middleware(request: NextRequest) {\n  try {\n    const supabase = await createClient();\n\n    // Refresh session if expired - required for Server Components\n    // and Server Actions to be able to read cookies\n    const {\n      data: { user },\n    } = await supabase.auth.getUser();\n\n    if (!user && !request.nextUrl.pathname.startsWith(\"/auth/login\")) {\n      // Redirect unauthenticated users to the login page\n      const redirectTo = request.nextUrl.pathname;\n      const loginUrl = new URL(\"/auth/login\", request.url);\n      loginUrl.searchParams.set(\"redirectTo\", redirectTo);\n      return NextResponse.redirect(loginUrl);\n    }\n\n    return NextResponse.next();\n  } catch (e) {\n    // If an error occurs, try to refresh the session\n    return NextResponse.next({\n      request: {\n        headers: request.headers,\n      },\n    });\n  }\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|public/).*)\",\n  ],\n};\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AACA;;;AAEO,eAAe,WAAW,OAAoB;IACnD,IAAI;QACF,MAAM,WAAW,MAAM,IAAA,iLAAY;QAEnC,8DAA8D;QAC9D,gDAAgD;QAChD,MAAM,EACJ,MAAM,EAAE,IAAI,EAAE,EACf,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAE/B,IAAI,CAAC,QAAQ,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB;YAChE,mDAAmD;YACnD,MAAM,aAAa,QAAQ,OAAO,CAAC,QAAQ;YAC3C,MAAM,WAAW,IAAI,IAAI,eAAe,QAAQ,GAAG;YACnD,SAAS,YAAY,CAAC,GAAG,CAAC,cAAc;YACxC,OAAO,+TAAY,CAAC,QAAQ,CAAC;QAC/B;QAEA,OAAO,+TAAY,CAAC,IAAI;IAC1B,EAAE,OAAO,GAAG;QACV,iDAAiD;QACjD,OAAO,+TAAY,CAAC,IAAI,CAAC;YACvB,SAAS;gBACP,SAAS,QAAQ,OAAO;YAC1B;QACF;IACF;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}